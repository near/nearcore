use sha2::Digest;

fn content_prefix(content: &str) -> String {
    format!(
        "/// this file sha256 = {}\n",
        base64::encode(&sha2::Sha256::digest(content.as_bytes()))
    )
}

fn main() -> std::io::Result<()> {
    // Generate code from proto, whenever proto files change.
    // TODO: generalize to an arbitrary number of protos.

    // TODO: this is disgusting, generated code shouldn't be checked into git.
    let proto_path = "src/network_protocol/network.proto";
    let generated_path = "src/network_protocol/generated/network.rs";

    let want_hash = sha2::Sha256::digest(std::fs::read_to_string(proto_path)?.as_ref());
    let mut want_prefix = String::new();
    want_prefix += "/// This is an autogenerated file. DO NOT EDIT.\n";
    want_prefix += &format!("/// proto file sha256 = {}\n", base64::encode(&want_hash));

    let up_to_date = (|| {
        let generated = std::fs::read_to_string(generated_path).ok()?;
        let generated = generated.strip_prefix(&want_prefix)?;
        let (prefix, content) = generated.split_once('\n')?;
        if format!("{prefix}\n") != content_prefix(content) {
            return None;
        }
        Some(())
    })()
    .is_some();
    if up_to_date {
        return Ok(());
    }

    eprintln!("proto file changed, need to regenerate the code");
    eprintln!("This requires protoc to be installed and available in $PATH");
    prost_build::Config::new()
        .out_dir("src/network_protocol/generated")
        .compile_protos(&[proto_path], &["src/"])?;
    let content = std::fs::read_to_string(generated_path)?;
    let mut generated = want_prefix;
    generated += &content_prefix(&content);
    generated += &content;
    std::fs::write(generated_path, generated)?;

    Ok(())
}
