#!/usr/bin/env python
import hashlib
import json
import os
import shlex
import sys
import time
import uuid

import boto3
import click
import delegator
import jinja2
import requests

alphabet = b'123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'


def b58encode_int(i, default_one=True):
    """Encode an integer using Base58"""
    if not i and default_one:
        return alphabet[0:1]

    string = b''
    while i:
        i, idx = divmod(i, 58)
        string = alphabet[idx:idx + 1] + string
    return string


def b58encode(v):
    """Encode a string using Base58"""
    pad_size = len(v)
    v = v.lstrip(b'\0')
    pad_size -= len(v)

    p, acc = 1, 0
    for c in reversed(list(bytearray(v))):
        acc += p * c
        p = p << 8

    result = b58encode_int(acc, default_one=False)

    return alphabet[0:1] * pad_size + result


class DashboardTemplateFetcher(object):
    def fetch_template(self, file_name):
        raise NotImplementedError


class GithubDashboardTemplateFetcher(DashboardTemplateFetcher):
    def __init__(self):
        self._env = jinja2.Environment()

    def fetch_template(self, file_name):
        url_base = 'https://raw.githubusercontent.com/' \
                   'nearprotocol/dashboard/master/ops/k8s/'
        url = url_base + file_name
        response = requests.get(url)
        assert response.status_code == 200, response.content
        return self._env.from_string(response.content.decode('utf-8'))


class LocalDashboardRepoTemplateFetcher(DashboardTemplateFetcher):
    def __init__(self, dashboard_repo_location):
        file_prefix = os.path.join(dashboard_repo_location, 'ops/k8s')
        self._env = jinja2.Environment(
            loader=jinja2.FileSystemLoader(file_prefix),
        )

    def fetch_template(self, file_name):
        return self._env.get_template(file_name)


class Executor(object):
    def __init__(
            self,
            debug,
            dashboard_repo_location=None,
            deploy_dashboard=True,
            kubectl_context=None,
            push_registry=None,
    ):
        self._kubectl_context = kubectl_context
        self._push_registry = push_registry
        self._ingress_file_name = NotImplemented

        self._run_fn = _run_wrapper()
        if debug:
            docker_run_fn = _debug_run_wrapper()
        else:
            docker_run_fn = self._run_fn
        self._docker_runner = DockerRunner(docker_run_fn)
        self._deploy_dashboard = deploy_dashboard
        if deploy_dashboard:
            if dashboard_repo_location is not None:
                fetcher = LocalDashboardRepoTemplateFetcher(
                    dashboard_repo_location,
                )
                self._dashboard_template_fetcher = fetcher
            else:
                fetcher = GithubDashboardTemplateFetcher()
                self._dashboard_template_fetcher = fetcher

    def _setup(self):
        pass

    def _get_deploy_registry(self):
        return self._push_registry

    def _push_image(self, push_tag):
        print('Pushing image...')
        self._docker_runner.run("sudo docker push {}".format(push_tag))

    def _kubectl_create_from_yaml(self, yaml):
        return self._run_fn("echo {} | kubectl create -f -".format(shlex.quote(yaml)))

    def _create_dashboard(self, namespace):
        server_template = self._dashboard_template_fetcher.fetch_template('server.yaml')
        server_yaml = server_template.render(namespace=namespace)
        self._kubectl_create_from_yaml(server_yaml)

        collector_template = self._dashboard_template_fetcher.fetch_template('collector.yaml')
        collector_yaml = collector_template.render(namespace=namespace)
        self._kubectl_create_from_yaml(collector_yaml)

        webui_template = self._dashboard_template_fetcher.fetch_template('webui.yaml')
        webui_yaml = webui_template.render(namespace=namespace)
        self._kubectl_create_from_yaml(webui_yaml)

        ingress_template = self._dashboard_template_fetcher.fetch_template(self._ingress_file_name)
        ingress_yaml = ingress_template.render(namespace=namespace)
        self._kubectl_create_from_yaml(ingress_yaml)

    @staticmethod
    def _generate_boot_node_info(namespace, node_index):
        host_name = "node-{}.node.{}.svc.cluster.local".format(node_index, namespace)
        peer_id = b58encode(hashlib.sha256(node_index.to_bytes(32, byteorder='big')).digest()).decode('utf-8')
        return host_name, peer_id

    def execute(
            self,
            node_count,
            image_tag=None,
    ):
        self._setup()
        self._run_fn("kubectl config use-context {}".format(self._kubectl_context))
        _uuid = uuid.uuid4().hex

        push_tag = "{}/nearprotocol/nearcore:k8s-{}".format(self._push_registry, _uuid)
        deploy_registry = self._get_deploy_registry()
        # deploy_tag is distinct from push_tag to support the case where the
        # minikube registry has a different ip when pushing vs when pulling
        deploy_tag = "{}/nearprotocol/nearcore:k8s-{}".format(deploy_registry, _uuid)
        if image_tag is None:
            print('Building image...')
            package = 'nearcore'
            build_script = os.path.join(
                os.path.abspath(os.path.dirname(__file__)),
                '../../docker/build',
            )
            self._docker_runner.run("sudo -E {} {} {}".format(build_script, package, push_tag))
            self._docker_runner.run('sudo docker image prune -f')
        else:
            print('Tagging image...')
            self._docker_runner.run("sudo docker tag {} {}".format(image_tag, push_tag))

        self._push_image(push_tag)

        namespace = "nearcore-{}".format(_uuid)
        boot_node_host, boot_node_peer_id = self._generate_boot_node_info(namespace, node_index=0)
        print('Deploying build...')
        env = jinja2.Environment(loader=jinja2.FileSystemLoader('../k8s/'))
        template = env.get_template('run.yaml')
        run_yaml = template.render(
            namespace=namespace,
            image_tag=deploy_tag,
            node_count=node_count,
            boot_node_host=boot_node_host,
            boot_node_peer_id=boot_node_peer_id,
        )
        self._kubectl_create_from_yaml(run_yaml)

        if self._deploy_dashboard:
            self._create_dashboard(namespace)

        namespace_set_command = "kubectl config set-context " \
                                "$(kubectl config current-context) " \
                                "--namespace={}".format(namespace)
        print(namespace_set_command)


class MinikubeExecutor(Executor):
    def __init__(self, *args, **kwargs):
        if kwargs['kubectl_context'] is None:
            kwargs['kubectl_context'] = 'minikube'
        if kwargs['push_registry'] is None:
            kwargs['push_registry'] = 'localhost:5000'

        super(MinikubeExecutor, self).__init__(*args, **kwargs)
        self._ingress_file_name = 'minikube.yaml'

    def _get_deploy_registry(self):
        return self._run_fn(
            'kubectl -n kube-system get svc '
            '| grep \'^registry\s\' '
            '| awk \'{ printf $3 }\''
        ).out

    def _setup(self):
        minikube_status = self._run_fn('minikube status')
        if minikube_status.return_code != 0:
            print('Starting minikube...')
            self._run_fn('minikube start')

    def _push_image(self, push_tag):
        print('Initiating minikube registry port forwarding...')
        registry_port_fwd = delegator.run(
            'kubectl port-forward '
            '--namespace kube-system service/registry 5000:80',
            block=False,
        )
        time.sleep(1)
        try:
            super(MinikubeExecutor, self)._push_image(push_tag)
        except Exception as e:
            raise e
        finally:
            print('Terminating minikube registry port forwarding...')
            registry_port_fwd.kill()


class AWSExecutor(Executor):
    def __init__(self, *args, **kwargs):
        super(AWSExecutor, self).__init__(*args, **kwargs)
        self._deploy_registry = self._push_registry
        self._ingress_file_name = 'aws.yaml'


def _validate_for_aws(ctx, derp, value):
    if derp not in ctx.params:
        if value is None and ctx.params['executor'] == 'aws':
            message = "{} must be set if executor is set to 'aws'".format(derp)
            raise click.MissingParameter(message)
    return value


help_text = """
All arguments can be specified via environment variables for convenience.
(ex. `NEAR_DASHBOARD_REPO_LOCATION=<location>` in your environment \
is equivalent to passing `--dashboard-repo-location <location>`)
"""


@click.command(context_settings={'auto_envvar_prefix': 'NEAR'}, help=help_text)
@click.option('--dashboard-repo-location', type=str)
@click.option(
    '--executor',
    type=click.Choice(['aws', 'minikube']),
    default='minikube',
    show_default=True,
)
@click.option('--debug', is_flag=True, default=False)
@click.option('--image-tag')
@click.option('--node-count', type=int, default=2)
@click.option('--no-dashboard', is_flag=True, default=False)
@click.option('--push-registry', callback=_validate_for_aws)
@click.option('--kubectl-context', callback=_validate_for_aws)
def build_and_run(
        executor,
        debug,
        node_count=5,
        dashboard_repo_location=None,
        image_tag=None,
        no_dashboard=False,
        push_registry=None,
        kubectl_context=None,
):
    executor_cls = {
        'aws': AWSExecutor,
        'minikube': MinikubeExecutor,
    }[executor]
    _executor = executor_cls(
        debug,
        dashboard_repo_location,
        deploy_dashboard=not no_dashboard,
        push_registry=push_registry,
        kubectl_context=kubectl_context,
    )
    return _executor.execute(node_count, image_tag)


class PipeCommand(delegator.Command):
    def run(self, *args, **kwargs):
        try:
            super(PipeCommand, self).run(*args, **kwargs)
            self.subprocess.wait()
        except KeyboardInterrupt:
            self.kill()

    @property
    def _default_popen_kwargs(self):
        kwargs = super(PipeCommand, self)._default_popen_kwargs
        kwargs['stderr'] = sys.stderr
        return kwargs


class DebugCommand(PipeCommand):
    @property
    def _default_popen_kwargs(self):
        kwargs = super(DebugCommand, self)._default_popen_kwargs
        kwargs['stdout'] = sys.stdout
        return kwargs


def _run_wrapper(extra_env=None):
    if extra_env is None:
        extra_env = {}

    def _run(*args, **kwargs):
        if 'env' in kwargs:
            kwargs['env'].update(extra_env)
        else:
            kwargs['env'] = extra_env
        return delegator.run(command_cls=PipeCommand, *args, **kwargs)

    return _run


def _debug_run_wrapper(extra_env=None):
    if extra_env is None:
        extra_env = {}

    def _debug_run(*args, **kwargs):
        if 'env' in kwargs:
            kwargs['env'].update(extra_env)
        else:
            kwargs['env'] = extra_env
        return delegator.run(command_cls=DebugCommand, *args, **kwargs)

    return _debug_run


class DockerRunner(object):
    def __init__(self, run_fn):
        self._run_fn = run_fn

    def setup(self):
        pass

    def run(self, command, run_fn=None):
        if run_fn is None:
            run_fn = self._run_fn
        return run_fn(command)


if __name__ == '__main__':
    build_and_run()
