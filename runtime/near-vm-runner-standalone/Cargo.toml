[package]
name = "near-vm-runner-standalone"
version = "0.0.0"
authors = ["Near Inc <hello@nearprotocol.com>"]
publish = false
# Please update rust-toolchain.toml as well when changing version here:
rust-version = "1.56.0"
edition = "2021"
license = "Apache-2.0"
readme = "README.md"
categories = ["wasm"]
repository = "https://github.com/nearprotocol/nearcore"
description = """
A command line wrapper around `near-vm-runner.`
All error messages that can be raised during the contract execution are raised by `near-vm-runner`
and the all effects of computing the execution result of a smart contract are encapsulated inside `near-vm-runner`.

One can use `near-vm-runner-standalone` to test the smart contracts, e.g. with integration tests
to make sure it has expected behavior once deployed to the blockchain.
"""

[dependencies]
serde = { version = "1", features = ["derive"] }
serde_json = "1"
clap = "=3.0.0-beta.2"
clap_derive = "=3.0.0-beta.2"
base64 = "0.13"
strum = "0.20"
num-rational = "0.3"
tracing-span-tree = "0.1"

near-vm-logic = { path = "../near-vm-logic", features = ["costs_counting"]}
near-vm-runner = { path = "../near-vm-runner", features = ["wasmtime_vm", "wasmer2_vm"] }
near-primitives-core = { path = "../../core/primitives-core" }
near-primitives = { path = "../../core/primitives" }

[dev-dependencies]
hex = "0.4"
near-test-contracts = { path = "../near-test-contracts" }

[features]
default = []
no_cache = ["near-vm-runner/no_cache"]
protocol_feature_alt_bn128 = ["near-vm-logic/protocol_feature_alt_bn128", "near-vm-runner/protocol_feature_alt_bn128"]
nightly_protocol_features = ["nightly_protocol", "near-primitives/nightly_protocol_features", "protocol_feature_alt_bn128"]
nightly_protocol = ["near-primitives/nightly_protocol"]
