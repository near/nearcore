[package]
name = "near-vm-runner"
version = "0.0.0"
authors = ["Near Inc <hello@nearprotocol.com>"]
publish = false
# Please update rust-toolchain.toml as well when changing version here:
rust-version = "1.56.0"
edition = "2021"
license = "MIT OR Apache-2.0"
readme = "README.md"
categories = ["wasm"]
repository = "https://github.com/nearprotocol/nearcore"
description = """
This crate implements the specification of the interface that Near blockchain exposes to the smart contracts.
"""

[dependencies]
borsh = "0.9"
serde = { version = "1", features = ["derive"] }
wasmer-runtime = { version = "0.18.0", features = ["default-backend-singlepass"], default-features = false, package = "wasmer-runtime-near", optional = true }
wasmer-runtime-core = { version = "0.18.2", package = "wasmer-runtime-core-near", optional = true}
wasmparser = "0.78"
memoffset = "0.6"

# Use the following for development versions of Wasmer.
# wasmer-types = { package = "wasmer-types-near", git = "https://github.com/near/wasmer", branch = "near-main", optional = true }
# wasmer-compiler-singlepass = { package = "wasmer-compiler-singlepass-near", git = "https://github.com/near/wasmer", branch = "near-main", optional = true }
# wasmer-engine-universal = { package = "wasmer-engine-universal-near", git = "https://github.com/near/wasmer", branch = "near-main", optional = true }
# wasmer-vm = { package = "wasmer-vm-near", git = "https://github.com/near/wasmer", branch = "near-main" }
wasmer-compiler = { package = "wasmer-compiler-near", version = "=2.1.2", optional = true }
wasmer-compiler-singlepass = { package = "wasmer-compiler-singlepass-near", version = "=2.1.2", optional = true }
wasmer-engine = { package = "wasmer-engine-near", version = "=2.1.2", optional = true }
wasmer-engine-universal = { package = "wasmer-engine-universal-near", version = "=2.1.2", optional = true, features = ["compiler"] }
wasmer-types = { package = "wasmer-types-near", version = "=2.1.2", optional = true }
wasmer-vm = { package = "wasmer-vm-near", version = "=2.1.2", optional = true }

loupe = "0.1"
once_cell = "1.5.2"
pwasm-utils = "0.18"
wasmtime = { version = "0.25.0", default-features = false, optional = true }
anyhow = { version = "1.0.19", optional = true }
near-cache = { path = "../../utils/near-cache" }
near-vm-logic = { path = "../near-vm-logic", default-features = false, features = [] }
near-vm-errors = { path = "../near-vm-errors" }
near-primitives = { path = "../../core/primitives" }
near-stable-hasher = { path = "../../utils/near-stable-hasher" }
tracing = { version = "0.1", default-features = false }
threadpool = "1.8.1"

# Old versions of pwasm-utils we need to preserve backbwards compatability under
# old protocol versions.
pwasm-utils_12 = { package = "pwasm-utils", version = "0.12" }
parity-wasm_41 = { package = "parity-wasm", version = "0.41" }


[dev-dependencies]
near-test-contracts = { path = "../near-test-contracts" }
assert_matches = "1.3"
wat = "1.0.40"
base64 = "0.13"

[features]
# all vms enabled for now
default = ["wasmer0_vm", "wasmtime_vm", "wasmer2_vm"]
wasmer0_vm = [ "wasmer-runtime", "wasmer-runtime-core" ]
wasmtime_vm = [ "wasmtime", "anyhow"]
wasmer2_vm = [
    "wasmer-compiler",
    "wasmer-compiler-singlepass",
    "wasmer-engine",
    "wasmer-engine-universal",
    "wasmer-types",
    "wasmer-vm"
]

# Force usage of a specific wasm vm irrespective of protocol version.
force_wasmer0 = ["wasmer0_vm"]
force_wasmtime = ["wasmtime_vm"]
force_wasmer2 = ["wasmer2_vm"]

lightbeam = ["wasmtime/lightbeam"]
no_cpu_compatibility_checks = []

no_cache = []

protocol_feature_alt_bn128 = [
    "near-vm-logic/protocol_feature_alt_bn128",
    "near-primitives/protocol_feature_alt_bn128",
    "near-vm-errors/protocol_feature_alt_bn128"
]
nightly_protocol = ["near-primitives/nightly_protocol"]

[package.metadata.cargo-udeps.ignore]
# `no_cache` feature leads to an unused `cached` crate
normal = ["cached"]
