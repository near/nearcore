// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/s390x/inst.isle
// - src/isa/s390x/lower.isle
// - /Users/xiangyiz/workspace/near/nearcore_fork/reset_head/release/build/cranelift-codegen-d881340a8dff1be8/out/clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: u32, arg1: u32) -> Option<u32>;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> Option<u32>;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn simm32(&mut self, arg0: Imm64) -> Option<u32>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_as_u32(&mut self, arg0: u8) -> Option<u32>;
    fn u8_as_u64(&mut self, arg0: u8) -> Option<u64>;
    fn u16_as_u64(&mut self, arg0: u16) -> Option<u64>;
    fn u32_as_u64(&mut self, arg0: u32) -> Option<u64>;
    fn i64_as_u64(&mut self, arg0: i64) -> Option<u64>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_not(&mut self, arg0: u64) -> Option<u64>;
    fn u64_sextend_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u64_uextend_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> Option<bool>;
    fn ty_bits(&mut self, arg0: Type) -> Option<u8>;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Option<Imm64>;
    fn u64_from_ieee32(&mut self, arg0: Ieee32) -> u64;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_u32(&mut self, arg0: Offset32) -> u32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn same_value(&mut self, arg0: Value, arg1: Value) -> Option<Value>;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn intcc_reverse(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_inverse(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_reverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_inverse(&mut self, arg0: &FloatCC) -> FloatCC;
    fn avoid_div_traps(&mut self, arg0: Type) -> Option<()>;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: &Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: &Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: &Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: &Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: &Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: &Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: &Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: &Sig) -> i64;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn box_symbol_reloc(&mut self, arg0: &SymbolReloc) -> BoxSymbolReloc;
    fn mie2_enabled(&mut self, arg0: Type) -> Option<()>;
    fn mie2_disabled(&mut self, arg0: Type) -> Option<()>;
    fn vxrs_ext2_enabled(&mut self, arg0: Type) -> Option<()>;
    fn vxrs_ext2_disabled(&mut self, arg0: Type) -> Option<()>;
    fn allow_div_traps(&mut self, arg0: Type) -> Option<()>;
    fn lane_order(&mut self) -> Option<LaneOrder>;
    fn be_lane_idx(&mut self, arg0: Type, arg1: u8) -> u8;
    fn be_vec_const(&mut self, arg0: Type, arg1: u128) -> u128;
    fn writable_gpr(&mut self, arg0: u8) -> WritableReg;
    fn zero_reg(&mut self) -> Reg;
    fn gpr32_ty(&mut self, arg0: Type) -> Option<Type>;
    fn gpr64_ty(&mut self, arg0: Type) -> Option<Type>;
    fn vr128_ty(&mut self, arg0: Type) -> Option<Type>;
    fn uimm32shifted(&mut self, arg0: u32, arg1: u8) -> UImm32Shifted;
    fn uimm16shifted(&mut self, arg0: u16, arg1: u8) -> UImm16Shifted;
    fn i64_nonequal(&mut self, arg0: i64, arg1: i64) -> Option<i64>;
    fn u8_as_u16(&mut self, arg0: u8) -> u16;
    fn u64_as_u32(&mut self, arg0: u64) -> u32;
    fn u64_as_i16(&mut self, arg0: u64) -> i16;
    fn u64_pair_split(&mut self, arg0: u128) -> (u64, u64);
    fn u64_pair_concat(&mut self, arg0: u64, arg1: u64) -> u128;
    fn u32_pair_split(&mut self, arg0: u64) -> (u32, u32);
    fn u32_pair_concat(&mut self, arg0: u32, arg1: u32) -> u64;
    fn u16_pair_split(&mut self, arg0: u32) -> (u16, u16);
    fn u16_pair_concat(&mut self, arg0: u16, arg1: u16) -> u32;
    fn u8_pair_split(&mut self, arg0: u16) -> (u8, u8);
    fn u8_pair_concat(&mut self, arg0: u8, arg1: u8) -> u16;
    fn lane_byte_mask(&mut self, arg0: Type, arg1: u8) -> u16;
    fn shuffle_mask_from_u128(&mut self, arg0: u128) -> (u128, u16);
    fn u64_nonzero_hipart(&mut self, arg0: u64) -> Option<u64>;
    fn u64_nonzero_lopart(&mut self, arg0: u64) -> Option<u64>;
    fn i32_from_u64(&mut self, arg0: u64) -> Option<i32>;
    fn i16_from_u64(&mut self, arg0: u64) -> Option<i16>;
    fn i16_from_u32(&mut self, arg0: u32) -> Option<i16>;
    fn uimm32shifted_from_u64(&mut self, arg0: u64) -> Option<UImm32Shifted>;
    fn uimm16shifted_from_u64(&mut self, arg0: u64) -> Option<UImm16Shifted>;
    fn u64_from_value(&mut self, arg0: Value) -> Option<u64>;
    fn u32_from_value(&mut self, arg0: Value) -> Option<u32>;
    fn u8_from_value(&mut self, arg0: Value) -> Option<u8>;
    fn u64_from_signed_value(&mut self, arg0: Value) -> Option<u64>;
    fn u64_from_inverted_value(&mut self, arg0: Value) -> Option<u64>;
    fn i64_from_value(&mut self, arg0: Value) -> Option<i64>;
    fn i32_from_value(&mut self, arg0: Value) -> Option<i32>;
    fn i16_from_value(&mut self, arg0: Value) -> Option<i16>;
    fn i16_from_swapped_value(&mut self, arg0: Value) -> Option<i16>;
    fn i64_from_negated_value(&mut self, arg0: Value) -> Option<i64>;
    fn i32_from_negated_value(&mut self, arg0: Value) -> Option<i32>;
    fn i16_from_negated_value(&mut self, arg0: Value) -> Option<i16>;
    fn uimm16shifted_from_value(&mut self, arg0: Value) -> Option<UImm16Shifted>;
    fn uimm32shifted_from_value(&mut self, arg0: Value) -> Option<UImm32Shifted>;
    fn uimm16shifted_from_inverted_value(&mut self, arg0: Value) -> Option<UImm16Shifted>;
    fn uimm32shifted_from_inverted_value(&mut self, arg0: Value) -> Option<UImm32Shifted>;
    fn len_minus_one(&mut self, arg0: u64) -> Option<u8>;
    fn mask_amt_imm(&mut self, arg0: Type, arg1: i64) -> u8;
    fn mask_as_cond(&mut self, arg0: u8) -> Cond;
    fn intcc_as_cond(&mut self, arg0: &IntCC) -> Cond;
    fn floatcc_as_cond(&mut self, arg0: &FloatCC) -> Cond;
    fn invert_cond(&mut self, arg0: &Cond) -> Cond;
    fn signed(&mut self, arg0: &IntCC) -> Option<()>;
    fn unsigned(&mut self, arg0: &IntCC) -> Option<()>;
    fn vec_length_minus1(&mut self, arg0: &VecMachLabel) -> u32;
    fn vec_element(&mut self, arg0: &VecMachLabel, arg1: u8) -> MachLabel;
    fn zero_offset(&mut self) -> Offset32;
    fn i64_from_offset(&mut self, arg0: Offset32) -> i64;
    fn littleendian(&mut self, arg0: MemFlags) -> Option<()>;
    fn bigendian(&mut self, arg0: MemFlags) -> Option<()>;
    fn memflags_trusted(&mut self) -> MemFlags;
    fn memarg_flags(&mut self, arg0: &MemArg) -> MemFlags;
    fn memarg_reg_plus_reg(&mut self, arg0: Reg, arg1: Reg, arg2: u8, arg3: MemFlags) -> MemArg;
    fn memarg_reg_plus_off(&mut self, arg0: Reg, arg1: i64, arg2: u8, arg3: MemFlags) -> MemArg;
    fn memarg_symbol(&mut self, arg0: ExternalName, arg1: i32, arg2: MemFlags) -> MemArg;
    fn memarg_got(&mut self) -> MemArg;
    fn memarg_stack_off(&mut self, arg0: i64, arg1: i64) -> MemArg;
    fn memarg_initial_sp_offset(&mut self, arg0: i64) -> MemArg;
    fn memarg_symbol_offset_sum(&mut self, arg0: i64, arg1: i64) -> Option<i32>;
    fn memarg_pair_from_memarg(&mut self, arg0: &MemArg) -> Option<MemArgPair>;
    fn memarg_pair_from_reg(&mut self, arg0: Reg, arg1: MemFlags) -> MemArgPair;
    fn sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn writable_regpair(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableRegPair;
    fn writable_regpair_hi(&mut self, arg0: WritableRegPair) -> WritableReg;
    fn writable_regpair_lo(&mut self, arg0: WritableRegPair) -> WritableReg;
    fn regpair(&mut self, arg0: Reg, arg1: Reg) -> RegPair;
    fn regpair_hi(&mut self, arg0: RegPair) -> Reg;
    fn regpair_lo(&mut self, arg0: RegPair) -> Reg;
    fn inst_builder_new(&mut self) -> VecMInstBuilder;
    fn inst_builder_push(&mut self, arg0: &VecMInstBuilder, arg1: &MInst) -> Unit;
    fn inst_builder_finish(&mut self, arg0: &VecMInstBuilder) -> VecMInst;
    fn real_reg(&mut self, arg0: WritableReg) -> Option<WritableReg>;
    fn same_reg(&mut self, arg0: WritableReg, arg1: Reg) -> Option<Reg>;
    fn preg_stack(&mut self) -> PReg;
    fn preg_gpr_0(&mut self) -> PReg;
    fn args_builder_new(&mut self) -> CallArgListBuilder;
    fn args_builder_push(&mut self, arg0: &CallArgListBuilder, arg1: Reg, arg2: RealReg) -> Unit;
    fn args_builder_finish(&mut self, arg0: &CallArgListBuilder) -> CallArgList;
    fn defs_init(&mut self, arg0: &Sig) -> CallRetList;
    fn defs_lookup(&mut self, arg0: &CallRetList, arg1: RealReg) -> Reg;
    fn abi_sig(&mut self, arg0: SigRef) -> Sig;
    fn abi_first_ret(&mut self, arg0: SigRef, arg1: &Sig) -> usize;
    fn abi_call_info(
        &mut self,
        arg0: &Sig,
        arg1: ExternalName,
        arg2: &CallArgList,
        arg3: &CallRetList,
        arg4: &Opcode,
    ) -> BoxCallInfo;
    fn abi_call_ind_info(
        &mut self,
        arg0: &Sig,
        arg1: Reg,
        arg2: &CallArgList,
        arg3: &CallRetList,
        arg4: &Opcode,
    ) -> BoxCallIndInfo;
    fn abi_accumulate_outgoing_args_size(&mut self, arg0: &Sig) -> Unit;
    fn abi_lane_order(&mut self, arg0: &Sig) -> LaneOrder;
    fn lib_call_info_memcpy(&mut self, arg0: Reg, arg1: Reg, arg2: Reg) -> LibCallInfo;
    fn lib_call_info_tls_get_offset(
        &mut self,
        arg0: WritableReg,
        arg1: Reg,
        arg2: Reg,
        arg3: &SymbolReloc,
    ) -> LibCallInfo;
    fn lib_call_info(&mut self, arg0: &LibCallInfo) -> BoxCallInfo;
    fn lib_accumulate_outgoing_args_size(&mut self, arg0: &LibCallInfo) -> Unit;
    fn fcvt_to_uint_ub32(&mut self, arg0: u8) -> u64;
    fn fcvt_to_uint_lb32(&mut self) -> u64;
    fn fcvt_to_uint_ub64(&mut self, arg0: u8) -> u64;
    fn fcvt_to_uint_lb64(&mut self) -> u64;
    fn fcvt_to_sint_ub32(&mut self, arg0: u8) -> u64;
    fn fcvt_to_sint_lb32(&mut self, arg0: u8) -> u64;
    fn fcvt_to_sint_ub64(&mut self, arg0: u8) -> u64;
    fn fcvt_to_sint_lb64(&mut self, arg0: u8) -> u64;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
}

pub struct ContextIterWrapper<Item, I: Iterator<Item = Item>, C: Context> {
    iter: I,
    _ctx: PhantomData<C>,
}
impl<Item, I: Iterator<Item = Item>, C: Context> From<I> for ContextIterWrapper<Item, I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: PhantomData,
        }
    }
}
impl<Item, I: Iterator<Item = Item>, C: Context> ContextIter for ContextIterWrapper<Item, I, C> {
    type Context = C;
    type Output = Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 290.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 346.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 368.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/s390x/inst.isle line 2.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop2,
    AluRRR {
        alu_op: ALUOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    AluRRSImm16 {
        alu_op: ALUOp,
        rd: WritableReg,
        rn: Reg,
        imm: i16,
    },
    AluRR {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        rm: Reg,
    },
    AluRX {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        mem: MemArg,
    },
    AluRSImm16 {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: i16,
    },
    AluRSImm32 {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: i32,
    },
    AluRUImm32 {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: u32,
    },
    AluRUImm16Shifted {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: UImm16Shifted,
    },
    AluRUImm32Shifted {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: UImm32Shifted,
    },
    SMulWide {
        rd: WritableRegPair,
        rn: Reg,
        rm: Reg,
    },
    UMulWide {
        rd: WritableRegPair,
        ri: Reg,
        rn: Reg,
    },
    SDivMod32 {
        rd: WritableRegPair,
        ri: Reg,
        rn: Reg,
    },
    SDivMod64 {
        rd: WritableRegPair,
        ri: Reg,
        rn: Reg,
    },
    UDivMod32 {
        rd: WritableRegPair,
        ri: RegPair,
        rn: Reg,
    },
    UDivMod64 {
        rd: WritableRegPair,
        ri: RegPair,
        rn: Reg,
    },
    Flogr {
        rd: WritableRegPair,
        rn: Reg,
    },
    ShiftRR {
        shift_op: ShiftOp,
        rd: WritableReg,
        rn: Reg,
        shift_imm: u8,
        shift_reg: Reg,
    },
    RxSBG {
        op: RxSBGOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        start_bit: u8,
        end_bit: u8,
        rotate_amt: i8,
    },
    RxSBGTest {
        op: RxSBGOp,
        rd: Reg,
        rn: Reg,
        start_bit: u8,
        end_bit: u8,
        rotate_amt: i8,
    },
    UnaryRR {
        op: UnaryOp,
        rd: WritableReg,
        rn: Reg,
    },
    CmpRR {
        op: CmpOp,
        rn: Reg,
        rm: Reg,
    },
    CmpRX {
        op: CmpOp,
        rn: Reg,
        mem: MemArg,
    },
    CmpRSImm16 {
        op: CmpOp,
        rn: Reg,
        imm: i16,
    },
    CmpRSImm32 {
        op: CmpOp,
        rn: Reg,
        imm: i32,
    },
    CmpRUImm32 {
        op: CmpOp,
        rn: Reg,
        imm: u32,
    },
    CmpTrapRR {
        op: CmpOp,
        rn: Reg,
        rm: Reg,
        cond: Cond,
        trap_code: TrapCode,
    },
    CmpTrapRSImm16 {
        op: CmpOp,
        rn: Reg,
        imm: i16,
        cond: Cond,
        trap_code: TrapCode,
    },
    CmpTrapRUImm16 {
        op: CmpOp,
        rn: Reg,
        imm: u16,
        cond: Cond,
        trap_code: TrapCode,
    },
    AtomicRmw {
        alu_op: ALUOp,
        rd: WritableReg,
        rn: Reg,
        mem: MemArg,
    },
    AtomicCas32 {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        mem: MemArg,
    },
    AtomicCas64 {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        mem: MemArg,
    },
    Fence,
    Load32 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32ZExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32SExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32ZExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32SExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64ZExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64SExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64ZExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64SExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64ZExt32 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64SExt32 {
        rd: WritableReg,
        mem: MemArg,
    },
    LoadRev16 {
        rd: WritableReg,
        mem: MemArg,
    },
    LoadRev32 {
        rd: WritableReg,
        mem: MemArg,
    },
    LoadRev64 {
        rd: WritableReg,
        mem: MemArg,
    },
    Store8 {
        rd: Reg,
        mem: MemArg,
    },
    Store16 {
        rd: Reg,
        mem: MemArg,
    },
    Store32 {
        rd: Reg,
        mem: MemArg,
    },
    Store64 {
        rd: Reg,
        mem: MemArg,
    },
    StoreImm8 {
        imm: u8,
        mem: MemArg,
    },
    StoreImm16 {
        imm: i16,
        mem: MemArg,
    },
    StoreImm32SExt16 {
        imm: i16,
        mem: MemArg,
    },
    StoreImm64SExt16 {
        imm: i16,
        mem: MemArg,
    },
    StoreRev16 {
        rd: Reg,
        mem: MemArg,
    },
    StoreRev32 {
        rd: Reg,
        mem: MemArg,
    },
    StoreRev64 {
        rd: Reg,
        mem: MemArg,
    },
    Mvc {
        dst: MemArgPair,
        src: MemArgPair,
        len_minus_one: u8,
    },
    LoadMultiple64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: MemArg,
    },
    StoreMultiple64 {
        rt: Reg,
        rt2: Reg,
        mem: MemArg,
    },
    Mov32 {
        rd: WritableReg,
        rm: Reg,
    },
    Mov64 {
        rd: WritableReg,
        rm: Reg,
    },
    MovPReg {
        rd: WritableReg,
        rm: PReg,
    },
    Mov32Imm {
        rd: WritableReg,
        imm: u32,
    },
    Mov32SImm16 {
        rd: WritableReg,
        imm: i16,
    },
    Mov64SImm16 {
        rd: WritableReg,
        imm: i16,
    },
    Mov64SImm32 {
        rd: WritableReg,
        imm: i32,
    },
    Mov64UImm16Shifted {
        rd: WritableReg,
        imm: UImm16Shifted,
    },
    Mov64UImm32Shifted {
        rd: WritableReg,
        imm: UImm32Shifted,
    },
    Insert64UImm16Shifted {
        rd: WritableReg,
        ri: Reg,
        imm: UImm16Shifted,
    },
    Insert64UImm32Shifted {
        rd: WritableReg,
        ri: Reg,
        imm: UImm32Shifted,
    },
    LoadAR {
        rd: WritableReg,
        ar: u8,
    },
    InsertAR {
        rd: WritableReg,
        ri: Reg,
        ar: u8,
    },
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    CMov32 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    CMov64 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    CMov32SImm16 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        imm: i16,
    },
    CMov64SImm16 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        imm: i16,
    },
    FpuMove32 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMove64 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuCMov32 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    FpuCMov64 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    FpuRR {
        fpu_op: FPUOp1,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRR {
        fpu_op: FPUOp2,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    FpuRRRR {
        fpu_op: FPUOp3,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    FpuRound {
        op: FpuRoundOp,
        mode: FpuRoundMode,
        rd: WritableReg,
        rn: Reg,
    },
    FpuCmp32 {
        rn: Reg,
        rm: Reg,
    },
    FpuCmp64 {
        rn: Reg,
        rm: Reg,
    },
    LoadFpuConst32 {
        rd: WritableReg,
        const_data: u32,
    },
    LoadFpuConst64 {
        rd: WritableReg,
        const_data: u64,
    },
    VecRRR {
        op: VecBinaryOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecRR {
        op: VecUnaryOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecShiftRR {
        shift_op: VecShiftOp,
        rd: WritableReg,
        rn: Reg,
        shift_imm: u8,
        shift_reg: Reg,
    },
    VecSelect {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    VecPermute {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    VecPermuteDWImm {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        idx1: u8,
        idx2: u8,
    },
    VecIntCmp {
        op: VecIntCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecIntCmpS {
        op: VecIntCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecFloatCmp {
        op: VecFloatCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecFloatCmpS {
        op: VecFloatCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecInt128SCmpHi {
        tmp: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecInt128UCmpHi {
        tmp: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecLoad {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadRev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadByte16Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadByte32Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadByte64Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadElt16Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadElt32Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadElt64Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecStore {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreRev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreByte16Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreByte32Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreByte64Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreElt16Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreElt32Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreElt64Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecLoadReplicate {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadReplicateRev {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
    },
    VecMov {
        rd: WritableReg,
        rn: Reg,
    },
    VecCMov {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    MovToVec128 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecLoadConst {
        rd: WritableReg,
        const_data: u128,
    },
    VecLoadConstReplicate {
        size: u32,
        rd: WritableReg,
        const_data: u64,
    },
    VecImmByteMask {
        rd: WritableReg,
        mask: u16,
    },
    VecImmBitMask {
        size: u32,
        rd: WritableReg,
        start_bit: u8,
        end_bit: u8,
    },
    VecImmReplicate {
        size: u32,
        rd: WritableReg,
        imm: i16,
    },
    VecLoadLane {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecLoadLaneUndef {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecLoadLaneRev {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecLoadLaneRevUndef {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecStoreLane {
        size: u32,
        rd: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecStoreLaneRev {
        size: u32,
        rd: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecInsertLane {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        lane_imm: u8,
        lane_reg: Reg,
    },
    VecInsertLaneUndef {
        size: u32,
        rd: WritableReg,
        rn: Reg,
        lane_imm: u8,
        lane_reg: Reg,
    },
    VecExtractLane {
        size: u32,
        rd: WritableReg,
        rn: Reg,
        lane_imm: u8,
        lane_reg: Reg,
    },
    VecInsertLaneImm {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        imm: i16,
        lane_imm: u8,
    },
    VecReplicateLane {
        size: u32,
        rd: WritableReg,
        rn: Reg,
        lane_imm: u8,
    },
    Call {
        link: WritableReg,
        info: BoxCallInfo,
    },
    CallInd {
        link: WritableReg,
        info: BoxCallIndInfo,
    },
    Args {
        args: VecArgPair,
    },
    Ret {
        link: Reg,
        rets: VecRetPair,
    },
    Jump {
        dest: MachLabel,
    },
    CondBr {
        taken: MachLabel,
        not_taken: MachLabel,
        cond: Cond,
    },
    TrapIf {
        cond: Cond,
        trap_code: TrapCode,
    },
    OneWayCondBr {
        target: MachLabel,
        cond: Cond,
    },
    IndirectBr {
        rn: Reg,
        targets: VecMachLabel,
    },
    Debugtrap,
    Trap {
        trap_code: TrapCode,
    },
    JTSequence {
        ridx: Reg,
        targets: VecMachLabel,
    },
    LoadSymbolReloc {
        rd: WritableReg,
        symbol_reloc: BoxSymbolReloc,
    },
    LoadAddr {
        rd: WritableReg,
        mem: MemArg,
    },
    Loop {
        body: VecMInst,
        cond: Cond,
    },
    CondBreak {
        cond: Cond,
    },
    VirtualSPOffsetAdj {
        offset: i64,
    },
    DummyUse {
        reg: Reg,
    },
    Unwind {
        inst: UnwindInst,
    },
}

/// Internal type SymbolReloc: defined at src/isa/s390x/inst.isle line 1017.
#[derive(Clone, Debug)]
pub enum SymbolReloc {
    Absolute { name: ExternalName, offset: i64 },
    TlsGd { name: ExternalName },
}

/// Internal type ALUOp: defined at src/isa/s390x/inst.isle line 1034.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp {
    Add32,
    Add32Ext16,
    Add64,
    Add64Ext16,
    Add64Ext32,
    AddLogical32,
    AddLogical64,
    AddLogical64Ext32,
    Sub32,
    Sub32Ext16,
    Sub64,
    Sub64Ext16,
    Sub64Ext32,
    SubLogical32,
    SubLogical64,
    SubLogical64Ext32,
    Mul32,
    Mul32Ext16,
    Mul64,
    Mul64Ext16,
    Mul64Ext32,
    And32,
    And64,
    Orr32,
    Orr64,
    Xor32,
    Xor64,
    NotAnd32,
    NotAnd64,
    NotOrr32,
    NotOrr64,
    NotXor32,
    NotXor64,
    AndNot32,
    AndNot64,
    OrrNot32,
    OrrNot64,
}

/// Internal type UnaryOp: defined at src/isa/s390x/inst.isle line 1081.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum UnaryOp {
    Abs32,
    Abs64,
    Abs64Ext32,
    Neg32,
    Neg64,
    Neg64Ext32,
    PopcntByte,
    PopcntReg,
    BSwap32,
    BSwap64,
}

/// Internal type ShiftOp: defined at src/isa/s390x/inst.isle line 1096.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ShiftOp {
    RotL32,
    RotL64,
    LShL32,
    LShL64,
    LShR32,
    LShR64,
    AShR32,
    AShR64,
}

/// Internal type RxSBGOp: defined at src/isa/s390x/inst.isle line 1109.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum RxSBGOp {
    Insert,
    And,
    Or,
    Xor,
}

/// Internal type CmpOp: defined at src/isa/s390x/inst.isle line 1118.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CmpOp {
    CmpS32,
    CmpS32Ext16,
    CmpS64,
    CmpS64Ext16,
    CmpS64Ext32,
    CmpL32,
    CmpL32Ext16,
    CmpL64,
    CmpL64Ext16,
    CmpL64Ext32,
}

/// Internal type VecBinaryOp: defined at src/isa/s390x/inst.isle line 1133.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecBinaryOp {
    Add8x16,
    Add16x8,
    Add32x4,
    Add64x2,
    Add128,
    Sub8x16,
    Sub16x8,
    Sub32x4,
    Sub64x2,
    Sub128,
    Mul8x16,
    Mul16x8,
    Mul32x4,
    UMulHi8x16,
    UMulHi16x8,
    UMulHi32x4,
    SMulHi8x16,
    SMulHi16x8,
    SMulHi32x4,
    UMulEven8x16,
    UMulEven16x8,
    UMulEven32x4,
    SMulEven8x16,
    SMulEven16x8,
    SMulEven32x4,
    UMulOdd8x16,
    UMulOdd16x8,
    UMulOdd32x4,
    SMulOdd8x16,
    SMulOdd16x8,
    SMulOdd32x4,
    UMax8x16,
    UMax16x8,
    UMax32x4,
    UMax64x2,
    SMax8x16,
    SMax16x8,
    SMax32x4,
    SMax64x2,
    UMin8x16,
    UMin16x8,
    UMin32x4,
    UMin64x2,
    SMin8x16,
    SMin16x8,
    SMin32x4,
    SMin64x2,
    UAvg8x16,
    UAvg16x8,
    UAvg32x4,
    UAvg64x2,
    SAvg8x16,
    SAvg16x8,
    SAvg32x4,
    SAvg64x2,
    And128,
    Orr128,
    Xor128,
    NotAnd128,
    NotOrr128,
    NotXor128,
    AndNot128,
    OrrNot128,
    BitPermute128,
    LShLByByte128,
    LShRByByte128,
    AShRByByte128,
    LShLByBit128,
    LShRByBit128,
    AShRByBit128,
    Pack16x8,
    Pack32x4,
    Pack64x2,
    PackUSat16x8,
    PackUSat32x4,
    PackUSat64x2,
    PackSSat16x8,
    PackSSat32x4,
    PackSSat64x2,
    MergeLow8x16,
    MergeLow16x8,
    MergeLow32x4,
    MergeLow64x2,
    MergeHigh8x16,
    MergeHigh16x8,
    MergeHigh32x4,
    MergeHigh64x2,
}

/// Internal type VecUnaryOp: defined at src/isa/s390x/inst.isle line 1235.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecUnaryOp {
    Abs8x16,
    Abs16x8,
    Abs32x4,
    Abs64x2,
    Neg8x16,
    Neg16x8,
    Neg32x4,
    Neg64x2,
    Popcnt8x16,
    Popcnt16x8,
    Popcnt32x4,
    Popcnt64x2,
    Clz8x16,
    Clz16x8,
    Clz32x4,
    Clz64x2,
    Ctz8x16,
    Ctz16x8,
    Ctz32x4,
    Ctz64x2,
    UnpackULow8x16,
    UnpackULow16x8,
    UnpackULow32x4,
    UnpackUHigh8x16,
    UnpackUHigh16x8,
    UnpackUHigh32x4,
    UnpackSLow8x16,
    UnpackSLow16x8,
    UnpackSLow32x4,
    UnpackSHigh8x16,
    UnpackSHigh16x8,
    UnpackSHigh32x4,
}

/// Internal type VecShiftOp: defined at src/isa/s390x/inst.isle line 1276.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftOp {
    RotL8x16,
    RotL16x8,
    RotL32x4,
    RotL64x2,
    LShL8x16,
    LShL16x8,
    LShL32x4,
    LShL64x2,
    LShR8x16,
    LShR16x8,
    LShR32x4,
    LShR64x2,
    AShR8x16,
    AShR16x8,
    AShR32x4,
    AShR64x2,
}

/// Internal type VecIntCmpOp: defined at src/isa/s390x/inst.isle line 1297.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecIntCmpOp {
    CmpEq8x16,
    CmpEq16x8,
    CmpEq32x4,
    CmpEq64x2,
    SCmpHi8x16,
    SCmpHi16x8,
    SCmpHi32x4,
    SCmpHi64x2,
    UCmpHi8x16,
    UCmpHi16x8,
    UCmpHi32x4,
    UCmpHi64x2,
}

/// Internal type VecFloatCmpOp: defined at src/isa/s390x/inst.isle line 1314.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecFloatCmpOp {
    CmpEq32x4,
    CmpEq64x2,
    CmpHi32x4,
    CmpHi64x2,
    CmpHiEq32x4,
    CmpHiEq64x2,
}

/// Internal type FPUOp1: defined at src/isa/s390x/inst.isle line 1325.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp1 {
    Abs32,
    Abs64,
    Abs32x4,
    Abs64x2,
    Neg32,
    Neg64,
    Neg32x4,
    Neg64x2,
    NegAbs32,
    NegAbs64,
    NegAbs32x4,
    NegAbs64x2,
    Sqrt32,
    Sqrt64,
    Sqrt32x4,
    Sqrt64x2,
    Cvt32To64,
    Cvt32x4To64x2,
}

/// Internal type FPUOp2: defined at src/isa/s390x/inst.isle line 1348.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp2 {
    Add32,
    Add64,
    Add32x4,
    Add64x2,
    Sub32,
    Sub64,
    Sub32x4,
    Sub64x2,
    Mul32,
    Mul64,
    Mul32x4,
    Mul64x2,
    Div32,
    Div64,
    Div32x4,
    Div64x2,
    Max32,
    Max64,
    Max32x4,
    Max64x2,
    Min32,
    Min64,
    Min32x4,
    Min64x2,
    MaxPseudo32,
    MaxPseudo64,
    MaxPseudo32x4,
    MaxPseudo64x2,
    MinPseudo32,
    MinPseudo64,
    MinPseudo32x4,
    MinPseudo64x2,
}

/// Internal type FPUOp3: defined at src/isa/s390x/inst.isle line 1385.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp3 {
    MAdd32,
    MAdd64,
    MAdd32x4,
    MAdd64x2,
    MSub32,
    MSub64,
    MSub32x4,
    MSub64x2,
}

/// Internal type FpuRoundOp: defined at src/isa/s390x/inst.isle line 1398.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuRoundOp {
    Cvt64To32,
    Cvt64x2To32x4,
    Round32,
    Round64,
    Round32x4,
    Round64x2,
    ToSInt32,
    ToSInt64,
    ToUInt32,
    ToUInt64,
    ToSInt32x4,
    ToSInt64x2,
    ToUInt32x4,
    ToUInt64x2,
    FromSInt32,
    FromSInt64,
    FromUInt32,
    FromUInt64,
    FromSInt32x4,
    FromSInt64x2,
    FromUInt32x4,
    FromUInt64x2,
}

/// Internal type FpuRoundMode: defined at src/isa/s390x/inst.isle line 1425.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuRoundMode {
    Current,
    ToNearest,
    ShorterPrecision,
    ToNearestTiesToEven,
    ToZero,
    ToPosInfinity,
    ToNegInfinity,
}

/// Internal type LaneOrder: defined at src/isa/s390x/inst.isle line 1470.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum LaneOrder {
    LittleEndian,
    BigEndian,
}

/// Internal type ProducesBool: defined at src/isa/s390x/inst.isle line 3350.
#[derive(Clone, Debug)]
pub enum ProducesBool {
    ProducesBool { producer: ProducesFlags, cond: Cond },
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    // Rule at src/prelude_lower.isle line 60.
    let expr0_0 = C::value_reg(ctx, pattern0_0);
    let expr1_0 = C::output(ctx, expr0_0);
    return Some(expr1_0);
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    // Rule at src/prelude_lower.isle line 64.
    let expr0_0 = C::put_in_regs(ctx, pattern0_0);
    let expr1_0 = C::output(ctx, expr0_0);
    return Some(expr1_0);
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/prelude_lower.isle line 84.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr1_0);
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Option<Range> {
    let pattern0_0 = arg0;
    // Rule at src/prelude_lower.isle line 133.
    let expr0_0: usize = 0i128 as usize;
    let expr1_0 = C::value_regs_len(ctx, pattern0_0);
    let expr2_0 = C::range(ctx, expr0_0, expr1_0);
    return Some(expr2_0);
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/prelude_lower.isle line 144.
    let expr0_0 = C::put_in_regs(ctx, pattern0_0);
    let expr1_0: usize = 0i128 as usize;
    let expr2_0 = C::value_regs_get(ctx, expr0_0, expr1_0);
    return Some(expr2_0);
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    match pattern0_0 {
        &SideEffectNoResult::Inst {
            inst: ref pattern1_0,
        } => {
            // Rule at src/prelude_lower.isle line 301.
            let expr0_0 = C::emit(ctx, pattern1_0);
            let expr1_0 = C::output_none(ctx);
            return Some(expr1_0);
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref pattern1_0,
            inst2: ref pattern1_1,
        } => {
            // Rule at src/prelude_lower.isle line 304.
            let expr0_0 = C::emit(ctx, pattern1_0);
            let expr1_0 = C::emit(ctx, pattern1_1);
            let expr2_0 = C::output_none(ctx);
            return Some(expr2_0);
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref pattern1_0,
            inst2: ref pattern1_1,
            inst3: ref pattern1_2,
        } => {
            // Rule at src/prelude_lower.isle line 308.
            let expr0_0 = C::emit(ctx, pattern1_0);
            let expr1_0 = C::emit(ctx, pattern1_1);
            let expr2_0 = C::emit(ctx, pattern1_2);
            let expr3_0 = C::output_none(ctx);
            return Some(expr3_0);
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    match pattern0_0 {
        &SideEffectNoResult::Inst {
            inst: ref pattern1_0,
        } => {
            let pattern2_0 = arg1;
            match pattern2_0 {
                &SideEffectNoResult::Inst {
                    inst: ref pattern3_0,
                } => {
                    // Rule at src/prelude_lower.isle line 315.
                    let expr0_0 = SideEffectNoResult::Inst2 {
                        inst1: pattern1_0.clone(),
                        inst2: pattern3_0.clone(),
                    };
                    return Some(expr0_0);
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref pattern3_0,
                    inst2: ref pattern3_1,
                } => {
                    // Rule at src/prelude_lower.isle line 317.
                    let expr0_0 = SideEffectNoResult::Inst3 {
                        inst1: pattern1_0.clone(),
                        inst2: pattern3_0.clone(),
                        inst3: pattern3_1.clone(),
                    };
                    return Some(expr0_0);
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref pattern1_0,
            inst2: ref pattern1_1,
        } => {
            let pattern2_0 = arg1;
            if let &SideEffectNoResult::Inst {
                inst: ref pattern3_0,
            } = pattern2_0
            {
                // Rule at src/prelude_lower.isle line 319.
                let expr0_0 = SideEffectNoResult::Inst3 {
                    inst1: pattern1_0.clone(),
                    inst2: pattern1_1.clone(),
                    inst3: pattern3_0.clone(),
                };
                return Some(expr0_0);
            }
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term produces_flags_append.
pub fn constructor_produces_flags_append<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &MInst,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    if let &ProducesFlags::ProducesFlagsSideEffect {
        inst: ref pattern1_0,
    } = pattern0_0
    {
        let pattern2_0 = arg1;
        // Rule at src/prelude_lower.isle line 361.
        let expr0_0 = ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: pattern1_0.clone(),
            inst2: pattern2_0.clone(),
        };
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let &ProducesFlags::ProducesFlagsReturnsReg {
        inst: ref pattern1_0,
        result: pattern1_1,
    } = pattern0_0
    {
        // Rule at src/prelude_lower.isle line 386.
        return Some(pattern1_1);
    }
    return None;
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    match pattern0_0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref pattern1_0,
            result: pattern1_1,
        } => {
            // Rule at src/prelude_lower.isle line 391.
            let expr0_0 = ProducesFlags::ProducesFlagsSideEffect {
                inst: pattern1_0.clone(),
            };
            return Some(expr0_0);
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref pattern1_0,
            result: pattern1_1,
        } => {
            // Rule at src/prelude_lower.isle line 393.
            let expr0_0 = ProducesFlags::ProducesFlagsSideEffect {
                inst: pattern1_0.clone(),
            };
            return Some(expr0_0);
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> Option<ConsumesFlags> {
    let pattern0_0 = arg0;
    match pattern0_0 {
        &ConsumesFlags::ConsumesFlagsSideEffect {
            inst: ref pattern1_0,
        } => {
            let pattern2_0 = arg1;
            if let &ConsumesFlags::ConsumesFlagsSideEffect {
                inst: ref pattern3_0,
            } = pattern2_0
            {
                // Rule at src/prelude_lower.isle line 406.
                let expr0_0 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: pattern1_0.clone(),
                    inst2: pattern3_0.clone(),
                };
                return Some(expr0_0);
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref pattern1_0,
            result: pattern1_1,
        } => {
            let pattern2_0 = arg1;
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref pattern3_0,
                result: pattern3_1,
            } = pattern2_0
            {
                // Rule at src/prelude_lower.isle line 400.
                let expr0_0 = C::value_regs(ctx, pattern1_1, pattern3_1);
                let expr1_0 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: pattern1_0.clone(),
                    inst2: pattern3_0.clone(),
                    result: expr0_0,
                };
                return Some(expr1_0);
            }
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Option<ValueRegs> {
    let pattern0_0 = arg0;
    match pattern0_0 {
        &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref pattern1_0,
        } => {
            let pattern2_0 = arg1;
            match pattern2_0 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref pattern3_0,
                    result: pattern3_1,
                } => {
                    // Rule at src/prelude_lower.isle line 437.
                    let expr0_0 = C::emit(ctx, pattern1_0);
                    let expr1_0 = C::emit(ctx, pattern3_0);
                    let expr2_0 = C::value_reg(ctx, pattern3_1);
                    return Some(expr2_0);
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref pattern3_0,
                    inst2: ref pattern3_1,
                    result: pattern3_2,
                } => {
                    // Rule at src/prelude_lower.isle line 443.
                    let expr0_0 = C::emit(ctx, pattern1_0);
                    let expr1_0 = C::emit(ctx, pattern3_0);
                    let expr2_0 = C::emit(ctx, pattern3_1);
                    return Some(pattern3_2);
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref pattern3_0,
                    inst2: ref pattern3_1,
                    inst3: ref pattern3_2,
                    inst4: ref pattern3_3,
                    result: pattern3_4,
                } => {
                    // Rule at src/prelude_lower.isle line 455.
                    let expr0_0 = C::emit(ctx, pattern1_0);
                    let expr1_0 = C::emit(ctx, pattern3_0);
                    let expr2_0 = C::emit(ctx, pattern3_1);
                    let expr3_0 = C::emit(ctx, pattern3_2);
                    let expr4_0 = C::emit(ctx, pattern3_3);
                    return Some(pattern3_4);
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref pattern1_0,
            result: pattern1_1,
        } => {
            let pattern2_0 = arg1;
            match pattern2_0 {
                &ConsumesFlags::ConsumesFlagsSideEffect {
                    inst: ref pattern3_0,
                } => {
                    // Rule at src/prelude_lower.isle line 431.
                    let expr0_0 = C::emit(ctx, pattern1_0);
                    let expr1_0 = C::emit(ctx, pattern3_0);
                    let expr2_0 = C::value_reg(ctx, pattern1_1);
                    return Some(expr2_0);
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref pattern3_0,
                    result: pattern3_1,
                } => {
                    // Rule at src/prelude_lower.isle line 423.
                    let expr0_0 = C::emit(ctx, pattern1_0);
                    let expr1_0 = C::emit(ctx, pattern3_0);
                    let expr2_0 = C::value_regs(ctx, pattern1_1, pattern3_1);
                    return Some(expr2_0);
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref pattern1_0,
            inst2: ref pattern1_1,
        } => {
            let pattern2_0 = arg1;
            match pattern2_0 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref pattern3_0,
                    result: pattern3_1,
                } => {
                    // Rule at src/prelude_lower.isle line 471.
                    let expr0_0 = C::emit(ctx, pattern1_0);
                    let expr1_0 = C::emit(ctx, pattern1_1);
                    let expr2_0 = C::emit(ctx, pattern3_0);
                    let expr3_0 = C::value_reg(ctx, pattern3_1);
                    return Some(expr3_0);
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref pattern3_0,
                    inst2: ref pattern3_1,
                    result: pattern3_2,
                } => {
                    // Rule at src/prelude_lower.isle line 478.
                    let expr0_0 = C::emit(ctx, pattern1_0);
                    let expr1_0 = C::emit(ctx, pattern1_1);
                    let expr2_0 = C::emit(ctx, pattern3_0);
                    let expr3_0 = C::emit(ctx, pattern3_1);
                    return Some(pattern3_2);
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref pattern3_0,
                    inst2: ref pattern3_1,
                    inst3: ref pattern3_2,
                    inst4: ref pattern3_3,
                    result: pattern3_4,
                } => {
                    // Rule at src/prelude_lower.isle line 491.
                    let expr0_0 = C::emit(ctx, pattern1_0);
                    let expr1_0 = C::emit(ctx, pattern1_1);
                    let expr2_0 = C::emit(ctx, pattern3_0);
                    let expr3_0 = C::emit(ctx, pattern3_1);
                    let expr4_0 = C::emit(ctx, pattern3_2);
                    let expr5_0 = C::emit(ctx, pattern3_3);
                    return Some(pattern3_4);
                }
                _ => {}
            }
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/prelude_lower.isle line 509.
    let expr0_0 = constructor_with_flags(ctx, pattern0_0, pattern1_0)?;
    let expr1_0: usize = 0i128 as usize;
    let expr2_0 = C::value_regs_get(ctx, expr0_0, expr1_0);
    return Some(expr2_0);
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    // Rule at src/prelude_lower.isle line 516.
    let expr0_0 = C::mark_value_used(ctx, pattern0_0);
    let expr1_0 = ProducesFlags::AlreadyExistingFlags;
    return Some(expr1_0);
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    match pattern0_0 {
        &ProducesFlags::AlreadyExistingFlags => {
            let pattern2_0 = arg1;
            match pattern2_0 {
                &ConsumesFlags::ConsumesFlagsSideEffect {
                    inst: ref pattern3_0,
                } => {
                    // Rule at src/prelude_lower.isle line 527.
                    let expr0_0 = SideEffectNoResult::Inst {
                        inst: pattern3_0.clone(),
                    };
                    return Some(expr0_0);
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref pattern3_0,
                    inst2: ref pattern3_1,
                } => {
                    // Rule at src/prelude_lower.isle line 532.
                    let expr0_0 = SideEffectNoResult::Inst2 {
                        inst1: pattern3_0.clone(),
                        inst2: pattern3_1.clone(),
                    };
                    return Some(expr0_0);
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref pattern1_0,
        } => {
            let pattern2_0 = arg1;
            match pattern2_0 {
                &ConsumesFlags::ConsumesFlagsSideEffect {
                    inst: ref pattern3_0,
                } => {
                    // Rule at src/prelude_lower.isle line 537.
                    let expr0_0 = SideEffectNoResult::Inst2 {
                        inst1: pattern1_0.clone(),
                        inst2: pattern3_0.clone(),
                    };
                    return Some(expr0_0);
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref pattern3_0,
                    inst2: ref pattern3_1,
                } => {
                    // Rule at src/prelude_lower.isle line 542.
                    let expr0_0 = SideEffectNoResult::Inst3 {
                        inst1: pattern1_0.clone(),
                        inst2: pattern3_0.clone(),
                        inst3: pattern3_1.clone(),
                    };
                    return Some(expr0_0);
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref pattern1_0,
            inst2: ref pattern1_1,
        } => {
            let pattern2_0 = arg1;
            if let &ConsumesFlags::ConsumesFlagsSideEffect {
                inst: ref pattern3_0,
            } = pattern2_0
            {
                // Rule at src/prelude_lower.isle line 547.
                let expr0_0 = SideEffectNoResult::Inst3 {
                    inst1: pattern1_0.clone(),
                    inst2: pattern1_1.clone(),
                    inst3: pattern3_0.clone(),
                };
                return Some(expr0_0);
            }
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(
    ctx: &mut C,
    arg0: Range,
    arg1: ValueSlice,
) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/prelude_lower.isle line 727.
    let expr0_0 = C::gen_return(ctx, pattern1_0);
    let expr1_0 = C::output_none(ctx);
    return Some(expr1_0);
}

// Generated as internal constructor for term lane_order_equal.
pub fn constructor_lane_order_equal<C: Context>(
    ctx: &mut C,
    arg0: &LaneOrder,
    arg1: &LaneOrder,
) -> Option<bool> {
    let pattern0_0 = arg0;
    match pattern0_0 {
        &LaneOrder::LittleEndian => {
            let pattern2_0 = arg1;
            match pattern2_0 {
                &LaneOrder::LittleEndian => {
                    // Rule at src/isa/s390x/inst.isle line 1484.
                    let expr0_0: bool = true;
                    return Some(expr0_0);
                }
                &LaneOrder::BigEndian => {
                    // Rule at src/isa/s390x/inst.isle line 1485.
                    let expr0_0: bool = false;
                    return Some(expr0_0);
                }
                _ => {}
            }
        }
        &LaneOrder::BigEndian => {
            let pattern2_0 = arg1;
            match pattern2_0 {
                &LaneOrder::LittleEndian => {
                    // Rule at src/isa/s390x/inst.isle line 1486.
                    let expr0_0: bool = false;
                    return Some(expr0_0);
                }
                &LaneOrder::BigEndian => {
                    // Rule at src/isa/s390x/inst.isle line 1487.
                    let expr0_0: bool = true;
                    return Some(expr0_0);
                }
                _ => {}
            }
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term lane_order_from_memflags.
pub fn constructor_lane_order_from_memflags<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
) -> Option<LaneOrder> {
    let pattern0_0 = arg0;
    if let Some(()) = C::bigendian(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 1492.
        let expr0_0 = LaneOrder::BigEndian;
        return Some(expr0_0);
    }
    let pattern0_0 = arg0;
    if let Some(()) = C::littleendian(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 1491.
        let expr0_0 = LaneOrder::LittleEndian;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term i64_nonzero.
pub fn constructor_i64_nonzero<C: Context>(ctx: &mut C, arg0: i64) -> Option<i64> {
    let pattern0_0 = arg0;
    let mut closure1 = || {
        let expr0_0: i64 = 0i128 as i64;
        let expr1_0 = C::i64_nonequal(ctx, pattern0_0, expr0_0)?;
        return Some(expr1_0);
    };
    if let Some(pattern1_0) = closure1() {
        // Rule at src/isa/s390x/inst.isle line 1544.
        return Some(pattern0_0);
    }
    return None;
}

// Generated as internal constructor for term i64_not_neg1.
pub fn constructor_i64_not_neg1<C: Context>(ctx: &mut C, arg0: i64) -> Option<i64> {
    let pattern0_0 = arg0;
    let mut closure1 = || {
        let expr0_0: i64 = -1i128 as i64;
        let expr1_0 = C::i64_nonequal(ctx, pattern0_0, expr0_0)?;
        return Some(expr1_0);
    };
    if let Some(pattern1_0) = closure1() {
        // Rule at src/isa/s390x/inst.isle line 1549.
        return Some(pattern0_0);
    }
    return None;
}

// Generated as internal constructor for term imm8x16.
pub fn constructor_imm8x16<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: u8,
    arg2: u8,
    arg3: u8,
    arg4: u8,
    arg5: u8,
    arg6: u8,
    arg7: u8,
    arg8: u8,
    arg9: u8,
    arg10: u8,
    arg11: u8,
    arg12: u8,
    arg13: u8,
    arg14: u8,
    arg15: u8,
) -> Option<u128> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    let pattern5_0 = arg5;
    let pattern6_0 = arg6;
    let pattern7_0 = arg7;
    let pattern8_0 = arg8;
    let pattern9_0 = arg9;
    let pattern10_0 = arg10;
    let pattern11_0 = arg11;
    let pattern12_0 = arg12;
    let pattern13_0 = arg13;
    let pattern14_0 = arg14;
    let pattern15_0 = arg15;
    // Rule at src/isa/s390x/inst.isle line 1588.
    let expr0_0 = C::u8_pair_concat(ctx, pattern0_0, pattern1_0);
    let expr1_0 = C::u8_pair_concat(ctx, pattern2_0, pattern3_0);
    let expr2_0 = C::u16_pair_concat(ctx, expr0_0, expr1_0);
    let expr3_0 = C::u8_pair_concat(ctx, pattern4_0, pattern5_0);
    let expr4_0 = C::u8_pair_concat(ctx, pattern6_0, pattern7_0);
    let expr5_0 = C::u16_pair_concat(ctx, expr3_0, expr4_0);
    let expr6_0 = C::u32_pair_concat(ctx, expr2_0, expr5_0);
    let expr7_0 = C::u8_pair_concat(ctx, pattern8_0, pattern9_0);
    let expr8_0 = C::u8_pair_concat(ctx, pattern10_0, pattern11_0);
    let expr9_0 = C::u16_pair_concat(ctx, expr7_0, expr8_0);
    let expr10_0 = C::u8_pair_concat(ctx, pattern12_0, pattern13_0);
    let expr11_0 = C::u8_pair_concat(ctx, pattern14_0, pattern15_0);
    let expr12_0 = C::u16_pair_concat(ctx, expr10_0, expr11_0);
    let expr13_0 = C::u32_pair_concat(ctx, expr9_0, expr12_0);
    let expr14_0 = C::u64_pair_concat(ctx, expr6_0, expr13_0);
    return Some(expr14_0);
}

// Generated as internal constructor for term mask_amt_reg.
pub fn constructor_mask_amt_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr64_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 1700.
        return Some(pattern2_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr32_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 1697.
        let expr0_0: i64 = -1i128 as i64;
        let expr1_0 = C::mask_amt_imm(ctx, pattern1_0, expr0_0);
        let expr2_0 = C::u8_as_u16(ctx, expr1_0);
        let expr3_0: u8 = 0i128 as u8;
        let expr4_0 = C::uimm16shifted(ctx, expr2_0, expr3_0);
        let expr5_0 = constructor_and_uimm16shifted(ctx, pattern1_0, pattern2_0, expr4_0)?;
        return Some(expr5_0);
    }
    return None;
}

// Generated as internal constructor for term amt_reg.
pub fn constructor_amt_reg<C: Context>(ctx: &mut C, arg0: Value) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::fits_in_64(ctx, pattern1_0) {
        // Rule at src/isa/s390x/inst.isle line 1704.
        let expr0_0 = C::put_in_reg(ctx, pattern0_0);
        return Some(expr0_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::vr128_ty(ctx, pattern1_0) {
        // Rule at src/isa/s390x/inst.isle line 1705.
        let expr0_0: Type = I64X2;
        let expr1_0 = C::put_in_reg(ctx, pattern0_0);
        let expr2_0: u8 = 1i128 as u8;
        let expr3_0 = C::zero_reg(ctx);
        let expr4_0 = constructor_vec_extract_lane(ctx, expr0_0, expr1_0, expr2_0, expr3_0)?;
        return Some(expr4_0);
    }
    return None;
}

// Generated as internal constructor for term amt_vr.
pub fn constructor_amt_vr<C: Context>(ctx: &mut C, arg0: Value) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::u64_from_value(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 1715.
        let expr0_0: Type = I8X16;
        let expr1_0 = constructor_vec_imm_splat(ctx, expr0_0, pattern1_0)?;
        return Some(expr1_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::vr128_ty(ctx, pattern1_0) {
        // Rule at src/isa/s390x/inst.isle line 1713.
        let expr0_0: Type = I8X16;
        let expr1_0 = C::put_in_reg(ctx, pattern0_0);
        let expr2_0: u8 = 15i128 as u8;
        let expr3_0 = constructor_vec_replicate_lane(ctx, expr0_0, expr1_0, expr2_0)?;
        return Some(expr3_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::fits_in_64(ctx, pattern1_0) {
        // Rule at src/isa/s390x/inst.isle line 1710.
        let expr0_0: Type = I8X16;
        let expr1_0: Type = I8X16;
        let expr2_0 = C::put_in_reg(ctx, pattern0_0);
        let expr3_0: u8 = 0i128 as u8;
        let expr4_0 = C::zero_reg(ctx);
        let expr5_0 = constructor_vec_insert_lane_undef(ctx, expr1_0, expr2_0, expr3_0, expr4_0)?;
        let expr6_0: u8 = 0i128 as u8;
        let expr7_0 = constructor_vec_replicate_lane(ctx, expr0_0, expr5_0, expr6_0)?;
        return Some(expr7_0);
    }
    return None;
}

// Generated as internal constructor for term memarg_symbol_offset.
pub fn constructor_memarg_symbol_offset<C: Context>(ctx: &mut C, arg0: i64) -> Option<i32> {
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/inst.isle line 1807.
    let expr0_0: i64 = 0i128 as i64;
    let expr1_0 = C::memarg_symbol_offset_sum(ctx, pattern0_0, expr0_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term lower_address.
pub fn constructor_lower_address<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
) -> Option<MemArg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(pattern2_0) = C::def_inst(ctx, pattern1_0) {
        let pattern3_0 = C::inst_data(ctx, pattern2_0);
        match &pattern3_0 {
            &InstructionData::UnaryGlobalValue {
                opcode: ref pattern4_0,
                global_value: pattern4_1,
            } => {
                if let &Opcode::SymbolValue = pattern4_0 {
                    if let Some((pattern6_0, pattern6_1, pattern6_2)) =
                        C::symbol_value_data(ctx, pattern4_1)
                    {
                        if let Some(()) = C::reloc_distance_near(ctx, pattern6_1) {
                            let pattern8_0 = arg2;
                            let pattern9_0 = C::i64_from_offset(ctx, pattern8_0);
                            let mut closure10 = || {
                                let expr0_0 =
                                    C::memarg_symbol_offset_sum(ctx, pattern9_0, pattern6_2)?;
                                return Some(expr0_0);
                            };
                            if let Some(pattern10_0) = closure10() {
                                // Rule at src/isa/s390x/inst.isle line 1820.
                                let expr0_0 =
                                    C::memarg_symbol(ctx, pattern6_0, pattern10_0, pattern0_0);
                                return Some(expr0_0);
                            }
                        }
                    }
                }
            }
            &InstructionData::Binary {
                opcode: ref pattern4_0,
                args: ref pattern4_1,
            } => {
                if let &Opcode::Iadd = pattern4_0 {
                    let (pattern6_0, pattern6_1) = C::unpack_value_array_2(ctx, pattern4_1);
                    let pattern7_0 = arg2;
                    let pattern8_0 = C::i64_from_offset(ctx, pattern7_0);
                    if pattern8_0 == 0i128 as i64 {
                        // Rule at src/isa/s390x/inst.isle line 1817.
                        let expr0_0 = C::put_in_reg(ctx, pattern6_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                        let expr2_0: u8 = 0i128 as u8;
                        let expr3_0 =
                            C::memarg_reg_plus_reg(ctx, expr0_0, expr1_0, expr2_0, pattern0_0);
                        return Some(expr3_0);
                    }
                }
            }
            _ => {}
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = C::i64_from_offset(ctx, pattern2_0);
    // Rule at src/isa/s390x/inst.isle line 1814.
    let expr0_0 = C::put_in_reg(ctx, pattern1_0);
    let expr1_0: u8 = 0i128 as u8;
    let expr2_0 = C::memarg_reg_plus_off(ctx, expr0_0, pattern3_0, expr1_0, pattern0_0);
    return Some(expr2_0);
}

// Generated as internal constructor for term lower_address_bias.
pub fn constructor_lower_address_bias<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
    arg3: u8,
) -> Option<MemArg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(pattern2_0) = C::def_inst(ctx, pattern1_0) {
        let pattern3_0 = C::inst_data(ctx, pattern2_0);
        if let &InstructionData::Binary {
            opcode: ref pattern4_0,
            args: ref pattern4_1,
        } = &pattern3_0
        {
            if let &Opcode::Iadd = pattern4_0 {
                let (pattern6_0, pattern6_1) = C::unpack_value_array_2(ctx, pattern4_1);
                let pattern7_0 = arg2;
                let pattern8_0 = C::i64_from_offset(ctx, pattern7_0);
                if pattern8_0 == 0i128 as i64 {
                    let pattern10_0 = arg3;
                    // Rule at src/isa/s390x/inst.isle line 1834.
                    let expr0_0 = C::put_in_reg(ctx, pattern6_0);
                    let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                    let expr2_0 =
                        C::memarg_reg_plus_reg(ctx, expr0_0, expr1_0, pattern10_0, pattern0_0);
                    return Some(expr2_0);
                }
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = C::i64_from_offset(ctx, pattern2_0);
    let pattern4_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 1831.
    let expr0_0 = C::put_in_reg(ctx, pattern1_0);
    let expr1_0 = C::memarg_reg_plus_off(ctx, expr0_0, pattern3_0, pattern4_0, pattern0_0);
    return Some(expr1_0);
}

// Generated as internal constructor for term load_sym.
pub fn constructor_load_sym<C: Context>(ctx: &mut C, arg0: Inst) -> Option<Inst> {
    let pattern0_0 = arg0;
    let mut closure1 = || {
        return Some(pattern0_0);
    };
    if let Some(pattern1_0) = closure1() {
        let pattern2_0 = C::inst_data(ctx, pattern1_0);
        if let &InstructionData::Load {
            opcode: ref pattern3_0,
            arg: pattern3_1,
            flags: pattern3_2,
            offset: pattern3_3,
        } = &pattern2_0
        {
            if let &Opcode::Load = pattern3_0 {
                if let Some(pattern5_0) = C::def_inst(ctx, pattern3_1) {
                    let pattern6_0 = C::inst_data(ctx, pattern5_0);
                    if let &InstructionData::UnaryGlobalValue {
                        opcode: ref pattern7_0,
                        global_value: pattern7_1,
                    } = &pattern6_0
                    {
                        if let &Opcode::SymbolValue = pattern7_0 {
                            if let Some((pattern9_0, pattern9_1, pattern9_2)) =
                                C::symbol_value_data(ctx, pattern7_1)
                            {
                                if let Some(()) = C::reloc_distance_near(ctx, pattern9_1) {
                                    let pattern11_0 = C::i64_from_offset(ctx, pattern3_3);
                                    let mut closure12 = || {
                                        let expr0_0 = C::memarg_symbol_offset_sum(
                                            ctx,
                                            pattern9_2,
                                            pattern11_0,
                                        )?;
                                        return Some(expr0_0);
                                    };
                                    if let Some(pattern12_0) = closure12() {
                                        // Rule at src/isa/s390x/inst.isle line 1841.
                                        return Some(pattern0_0);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return None;
}

// Generated as internal constructor for term uload16_sym.
pub fn constructor_uload16_sym<C: Context>(ctx: &mut C, arg0: Inst) -> Option<Inst> {
    let pattern0_0 = arg0;
    let mut closure1 = || {
        return Some(pattern0_0);
    };
    if let Some(pattern1_0) = closure1() {
        let pattern2_0 = C::inst_data(ctx, pattern1_0);
        if let &InstructionData::Load {
            opcode: ref pattern3_0,
            arg: pattern3_1,
            flags: pattern3_2,
            offset: pattern3_3,
        } = &pattern2_0
        {
            if let &Opcode::Uload16 = pattern3_0 {
                if let Some(pattern5_0) = C::def_inst(ctx, pattern3_1) {
                    let pattern6_0 = C::inst_data(ctx, pattern5_0);
                    if let &InstructionData::UnaryGlobalValue {
                        opcode: ref pattern7_0,
                        global_value: pattern7_1,
                    } = &pattern6_0
                    {
                        if let &Opcode::SymbolValue = pattern7_0 {
                            if let Some((pattern9_0, pattern9_1, pattern9_2)) =
                                C::symbol_value_data(ctx, pattern7_1)
                            {
                                if let Some(()) = C::reloc_distance_near(ctx, pattern9_1) {
                                    let pattern11_0 = C::i64_from_offset(ctx, pattern3_3);
                                    let mut closure12 = || {
                                        let expr0_0 = C::memarg_symbol_offset_sum(
                                            ctx,
                                            pattern9_2,
                                            pattern11_0,
                                        )?;
                                        return Some(expr0_0);
                                    };
                                    if let Some(pattern12_0) = closure12() {
                                        // Rule at src/isa/s390x/inst.isle line 1849.
                                        return Some(pattern0_0);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return None;
}

// Generated as internal constructor for term memarg_pair.
pub fn constructor_memarg_pair<C: Context>(ctx: &mut C, arg0: &MemArg) -> Option<MemArgPair> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::memarg_pair_from_memarg(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 1863.
        return Some(pattern1_0);
    }
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/inst.isle line 1864.
    let expr0_0 = constructor_load_addr(ctx, pattern0_0)?;
    let expr1_0 = C::memarg_flags(ctx, pattern0_0);
    let expr2_0 = C::memarg_pair_from_reg(ctx, expr0_0, expr1_0);
    return Some(expr2_0);
}

// Generated as internal constructor for term stack_addr_impl.
pub fn constructor_stack_addr_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: StackSlot,
    arg2: Offset32,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 1879.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = C::abi_stackslot_addr(ctx, expr0_0, pattern1_0, pattern2_0);
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term sink_load.
pub fn constructor_sink_load<C: Context>(ctx: &mut C, arg0: Inst) -> Option<MemArg> {
    let pattern0_0 = arg0;
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    if let &InstructionData::Load {
        opcode: ref pattern2_0,
        arg: pattern2_1,
        flags: pattern2_2,
        offset: pattern2_3,
    } = &pattern1_0
    {
        if let &Opcode::Load = pattern2_0 {
            // Rule at src/isa/s390x/inst.isle line 1945.
            let expr0_0 = C::sink_inst(ctx, pattern0_0);
            let expr1_0 = constructor_lower_address(ctx, pattern2_2, pattern2_1, pattern2_3)?;
            return Some(expr1_0);
        }
    }
    return None;
}

// Generated as internal constructor for term sink_sload16.
pub fn constructor_sink_sload16<C: Context>(ctx: &mut C, arg0: Inst) -> Option<MemArg> {
    let pattern0_0 = arg0;
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    if let &InstructionData::Load {
        opcode: ref pattern2_0,
        arg: pattern2_1,
        flags: pattern2_2,
        offset: pattern2_3,
    } = &pattern1_0
    {
        if let &Opcode::Sload16 = pattern2_0 {
            // Rule at src/isa/s390x/inst.isle line 1952.
            let expr0_0 = C::sink_inst(ctx, pattern0_0);
            let expr1_0 = constructor_lower_address(ctx, pattern2_2, pattern2_1, pattern2_3)?;
            return Some(expr1_0);
        }
    }
    return None;
}

// Generated as internal constructor for term sink_sload32.
pub fn constructor_sink_sload32<C: Context>(ctx: &mut C, arg0: Inst) -> Option<MemArg> {
    let pattern0_0 = arg0;
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    if let &InstructionData::Load {
        opcode: ref pattern2_0,
        arg: pattern2_1,
        flags: pattern2_2,
        offset: pattern2_3,
    } = &pattern1_0
    {
        if let &Opcode::Sload32 = pattern2_0 {
            // Rule at src/isa/s390x/inst.isle line 1959.
            let expr0_0 = C::sink_inst(ctx, pattern0_0);
            let expr1_0 = constructor_lower_address(ctx, pattern2_2, pattern2_1, pattern2_3)?;
            return Some(expr1_0);
        }
    }
    return None;
}

// Generated as internal constructor for term sink_uload16.
pub fn constructor_sink_uload16<C: Context>(ctx: &mut C, arg0: Inst) -> Option<MemArg> {
    let pattern0_0 = arg0;
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    if let &InstructionData::Load {
        opcode: ref pattern2_0,
        arg: pattern2_1,
        flags: pattern2_2,
        offset: pattern2_3,
    } = &pattern1_0
    {
        if let &Opcode::Uload16 = pattern2_0 {
            // Rule at src/isa/s390x/inst.isle line 1966.
            let expr0_0 = C::sink_inst(ctx, pattern0_0);
            let expr1_0 = constructor_lower_address(ctx, pattern2_2, pattern2_1, pattern2_3)?;
            return Some(expr1_0);
        }
    }
    return None;
}

// Generated as internal constructor for term sink_uload32.
pub fn constructor_sink_uload32<C: Context>(ctx: &mut C, arg0: Inst) -> Option<MemArg> {
    let pattern0_0 = arg0;
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    if let &InstructionData::Load {
        opcode: ref pattern2_0,
        arg: pattern2_1,
        flags: pattern2_2,
        offset: pattern2_3,
    } = &pattern1_0
    {
        if let &Opcode::Uload32 = pattern2_0 {
            // Rule at src/isa/s390x/inst.isle line 1973.
            let expr0_0 = C::sink_inst(ctx, pattern0_0);
            let expr1_0 = constructor_lower_address(ctx, pattern2_2, pattern2_1, pattern2_3)?;
            return Some(expr1_0);
        }
    }
    return None;
}

// Generated as internal constructor for term temp_writable_regpair.
pub fn constructor_temp_writable_regpair<C: Context>(ctx: &mut C) -> Option<WritableRegPair> {
    // Rule at src/isa/s390x/inst.isle line 1989.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0: Type = I64;
    let expr3_0 = C::temp_writable_reg(ctx, expr2_0);
    let expr4_0 = C::writable_regpair(ctx, expr1_0, expr3_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term writable_regpair_to_regpair.
pub fn constructor_writable_regpair_to_regpair<C: Context>(
    ctx: &mut C,
    arg0: WritableRegPair,
) -> Option<RegPair> {
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/inst.isle line 2005.
    let expr0_0 = C::writable_regpair_hi(ctx, pattern0_0);
    let expr1_0 = C::writable_reg_to_reg(ctx, expr0_0);
    let expr2_0 = C::writable_regpair_lo(ctx, pattern0_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr2_0);
    let expr4_0 = C::regpair(ctx, expr1_0, expr3_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2025.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::AluRRR {
        alu_op: pattern1_0.clone(),
        rd: expr0_0,
        rn: pattern2_0,
        rm: pattern3_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term alu_rrr_with_flags_paired.
pub fn constructor_alu_rrr_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2032.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::AluRRR {
        alu_op: pattern1_0.clone(),
        rd: expr0_0,
        rn: pattern2_0,
        rm: pattern3_0,
    };
    let expr2_0 = C::writable_reg_to_reg(ctx, expr0_0);
    let expr3_0 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: expr1_0,
        result: expr2_0,
    };
    return Some(expr3_0);
}

// Generated as internal constructor for term alu_rrsimm16.
pub fn constructor_alu_rrsimm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: i16,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2039.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::AluRRSImm16 {
        alu_op: pattern1_0.clone(),
        rd: expr0_0,
        rn: pattern2_0,
        imm: pattern3_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term alu_rr.
pub fn constructor_alu_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2046.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::AluRR {
        alu_op: pattern1_0.clone(),
        rd: expr0_0,
        ri: pattern2_0,
        rm: pattern3_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term alu_rr_with_flags_paired.
pub fn constructor_alu_rr_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2053.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::AluRR {
        alu_op: pattern1_0.clone(),
        rd: expr0_0,
        ri: pattern2_0,
        rm: pattern3_0,
    };
    let expr2_0 = C::writable_reg_to_reg(ctx, expr0_0);
    let expr3_0 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: expr1_0,
        result: expr2_0,
    };
    return Some(expr3_0);
}

// Generated as internal constructor for term alu_rx.
pub fn constructor_alu_rx<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2060.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::AluRX {
        alu_op: pattern1_0.clone(),
        rd: expr0_0,
        ri: pattern2_0,
        mem: pattern3_0.clone(),
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term alu_rx_with_flags_paired.
pub fn constructor_alu_rx_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: &MemArg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2067.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::AluRX {
        alu_op: pattern1_0.clone(),
        rd: expr0_0,
        ri: pattern2_0,
        mem: pattern3_0.clone(),
    };
    let expr2_0 = C::writable_reg_to_reg(ctx, expr0_0);
    let expr3_0 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: expr1_0,
        result: expr2_0,
    };
    return Some(expr3_0);
}

// Generated as internal constructor for term alu_rsimm16.
pub fn constructor_alu_rsimm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: i16,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2074.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::AluRSImm16 {
        alu_op: pattern1_0.clone(),
        rd: expr0_0,
        ri: pattern2_0,
        imm: pattern3_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term alu_rsimm32.
pub fn constructor_alu_rsimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: i32,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2081.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::AluRSImm32 {
        alu_op: pattern1_0.clone(),
        rd: expr0_0,
        ri: pattern2_0,
        imm: pattern3_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term alu_ruimm32.
pub fn constructor_alu_ruimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: u32,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2088.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::AluRUImm32 {
        alu_op: pattern1_0.clone(),
        rd: expr0_0,
        ri: pattern2_0,
        imm: pattern3_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term alu_ruimm32_with_flags_paired.
pub fn constructor_alu_ruimm32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: u32,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2095.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::AluRUImm32 {
        alu_op: pattern1_0.clone(),
        rd: expr0_0,
        ri: pattern2_0,
        imm: pattern3_0,
    };
    let expr2_0 = C::writable_reg_to_reg(ctx, expr0_0);
    let expr3_0 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: expr1_0,
        result: expr2_0,
    };
    return Some(expr3_0);
}

// Generated as internal constructor for term alu_ruimm16shifted.
pub fn constructor_alu_ruimm16shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: UImm16Shifted,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2102.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::AluRUImm16Shifted {
        alu_op: pattern1_0.clone(),
        rd: expr0_0,
        ri: pattern2_0,
        imm: pattern3_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term alu_ruimm32shifted.
pub fn constructor_alu_ruimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: UImm32Shifted,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2109.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::AluRUImm32Shifted {
        alu_op: pattern1_0.clone(),
        rd: expr0_0,
        ri: pattern2_0,
        imm: pattern3_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term smul_wide.
pub fn constructor_smul_wide<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Option<RegPair> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2116.
    let expr0_0 = constructor_temp_writable_regpair(ctx)?;
    let expr1_0 = MInst::SMulWide {
        rd: expr0_0,
        rn: pattern0_0,
        rm: pattern1_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = constructor_writable_regpair_to_regpair(ctx, expr0_0)?;
    return Some(expr3_0);
}

// Generated as internal constructor for term umul_wide.
pub fn constructor_umul_wide<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Option<RegPair> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2123.
    let expr0_0 = constructor_temp_writable_regpair(ctx)?;
    let expr1_0 = MInst::UMulWide {
        rd: expr0_0,
        ri: pattern0_0,
        rn: pattern1_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = constructor_writable_regpair_to_regpair(ctx, expr0_0)?;
    return Some(expr3_0);
}

// Generated as internal constructor for term sdivmod32.
pub fn constructor_sdivmod32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Option<RegPair> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2130.
    let expr0_0 = constructor_temp_writable_regpair(ctx)?;
    let expr1_0 = MInst::SDivMod32 {
        rd: expr0_0,
        ri: pattern0_0,
        rn: pattern1_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = constructor_writable_regpair_to_regpair(ctx, expr0_0)?;
    return Some(expr3_0);
}

// Generated as internal constructor for term sdivmod64.
pub fn constructor_sdivmod64<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Option<RegPair> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2137.
    let expr0_0 = constructor_temp_writable_regpair(ctx)?;
    let expr1_0 = MInst::SDivMod64 {
        rd: expr0_0,
        ri: pattern0_0,
        rn: pattern1_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = constructor_writable_regpair_to_regpair(ctx, expr0_0)?;
    return Some(expr3_0);
}

// Generated as internal constructor for term udivmod32.
pub fn constructor_udivmod32<C: Context>(ctx: &mut C, arg0: RegPair, arg1: Reg) -> Option<RegPair> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2144.
    let expr0_0 = constructor_temp_writable_regpair(ctx)?;
    let expr1_0 = MInst::UDivMod32 {
        rd: expr0_0,
        ri: pattern0_0,
        rn: pattern1_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = constructor_writable_regpair_to_regpair(ctx, expr0_0)?;
    return Some(expr3_0);
}

// Generated as internal constructor for term udivmod64.
pub fn constructor_udivmod64<C: Context>(ctx: &mut C, arg0: RegPair, arg1: Reg) -> Option<RegPair> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2151.
    let expr0_0 = constructor_temp_writable_regpair(ctx)?;
    let expr1_0 = MInst::UDivMod64 {
        rd: expr0_0,
        ri: pattern0_0,
        rn: pattern1_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = constructor_writable_regpair_to_regpair(ctx, expr0_0)?;
    return Some(expr3_0);
}

// Generated as internal constructor for term shift_rr.
pub fn constructor_shift_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ShiftOp,
    arg2: Reg,
    arg3: u8,
    arg4: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/s390x/inst.isle line 2158.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::ShiftRR {
        shift_op: pattern1_0.clone(),
        rd: expr0_0,
        rn: pattern2_0,
        shift_imm: pattern3_0,
        shift_reg: pattern4_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term rxsbg_test.
pub fn constructor_rxsbg_test<C: Context>(
    ctx: &mut C,
    arg0: &RxSBGOp,
    arg1: Reg,
    arg2: Reg,
    arg3: u8,
    arg4: u8,
    arg5: i8,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    let pattern5_0 = arg5;
    // Rule at src/isa/s390x/inst.isle line 2165.
    let expr0_0 = MInst::RxSBGTest {
        op: pattern0_0.clone(),
        rd: pattern1_0,
        rn: pattern2_0,
        start_bit: pattern3_0,
        end_bit: pattern4_0,
        rotate_amt: pattern5_0,
    };
    let expr1_0 = ProducesFlags::ProducesFlagsSideEffect { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term unary_rr.
pub fn constructor_unary_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &UnaryOp,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 2171.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::UnaryRR {
        op: pattern1_0.clone(),
        rd: expr0_0,
        rn: pattern2_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term cmp_rr.
pub fn constructor_cmp_rr<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 2178.
    let expr0_0 = MInst::CmpRR {
        op: pattern0_0.clone(),
        rn: pattern1_0,
        rm: pattern2_0,
    };
    let expr1_0 = ProducesFlags::ProducesFlagsSideEffect { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term cmp_rx.
pub fn constructor_cmp_rx<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 2183.
    let expr0_0 = MInst::CmpRX {
        op: pattern0_0.clone(),
        rn: pattern1_0,
        mem: pattern2_0.clone(),
    };
    let expr1_0 = ProducesFlags::ProducesFlagsSideEffect { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term cmp_rsimm16.
pub fn constructor_cmp_rsimm16<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: i16,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 2188.
    let expr0_0 = MInst::CmpRSImm16 {
        op: pattern0_0.clone(),
        rn: pattern1_0,
        imm: pattern2_0,
    };
    let expr1_0 = ProducesFlags::ProducesFlagsSideEffect { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term cmp_rsimm32.
pub fn constructor_cmp_rsimm32<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: i32,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 2193.
    let expr0_0 = MInst::CmpRSImm32 {
        op: pattern0_0.clone(),
        rn: pattern1_0,
        imm: pattern2_0,
    };
    let expr1_0 = ProducesFlags::ProducesFlagsSideEffect { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term cmp_ruimm32.
pub fn constructor_cmp_ruimm32<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: u32,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 2198.
    let expr0_0 = MInst::CmpRUImm32 {
        op: pattern0_0.clone(),
        rn: pattern1_0,
        imm: pattern2_0,
    };
    let expr1_0 = ProducesFlags::ProducesFlagsSideEffect { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term atomic_rmw_impl.
pub fn constructor_atomic_rmw_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2203.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::AtomicRmw {
        alu_op: pattern1_0.clone(),
        rd: expr0_0,
        rn: pattern2_0,
        mem: pattern3_0.clone(),
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term atomic_cas32.
pub fn constructor_atomic_cas32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 2210.
    let expr0_0: Type = I32;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::AtomicCas32 {
        rd: expr1_0,
        ri: pattern0_0,
        rn: pattern1_0,
        mem: pattern2_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term atomic_cas64.
pub fn constructor_atomic_cas64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 2217.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::AtomicCas64 {
        rd: expr1_0,
        ri: pattern0_0,
        rn: pattern1_0,
        mem: pattern2_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term fence_impl.
pub fn constructor_fence_impl<C: Context>(ctx: &mut C) -> Option<SideEffectNoResult> {
    // Rule at src/isa/s390x/inst.isle line 2224.
    let expr0_0 = MInst::Fence;
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term load32.
pub fn constructor_load32<C: Context>(ctx: &mut C, arg0: &MemArg) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/inst.isle line 2229.
    let expr0_0: Type = I32;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::Load32 {
        rd: expr1_0,
        mem: pattern0_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term load64.
pub fn constructor_load64<C: Context>(ctx: &mut C, arg0: &MemArg) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/inst.isle line 2236.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::Load64 {
        rd: expr1_0,
        mem: pattern0_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term loadrev16.
pub fn constructor_loadrev16<C: Context>(ctx: &mut C, arg0: &MemArg) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/inst.isle line 2243.
    let expr0_0: Type = I32;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::LoadRev16 {
        rd: expr1_0,
        mem: pattern0_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term loadrev32.
pub fn constructor_loadrev32<C: Context>(ctx: &mut C, arg0: &MemArg) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/inst.isle line 2250.
    let expr0_0: Type = I32;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::LoadRev32 {
        rd: expr1_0,
        mem: pattern0_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term loadrev64.
pub fn constructor_loadrev64<C: Context>(ctx: &mut C, arg0: &MemArg) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/inst.isle line 2257.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::LoadRev64 {
        rd: expr1_0,
        mem: pattern0_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term store8.
pub fn constructor_store8<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2264.
    let expr0_0 = MInst::Store8 {
        rd: pattern0_0,
        mem: pattern1_0.clone(),
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term store16.
pub fn constructor_store16<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2269.
    let expr0_0 = MInst::Store16 {
        rd: pattern0_0,
        mem: pattern1_0.clone(),
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term store32.
pub fn constructor_store32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2274.
    let expr0_0 = MInst::Store32 {
        rd: pattern0_0,
        mem: pattern1_0.clone(),
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term store64.
pub fn constructor_store64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2279.
    let expr0_0 = MInst::Store64 {
        rd: pattern0_0,
        mem: pattern1_0.clone(),
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term store8_imm.
pub fn constructor_store8_imm<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: &MemArg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2284.
    let expr0_0 = MInst::StoreImm8 {
        imm: pattern0_0,
        mem: pattern1_0.clone(),
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term store16_imm.
pub fn constructor_store16_imm<C: Context>(
    ctx: &mut C,
    arg0: i16,
    arg1: &MemArg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2289.
    let expr0_0 = MInst::StoreImm16 {
        imm: pattern0_0,
        mem: pattern1_0.clone(),
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term store32_simm16.
pub fn constructor_store32_simm16<C: Context>(
    ctx: &mut C,
    arg0: i16,
    arg1: &MemArg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2294.
    let expr0_0 = MInst::StoreImm32SExt16 {
        imm: pattern0_0,
        mem: pattern1_0.clone(),
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term store64_simm16.
pub fn constructor_store64_simm16<C: Context>(
    ctx: &mut C,
    arg0: i16,
    arg1: &MemArg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2299.
    let expr0_0 = MInst::StoreImm64SExt16 {
        imm: pattern0_0,
        mem: pattern1_0.clone(),
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term storerev16.
pub fn constructor_storerev16<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2304.
    let expr0_0 = MInst::StoreRev16 {
        rd: pattern0_0,
        mem: pattern1_0.clone(),
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term storerev32.
pub fn constructor_storerev32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2309.
    let expr0_0 = MInst::StoreRev32 {
        rd: pattern0_0,
        mem: pattern1_0.clone(),
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term storerev64.
pub fn constructor_storerev64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2314.
    let expr0_0 = MInst::StoreRev64 {
        rd: pattern0_0,
        mem: pattern1_0.clone(),
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term mvc.
pub fn constructor_mvc<C: Context>(
    ctx: &mut C,
    arg0: &MemArgPair,
    arg1: &MemArgPair,
    arg2: u8,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 2319.
    let expr0_0 = MInst::Mvc {
        dst: pattern0_0.clone(),
        src: pattern1_0.clone(),
        len_minus_one: pattern2_0,
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term load_ar.
pub fn constructor_load_ar<C: Context>(ctx: &mut C, arg0: u8) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/inst.isle line 2324.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::LoadAR {
        rd: expr1_0,
        ar: pattern0_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term insert_ar.
pub fn constructor_insert_ar<C: Context>(ctx: &mut C, arg0: Reg, arg1: u8) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2331.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::InsertAR {
        rd: expr1_0,
        ri: pattern0_0,
        ar: pattern1_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FPUOp1,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 2338.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::FpuRR {
        fpu_op: pattern1_0.clone(),
        rd: expr0_0,
        rn: pattern2_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FPUOp2,
    arg2: Reg,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2345.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::FpuRRR {
        fpu_op: pattern1_0.clone(),
        rd: expr0_0,
        rn: pattern2_0,
        rm: pattern3_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FPUOp3,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/s390x/inst.isle line 2352.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::FpuRRRR {
        fpu_op: pattern1_0.clone(),
        rd: expr0_0,
        rn: pattern2_0,
        rm: pattern3_0,
        ra: pattern4_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term fpu_cmp32.
pub fn constructor_fpu_cmp32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2359.
    let expr0_0 = MInst::FpuCmp32 {
        rn: pattern0_0,
        rm: pattern1_0,
    };
    let expr1_0 = ProducesFlags::ProducesFlagsSideEffect { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term fpu_cmp64.
pub fn constructor_fpu_cmp64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2364.
    let expr0_0 = MInst::FpuCmp64 {
        rn: pattern0_0,
        rm: pattern1_0,
    };
    let expr1_0 = ProducesFlags::ProducesFlagsSideEffect { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term fpu_round.
pub fn constructor_fpu_round<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundOp,
    arg2: &FpuRoundMode,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2369.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::FpuRound {
        op: pattern1_0.clone(),
        mode: pattern2_0.clone(),
        rd: expr0_0,
        rn: pattern3_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term vec_rrr.
pub fn constructor_vec_rrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecBinaryOp,
    arg2: Reg,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2376.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::VecRRR {
        op: pattern1_0.clone(),
        rd: expr0_0,
        rn: pattern2_0,
        rm: pattern3_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term vec_rr.
pub fn constructor_vec_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecUnaryOp,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 2383.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::VecRR {
        op: pattern1_0.clone(),
        rd: expr0_0,
        rn: pattern2_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term vec_shift_rr.
pub fn constructor_vec_shift_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecShiftOp,
    arg2: Reg,
    arg3: u8,
    arg4: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/s390x/inst.isle line 2390.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::VecShiftRR {
        shift_op: pattern1_0.clone(),
        rd: expr0_0,
        rn: pattern2_0,
        shift_imm: pattern3_0,
        shift_reg: pattern4_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term vec_select.
pub fn constructor_vec_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2397.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::VecSelect {
        rd: expr0_0,
        rn: pattern1_0,
        rm: pattern2_0,
        ra: pattern3_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term vec_permute.
pub fn constructor_vec_permute<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2404.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::VecPermute {
        rd: expr0_0,
        rn: pattern1_0,
        rm: pattern2_0,
        ra: pattern3_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term vec_permute_dw_imm.
pub fn constructor_vec_permute_dw_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
    arg4: u8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/s390x/inst.isle line 2411.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::VecPermuteDWImm {
        rd: expr0_0,
        rn: pattern1_0,
        rm: pattern3_0,
        idx1: pattern2_0,
        idx2: pattern4_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term vec_int_cmp.
pub fn constructor_vec_int_cmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecIntCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2418.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::VecIntCmp {
        op: pattern1_0.clone(),
        rd: expr0_0,
        rn: pattern2_0,
        rm: pattern3_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term vec_int_cmps.
pub fn constructor_vec_int_cmps<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecIntCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2425.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::VecIntCmpS {
        op: pattern1_0.clone(),
        rd: expr0_0,
        rn: pattern2_0,
        rm: pattern3_0,
    };
    let expr2_0 = ProducesFlags::ProducesFlagsSideEffect { inst: expr1_0 };
    return Some(expr2_0);
}

// Generated as internal constructor for term vec_float_cmp.
pub fn constructor_vec_float_cmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecFloatCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2431.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::VecFloatCmp {
        op: pattern1_0.clone(),
        rd: expr0_0,
        rn: pattern2_0,
        rm: pattern3_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term vec_float_cmps.
pub fn constructor_vec_float_cmps<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecFloatCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 2438.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::VecFloatCmpS {
        op: pattern1_0.clone(),
        rd: expr0_0,
        rn: pattern2_0,
        rm: pattern3_0,
    };
    let expr2_0 = ProducesFlags::ProducesFlagsSideEffect { inst: expr1_0 };
    return Some(expr2_0);
}

// Generated as internal constructor for term vec_int128_scmphi.
pub fn constructor_vec_int128_scmphi<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> Option<ProducesBool> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2444.
    let expr0_0: Type = I128;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecInt128SCmpHi {
        tmp: expr1_0,
        rn: pattern0_0,
        rm: pattern1_0,
    };
    let expr3_0 = ProducesFlags::ProducesFlagsSideEffect { inst: expr2_0 };
    let expr4_0: u8 = 4i128 as u8;
    let expr5_0 = C::mask_as_cond(ctx, expr4_0);
    let expr6_0 = constructor_bool(ctx, &expr3_0, &expr5_0)?;
    return Some(expr6_0);
}

// Generated as internal constructor for term vec_int128_ucmphi.
pub fn constructor_vec_int128_ucmphi<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> Option<ProducesBool> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2451.
    let expr0_0: Type = I128;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::VecInt128UCmpHi {
        tmp: expr1_0,
        rn: pattern0_0,
        rm: pattern1_0,
    };
    let expr3_0 = ProducesFlags::ProducesFlagsSideEffect { inst: expr2_0 };
    let expr4_0: u8 = 4i128 as u8;
    let expr5_0 = C::mask_as_cond(ctx, expr4_0);
    let expr6_0 = constructor_bool(ctx, &expr3_0, &expr5_0)?;
    return Some(expr6_0);
}

// Generated as internal constructor for term vec_load.
pub fn constructor_vec_load<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2458.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::VecLoad {
        rd: expr0_0,
        mem: pattern1_0.clone(),
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term vec_loadrev.
pub fn constructor_vec_loadrev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2465.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::VecLoadRev {
        rd: expr0_0,
        mem: pattern1_0.clone(),
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term vec_load_byte16rev.
pub fn constructor_vec_load_byte16rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2472.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::VecLoadByte16Rev {
        rd: expr0_0,
        mem: pattern1_0.clone(),
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term vec_load_byte32rev.
pub fn constructor_vec_load_byte32rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2479.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::VecLoadByte32Rev {
        rd: expr0_0,
        mem: pattern1_0.clone(),
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term vec_load_byte64rev.
pub fn constructor_vec_load_byte64rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2486.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::VecLoadByte64Rev {
        rd: expr0_0,
        mem: pattern1_0.clone(),
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term vec_load_elt16rev.
pub fn constructor_vec_load_elt16rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2493.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::VecLoadElt16Rev {
        rd: expr0_0,
        mem: pattern1_0.clone(),
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term vec_load_elt32rev.
pub fn constructor_vec_load_elt32rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2500.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::VecLoadElt32Rev {
        rd: expr0_0,
        mem: pattern1_0.clone(),
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term vec_load_elt64rev.
pub fn constructor_vec_load_elt64rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2507.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::VecLoadElt64Rev {
        rd: expr0_0,
        mem: pattern1_0.clone(),
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term vec_store.
pub fn constructor_vec_store<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2514.
    let expr0_0 = MInst::VecStore {
        rd: pattern0_0,
        mem: pattern1_0.clone(),
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term vec_storerev.
pub fn constructor_vec_storerev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2519.
    let expr0_0 = MInst::VecStoreRev {
        rd: pattern0_0,
        mem: pattern1_0.clone(),
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term vec_store_byte16rev.
pub fn constructor_vec_store_byte16rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2524.
    let expr0_0 = MInst::VecStoreByte16Rev {
        rd: pattern0_0,
        mem: pattern1_0.clone(),
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term vec_store_byte32rev.
pub fn constructor_vec_store_byte32rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2529.
    let expr0_0 = MInst::VecStoreByte32Rev {
        rd: pattern0_0,
        mem: pattern1_0.clone(),
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term vec_store_byte64rev.
pub fn constructor_vec_store_byte64rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2534.
    let expr0_0 = MInst::VecStoreByte64Rev {
        rd: pattern0_0,
        mem: pattern1_0.clone(),
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term vec_store_elt16rev.
pub fn constructor_vec_store_elt16rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2539.
    let expr0_0 = MInst::VecStoreElt16Rev {
        rd: pattern0_0,
        mem: pattern1_0.clone(),
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term vec_store_elt32rev.
pub fn constructor_vec_store_elt32rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2544.
    let expr0_0 = MInst::VecStoreElt32Rev {
        rd: pattern0_0,
        mem: pattern1_0.clone(),
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term vec_store_elt64rev.
pub fn constructor_vec_store_elt64rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2549.
    let expr0_0 = MInst::VecStoreElt64Rev {
        rd: pattern0_0,
        mem: pattern1_0.clone(),
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term vec_load_replicate.
pub fn constructor_vec_load_replicate<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::ty_vec128(ctx, pattern0_0) {
        if let Some((pattern2_0, pattern2_1)) = C::multi_lane(ctx, pattern1_0) {
            let pattern3_0 = arg1;
            // Rule at src/isa/s390x/inst.isle line 2554.
            let expr0_0 = C::temp_writable_reg(ctx, pattern1_0);
            let expr1_0 = MInst::VecLoadReplicate {
                size: pattern2_0,
                rd: expr0_0,
                mem: pattern3_0.clone(),
            };
            let expr2_0 = C::emit(ctx, &expr1_0);
            let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
            return Some(expr3_0);
        }
    }
    return None;
}

// Generated as internal constructor for term vec_load_replicate_rev.
pub fn constructor_vec_load_replicate_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::ty_vec128(ctx, pattern0_0) {
        if let Some((pattern2_0, pattern2_1)) = C::multi_lane(ctx, pattern1_0) {
            let pattern3_0 = arg1;
            // Rule at src/isa/s390x/inst.isle line 2561.
            let expr0_0 = C::temp_writable_reg(ctx, pattern1_0);
            let expr1_0 = MInst::VecLoadReplicateRev {
                size: pattern2_0,
                rd: expr0_0,
                mem: pattern3_0.clone(),
            };
            let expr2_0 = C::emit(ctx, &expr1_0);
            let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
            return Some(expr3_0);
        }
    }
    return None;
}

// Generated as internal constructor for term mov_to_vec128.
pub fn constructor_mov_to_vec128<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 2568.
    let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
    let expr1_0 = MInst::MovToVec128 {
        rd: expr0_0,
        rn: pattern1_0,
        rm: pattern2_0,
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
    return Some(expr3_0);
}

// Generated as internal constructor for term vec_load_const.
pub fn constructor_vec_load_const<C: Context>(ctx: &mut C, arg0: Type, arg1: u128) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::vr128_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 2575.
        let expr0_0 = C::temp_writable_reg(ctx, pattern1_0);
        let expr1_0 = MInst::VecLoadConst {
            rd: expr0_0,
            const_data: pattern2_0,
        };
        let expr2_0 = C::emit(ctx, &expr1_0);
        let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term vec_load_const_replicate.
pub fn constructor_vec_load_const_replicate<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u64,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 2582.
        let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
        let expr1_0 = MInst::VecLoadConstReplicate {
            size: pattern1_0,
            rd: expr0_0,
            const_data: pattern2_0,
        };
        let expr2_0 = C::emit(ctx, &expr1_0);
        let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term vec_imm_byte_mask.
pub fn constructor_vec_imm_byte_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u16,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::vr128_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 2589.
        let expr0_0 = C::temp_writable_reg(ctx, pattern1_0);
        let expr1_0 = MInst::VecImmByteMask {
            rd: expr0_0,
            mask: pattern2_0,
        };
        let expr2_0 = C::emit(ctx, &expr1_0);
        let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term vec_imm_bit_mask.
pub fn constructor_vec_imm_bit_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u8,
    arg2: u8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::ty_vec128(ctx, pattern0_0) {
        if let Some((pattern2_0, pattern2_1)) = C::multi_lane(ctx, pattern1_0) {
            let pattern3_0 = arg1;
            let pattern4_0 = arg2;
            // Rule at src/isa/s390x/inst.isle line 2596.
            let expr0_0 = C::temp_writable_reg(ctx, pattern1_0);
            let expr1_0 = MInst::VecImmBitMask {
                size: pattern2_0,
                rd: expr0_0,
                start_bit: pattern3_0,
                end_bit: pattern4_0,
            };
            let expr2_0 = C::emit(ctx, &expr1_0);
            let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
            return Some(expr3_0);
        }
    }
    return None;
}

// Generated as internal constructor for term vec_imm_replicate.
pub fn constructor_vec_imm_replicate<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: i16,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::ty_vec128(ctx, pattern0_0) {
        if let Some((pattern2_0, pattern2_1)) = C::multi_lane(ctx, pattern1_0) {
            let pattern3_0 = arg1;
            // Rule at src/isa/s390x/inst.isle line 2603.
            let expr0_0 = C::temp_writable_reg(ctx, pattern1_0);
            let expr1_0 = MInst::VecImmReplicate {
                size: pattern2_0,
                rd: expr0_0,
                imm: pattern3_0,
            };
            let expr2_0 = C::emit(ctx, &expr1_0);
            let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
            return Some(expr3_0);
        }
    }
    return None;
}

// Generated as internal constructor for term vec_load_lane.
pub fn constructor_vec_load_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 2610.
        let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
        let expr1_0 = MInst::VecLoadLane {
            size: pattern1_0,
            rd: expr0_0,
            ri: pattern2_0,
            mem: pattern3_0.clone(),
            lane_imm: pattern4_0,
        };
        let expr2_0 = C::emit(ctx, &expr1_0);
        let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term vec_load_lane_undef.
pub fn constructor_vec_load_lane_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
    arg2: u8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 2617.
        let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
        let expr1_0 = MInst::VecLoadLaneUndef {
            size: pattern1_0,
            rd: expr0_0,
            mem: pattern2_0.clone(),
            lane_imm: pattern3_0,
        };
        let expr2_0 = C::emit(ctx, &expr1_0);
        let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term vec_load_lane_rev.
pub fn constructor_vec_load_lane_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 2624.
        let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
        let expr1_0 = MInst::VecLoadLaneRev {
            size: pattern1_0,
            rd: expr0_0,
            ri: pattern2_0,
            mem: pattern3_0.clone(),
            lane_imm: pattern4_0,
        };
        let expr2_0 = C::emit(ctx, &expr1_0);
        let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term vec_load_lane_rev_undef.
pub fn constructor_vec_load_lane_rev_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
    arg2: u8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 2631.
        let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
        let expr1_0 = MInst::VecLoadLaneRevUndef {
            size: pattern1_0,
            rd: expr0_0,
            mem: pattern2_0.clone(),
            lane_imm: pattern3_0,
        };
        let expr2_0 = C::emit(ctx, &expr1_0);
        let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term vec_store_lane.
pub fn constructor_vec_store_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 2638.
        let expr0_0 = MInst::VecStoreLane {
            size: pattern1_0,
            rd: pattern2_0,
            mem: pattern3_0.clone(),
            lane_imm: pattern4_0,
        };
        let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term vec_store_lane_rev.
pub fn constructor_vec_store_lane_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 2643.
        let expr0_0 = MInst::VecStoreLaneRev {
            size: pattern1_0,
            rd: pattern2_0,
            mem: pattern3_0.clone(),
            lane_imm: pattern4_0,
        };
        let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term vec_insert_lane.
pub fn constructor_vec_insert_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: u8,
    arg4: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        // Rule at src/isa/s390x/inst.isle line 2648.
        let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
        let expr1_0 = MInst::VecInsertLane {
            size: pattern1_0,
            rd: expr0_0,
            ri: pattern2_0,
            rn: pattern3_0,
            lane_imm: pattern4_0,
            lane_reg: pattern5_0,
        };
        let expr2_0 = C::emit(ctx, &expr1_0);
        let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term vec_insert_lane_undef.
pub fn constructor_vec_insert_lane_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 2655.
        let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
        let expr1_0 = MInst::VecInsertLaneUndef {
            size: pattern1_0,
            rd: expr0_0,
            rn: pattern2_0,
            lane_imm: pattern3_0,
            lane_reg: pattern4_0,
        };
        let expr2_0 = C::emit(ctx, &expr1_0);
        let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term vec_extract_lane.
pub fn constructor_vec_extract_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 2662.
        let expr0_0: Type = I64;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = MInst::VecExtractLane {
            size: pattern1_0,
            rd: expr1_0,
            rn: pattern2_0,
            lane_imm: pattern3_0,
            lane_reg: pattern4_0,
        };
        let expr3_0 = C::emit(ctx, &expr2_0);
        let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
        return Some(expr4_0);
    }
    return None;
}

// Generated as internal constructor for term vec_insert_lane_imm.
pub fn constructor_vec_insert_lane_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
    arg3: u8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 2669.
        let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
        let expr1_0 = MInst::VecInsertLaneImm {
            size: pattern1_0,
            rd: expr0_0,
            ri: pattern2_0,
            imm: pattern3_0,
            lane_imm: pattern4_0,
        };
        let expr2_0 = C::emit(ctx, &expr1_0);
        let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term vec_replicate_lane.
pub fn constructor_vec_replicate_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 2676.
        let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
        let expr1_0 = MInst::VecReplicateLane {
            size: pattern1_0,
            rd: expr0_0,
            rn: pattern2_0,
            lane_imm: pattern3_0,
        };
        let expr2_0 = C::emit(ctx, &expr1_0);
        let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term load_symbol_reloc.
pub fn constructor_load_symbol_reloc<C: Context>(ctx: &mut C, arg0: &SymbolReloc) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/inst.isle line 2683.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = C::box_symbol_reloc(ctx, pattern0_0);
    let expr3_0 = MInst::LoadSymbolReloc {
        rd: expr1_0,
        symbol_reloc: expr2_0,
    };
    let expr4_0 = C::emit(ctx, &expr3_0);
    let expr5_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr5_0);
}

// Generated as internal constructor for term load_addr.
pub fn constructor_load_addr<C: Context>(ctx: &mut C, arg0: &MemArg) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/inst.isle line 2690.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::LoadAddr {
        rd: expr1_0,
        mem: pattern0_0.clone(),
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term call_impl.
pub fn constructor_call_impl<C: Context>(
    ctx: &mut C,
    arg0: WritableReg,
    arg1: BoxCallInfo,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2697.
    let expr0_0 = MInst::Call {
        link: pattern0_0,
        info: pattern1_0,
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term call_ind_impl.
pub fn constructor_call_ind_impl<C: Context>(
    ctx: &mut C,
    arg0: WritableReg,
    arg1: BoxCallIndInfo,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2702.
    let expr0_0 = MInst::CallInd {
        link: pattern0_0,
        info: pattern1_0,
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term jump_impl.
pub fn constructor_jump_impl<C: Context>(
    ctx: &mut C,
    arg0: MachLabel,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/inst.isle line 2707.
    let expr0_0 = MInst::Jump { dest: pattern0_0 };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: MachLabel,
    arg1: MachLabel,
    arg2: &Cond,
) -> Option<ConsumesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 2712.
    let expr0_0 = MInst::CondBr {
        taken: pattern0_0,
        not_taken: pattern1_0,
        cond: pattern2_0.clone(),
    };
    let expr1_0 = ConsumesFlags::ConsumesFlagsSideEffect { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term oneway_cond_br.
pub fn constructor_oneway_cond_br<C: Context>(
    ctx: &mut C,
    arg0: MachLabel,
    arg1: &Cond,
) -> Option<ConsumesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2717.
    let expr0_0 = MInst::OneWayCondBr {
        target: pattern0_0,
        cond: pattern1_0.clone(),
    };
    let expr1_0 = ConsumesFlags::ConsumesFlagsSideEffect { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term jt_sequence.
pub fn constructor_jt_sequence<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VecMachLabel,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2722.
    let expr0_0 = MInst::JTSequence {
        ridx: pattern0_0,
        targets: pattern1_0.clone(),
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term push_alu_reg.
pub fn constructor_push_alu_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ALUOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    if let Some(pattern3_0) = C::real_reg(ctx, pattern2_0) {
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        // Rule at src/isa/s390x/inst.isle line 2760.
        let expr0_0 = MInst::AluRRR {
            alu_op: pattern1_0.clone(),
            rd: pattern3_0,
            rn: pattern4_0,
            rm: pattern5_0,
        };
        let expr1_0 = C::inst_builder_push(ctx, pattern0_0, &expr0_0);
        let expr2_0 = C::writable_reg_to_reg(ctx, pattern3_0);
        return Some(expr2_0);
    }
    return None;
}

// Generated as internal constructor for term push_alu_uimm32shifted.
pub fn constructor_push_alu_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ALUOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: UImm32Shifted,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    if let Some(pattern3_0) = C::real_reg(ctx, pattern2_0) {
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        // Rule at src/isa/s390x/inst.isle line 2766.
        let expr0_0 = MInst::AluRUImm32Shifted {
            alu_op: pattern1_0.clone(),
            rd: pattern3_0,
            ri: pattern4_0,
            imm: pattern5_0,
        };
        let expr1_0 = C::inst_builder_push(ctx, pattern0_0, &expr0_0);
        let expr2_0 = C::writable_reg_to_reg(ctx, pattern3_0);
        return Some(expr2_0);
    }
    return None;
}

// Generated as internal constructor for term push_shift.
pub fn constructor_push_shift<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ShiftOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: u8,
    arg5: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    if let Some(pattern3_0) = C::real_reg(ctx, pattern2_0) {
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        let pattern6_0 = arg5;
        // Rule at src/isa/s390x/inst.isle line 2772.
        let expr0_0 = MInst::ShiftRR {
            shift_op: pattern1_0.clone(),
            rd: pattern3_0,
            rn: pattern4_0,
            shift_imm: pattern5_0,
            shift_reg: pattern6_0,
        };
        let expr1_0 = C::inst_builder_push(ctx, pattern0_0, &expr0_0);
        let expr2_0 = C::writable_reg_to_reg(ctx, pattern3_0);
        return Some(expr2_0);
    }
    return None;
}

// Generated as internal constructor for term push_rxsbg.
pub fn constructor_push_rxsbg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &RxSBGOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: Reg,
    arg5: u8,
    arg6: u8,
    arg7: i8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    if let Some(pattern3_0) = C::real_reg(ctx, pattern2_0) {
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        let pattern6_0 = arg5;
        let pattern7_0 = arg6;
        let pattern8_0 = arg7;
        let mut closure9 = || {
            let expr0_0 = C::same_reg(ctx, pattern3_0, pattern4_0)?;
            return Some(expr0_0);
        };
        if let Some(pattern9_0) = closure9() {
            // Rule at src/isa/s390x/inst.isle line 2779.
            let expr0_0 = MInst::RxSBG {
                op: pattern1_0.clone(),
                rd: pattern3_0,
                ri: pattern4_0,
                rn: pattern5_0,
                start_bit: pattern6_0,
                end_bit: pattern7_0,
                rotate_amt: pattern8_0,
            };
            let expr1_0 = C::inst_builder_push(ctx, pattern0_0, &expr0_0);
            let expr2_0 = C::writable_reg_to_reg(ctx, pattern3_0);
            return Some(expr2_0);
        }
    }
    return None;
}

// Generated as internal constructor for term push_unary.
pub fn constructor_push_unary<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &UnaryOp,
    arg2: WritableReg,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    if let Some(pattern3_0) = C::real_reg(ctx, pattern2_0) {
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 2787.
        let expr0_0 = MInst::UnaryRR {
            op: pattern1_0.clone(),
            rd: pattern3_0,
            rn: pattern4_0,
        };
        let expr1_0 = C::inst_builder_push(ctx, pattern0_0, &expr0_0);
        let expr2_0 = C::writable_reg_to_reg(ctx, pattern3_0);
        return Some(expr2_0);
    }
    return None;
}

// Generated as internal constructor for term push_atomic_cas32.
pub fn constructor_push_atomic_cas32<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: WritableReg,
    arg2: Reg,
    arg3: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(pattern2_0) = C::real_reg(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 2793.
        let expr0_0 = C::writable_reg_to_reg(ctx, pattern2_0);
        let expr1_0 = MInst::AtomicCas32 {
            rd: pattern2_0,
            ri: expr0_0,
            rn: pattern3_0,
            mem: pattern4_0.clone(),
        };
        let expr2_0 = C::inst_builder_push(ctx, pattern0_0, &expr1_0);
        let expr3_0 = C::writable_reg_to_reg(ctx, pattern2_0);
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term push_atomic_cas64.
pub fn constructor_push_atomic_cas64<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: WritableReg,
    arg2: Reg,
    arg3: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(pattern2_0) = C::real_reg(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 2799.
        let expr0_0 = C::writable_reg_to_reg(ctx, pattern2_0);
        let expr1_0 = MInst::AtomicCas64 {
            rd: pattern2_0,
            ri: expr0_0,
            rn: pattern3_0,
            mem: pattern4_0.clone(),
        };
        let expr2_0 = C::inst_builder_push(ctx, pattern0_0, &expr1_0);
        let expr3_0 = C::writable_reg_to_reg(ctx, pattern2_0);
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term push_break_if.
pub fn constructor_push_break_if<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ProducesFlags,
    arg2: &Cond,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let &ProducesFlags::ProducesFlagsSideEffect {
        inst: ref pattern2_0,
    } = pattern1_0
    {
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 2805.
        let expr0_0 = C::inst_builder_push(ctx, pattern0_0, pattern2_0);
        let expr1_0 = MInst::CondBreak {
            cond: pattern3_0.clone(),
        };
        let expr2_0 = C::inst_builder_push(ctx, pattern0_0, &expr1_0);
        let expr3_0 = C::invalid_reg(ctx);
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term emit_loop.
pub fn constructor_emit_loop<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &Cond,
) -> Option<Unit> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 2812.
    let expr0_0 = C::inst_builder_finish(ctx, pattern0_0);
    let expr1_0 = MInst::Loop {
        body: expr0_0,
        cond: pattern1_0.clone(),
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    return Some(expr2_0);
}

// Generated as internal constructor for term copy_reg.
pub fn constructor_copy_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr64_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 2824.
        let expr0_0 = C::temp_writable_reg(ctx, pattern1_0);
        let expr1_0 = MInst::Mov64 {
            rd: expr0_0,
            rm: pattern2_0,
        };
        let expr2_0 = C::emit(ctx, &expr1_0);
        let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
        return Some(expr3_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr32_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 2820.
        let expr0_0 = C::temp_writable_reg(ctx, pattern1_0);
        let expr1_0 = MInst::Mov32 {
            rd: expr0_0,
            rm: pattern2_0,
        };
        let expr2_0 = C::emit(ctx, &expr1_0);
        let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term emit_load.
pub fn constructor_emit_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: WritableReg,
    arg2: &MemArg,
) -> Option<Unit> {
    let pattern0_0 = arg0;
    if pattern0_0 == I32 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 2831.
        let expr0_0 = MInst::Load32 {
            rd: pattern2_0,
            mem: pattern3_0.clone(),
        };
        let expr1_0 = C::emit(ctx, &expr0_0);
        return Some(expr1_0);
    }
    if pattern0_0 == I64 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 2833.
        let expr0_0 = MInst::Load64 {
            rd: pattern2_0,
            mem: pattern3_0.clone(),
        };
        let expr1_0 = C::emit(ctx, &expr0_0);
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term mov_preg.
pub fn constructor_mov_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/inst.isle line 2838.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = MInst::MovPReg {
        rd: expr1_0,
        rm: pattern0_0,
    };
    let expr3_0 = C::emit(ctx, &expr2_0);
    let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term sp.
pub fn constructor_sp<C: Context>(ctx: &mut C) -> Option<Reg> {
    // Rule at src/isa/s390x/inst.isle line 2851.
    let expr0_0 = C::preg_stack(ctx);
    let expr1_0 = constructor_mov_preg(ctx, expr0_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term arg_store.
pub fn constructor_arg_store<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 2857.
        let expr0_0 = constructor_store8(ctx, pattern2_0, pattern3_0)?;
        return Some(expr0_0);
    }
    if pattern0_0 == I16 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 2858.
        let expr0_0 = constructor_store16(ctx, pattern2_0, pattern3_0)?;
        return Some(expr0_0);
    }
    if pattern0_0 == I32 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 2859.
        let expr0_0 = constructor_store32(ctx, pattern2_0, pattern3_0)?;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 2860.
        let expr0_0 = constructor_store64(ctx, pattern2_0, pattern3_0)?;
        return Some(expr0_0);
    }
    if pattern0_0 == R64 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 2861.
        let expr0_0 = constructor_store64(ctx, pattern2_0, pattern3_0)?;
        return Some(expr0_0);
    }
    if pattern0_0 == F32 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 2862.
        let expr0_0: Type = F32X4;
        let expr1_0: u8 = 0i128 as u8;
        let expr2_0 = constructor_vec_store_lane(ctx, expr0_0, pattern2_0, pattern3_0, expr1_0)?;
        return Some(expr2_0);
    }
    if pattern0_0 == F64 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 2863.
        let expr0_0: Type = F64X2;
        let expr1_0: u8 = 0i128 as u8;
        let expr2_0 = constructor_vec_store_lane(ctx, expr0_0, pattern2_0, pattern3_0, expr1_0)?;
        return Some(expr2_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::vr128_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 2864.
        let expr0_0 = constructor_vec_store(ctx, pattern2_0, pattern3_0)?;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term arg_load.
pub fn constructor_arg_load<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 2867.
        let expr0_0: Type = I8;
        let expr1_0 = constructor_zext32_mem(ctx, expr0_0, pattern2_0)?;
        return Some(expr1_0);
    }
    if pattern0_0 == I16 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 2868.
        let expr0_0: Type = I16;
        let expr1_0 = constructor_zext32_mem(ctx, expr0_0, pattern2_0)?;
        return Some(expr1_0);
    }
    if pattern0_0 == I32 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 2869.
        let expr0_0 = constructor_load32(ctx, pattern2_0)?;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 2870.
        let expr0_0 = constructor_load64(ctx, pattern2_0)?;
        return Some(expr0_0);
    }
    if pattern0_0 == R64 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 2871.
        let expr0_0 = constructor_load64(ctx, pattern2_0)?;
        return Some(expr0_0);
    }
    if pattern0_0 == F32 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 2872.
        let expr0_0: Type = F32X4;
        let expr1_0: u8 = 0i128 as u8;
        let expr2_0 = constructor_vec_load_lane_undef(ctx, expr0_0, pattern2_0, expr1_0)?;
        return Some(expr2_0);
    }
    if pattern0_0 == F64 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 2873.
        let expr0_0: Type = F64X2;
        let expr1_0: u8 = 0i128 as u8;
        let expr2_0 = constructor_vec_load_lane_undef(ctx, expr0_0, pattern2_0, expr1_0)?;
        return Some(expr2_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::vr128_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 2874.
        let expr0_0 = constructor_vec_load(ctx, pattern1_0, pattern2_0)?;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_elt_rev.
pub fn constructor_vec_elt_rev<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 8i128 as u32 {
            if pattern1_1 == 16i128 as u32 {
                let pattern4_0 = arg1;
                // Rule at src/isa/s390x/inst.isle line 2886.
                let expr0_0: Type = I64X2;
                let expr1_0: u8 = 1i128 as u8;
                let expr2_0: u8 = 0i128 as u8;
                let expr3_0 = constructor_vec_permute_dw_imm(
                    ctx, expr0_0, pattern4_0, expr1_0, pattern4_0, expr2_0,
                )?;
                let expr4_0: Type = I16X8;
                let expr5_0: Type = I32X4;
                let expr6_0: Type = I64X2;
                let expr7_0: u8 = 32i128 as u8;
                let expr8_0 = constructor_vec_rot_imm(ctx, expr6_0, expr3_0, expr7_0)?;
                let expr9_0: u8 = 16i128 as u8;
                let expr10_0 = constructor_vec_rot_imm(ctx, expr5_0, expr8_0, expr9_0)?;
                let expr11_0: u8 = 8i128 as u8;
                let expr12_0 = constructor_vec_rot_imm(ctx, expr4_0, expr10_0, expr11_0)?;
                return Some(expr12_0);
            }
        }
        if pattern1_0 == 16i128 as u32 {
            if pattern1_1 == 8i128 as u32 {
                let pattern4_0 = arg1;
                // Rule at src/isa/s390x/inst.isle line 2883.
                let expr0_0: Type = I64X2;
                let expr1_0: u8 = 1i128 as u8;
                let expr2_0: u8 = 0i128 as u8;
                let expr3_0 = constructor_vec_permute_dw_imm(
                    ctx, expr0_0, pattern4_0, expr1_0, pattern4_0, expr2_0,
                )?;
                let expr4_0: Type = I32X4;
                let expr5_0: Type = I64X2;
                let expr6_0: u8 = 32i128 as u8;
                let expr7_0 = constructor_vec_rot_imm(ctx, expr5_0, expr3_0, expr6_0)?;
                let expr8_0: u8 = 16i128 as u8;
                let expr9_0 = constructor_vec_rot_imm(ctx, expr4_0, expr7_0, expr8_0)?;
                return Some(expr9_0);
            }
        }
        if pattern1_0 == 32i128 as u32 {
            if pattern1_1 == 4i128 as u32 {
                let pattern4_0 = arg1;
                // Rule at src/isa/s390x/inst.isle line 2880.
                let expr0_0: Type = I64X2;
                let expr1_0: u8 = 1i128 as u8;
                let expr2_0: u8 = 0i128 as u8;
                let expr3_0 = constructor_vec_permute_dw_imm(
                    ctx, expr0_0, pattern4_0, expr1_0, pattern4_0, expr2_0,
                )?;
                let expr4_0: Type = I64X2;
                let expr5_0: u8 = 32i128 as u8;
                let expr6_0 = constructor_vec_rot_imm(ctx, expr4_0, expr3_0, expr5_0)?;
                return Some(expr6_0);
            }
        }
        if pattern1_0 == 64i128 as u32 {
            if pattern1_1 == 2i128 as u32 {
                let pattern4_0 = arg1;
                // Rule at src/isa/s390x/inst.isle line 2878.
                let expr0_0: Type = I64X2;
                let expr1_0: u8 = 1i128 as u8;
                let expr2_0: u8 = 0i128 as u8;
                let expr3_0 = constructor_vec_permute_dw_imm(
                    ctx, expr0_0, pattern4_0, expr1_0, pattern4_0, expr2_0,
                )?;
                return Some(expr3_0);
            }
        }
    }
    return None;
}

// Generated as internal constructor for term abi_vec_elt_rev.
pub fn constructor_abi_vec_elt_rev<C: Context>(
    ctx: &mut C,
    arg0: &LaneOrder,
    arg1: Type,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(pattern2_0) = C::gpr32_ty(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 2894.
        return Some(pattern3_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(pattern2_0) = C::gpr64_ty(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 2895.
        return Some(pattern3_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(pattern2_0) = C::ty_scalar_float(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 2896.
        return Some(pattern3_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(pattern2_0) = C::vr128_ty(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        let mut closure4 = || {
            let expr0_0 = C::lane_order(ctx)?;
            let expr1_0 = constructor_lane_order_equal(ctx, pattern0_0, &expr0_0)?;
            return Some(expr1_0);
        };
        if let Some(pattern4_0) = closure4() {
            if pattern4_0 == false {
                // Rule at src/isa/s390x/inst.isle line 2900.
                let expr0_0 = constructor_vec_elt_rev(ctx, pattern2_0, pattern3_0)?;
                return Some(expr0_0);
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let mut closure3 = || {
        let expr0_0 = C::lane_order(ctx)?;
        let expr1_0 = constructor_lane_order_equal(ctx, pattern0_0, &expr0_0)?;
        return Some(expr1_0);
    };
    if let Some(pattern3_0) = closure3() {
        if pattern3_0 == true {
            // Rule at src/isa/s390x/inst.isle line 2897.
            return Some(pattern2_0);
        }
    }
    return None;
}

// Generated as internal constructor for term memcpy.
pub fn constructor_memcpy<C: Context>(
    ctx: &mut C,
    arg0: &MemArg,
    arg1: &MemArg,
    arg2: u64,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    if let Some(pattern3_0) = C::len_minus_one(ctx, pattern2_0) {
        // Rule at src/isa/s390x/inst.isle line 2906.
        let expr0_0 = constructor_memarg_pair(ctx, pattern0_0)?;
        let expr1_0 = constructor_memarg_pair(ctx, pattern1_0)?;
        let expr2_0 = constructor_mvc(ctx, &expr0_0, &expr1_0, pattern3_0)?;
        return Some(expr2_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 2908.
    let expr0_0 = constructor_load_addr(ctx, pattern0_0)?;
    let expr1_0 = constructor_load_addr(ctx, pattern1_0)?;
    let expr2_0: Type = I64;
    let expr3_0 = constructor_imm(ctx, expr2_0, pattern2_0)?;
    let expr4_0 = C::lib_call_info_memcpy(ctx, expr0_0, expr1_0, expr3_0);
    let expr5_0 = C::lib_accumulate_outgoing_args_size(ctx, &expr4_0);
    let expr6_0 = constructor_lib_call(ctx, &expr4_0)?;
    return Some(expr6_0);
}

// Generated as internal constructor for term copy_to_buffer.
pub fn constructor_copy_to_buffer<C: Context>(
    ctx: &mut C,
    arg0: i64,
    arg1: &ABIArg,
    arg2: Value,
) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(pattern2_0) = C::abi_arg_only_slot(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 2915.
        let expr0_0 = C::output_none(ctx);
        return Some(expr0_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some((pattern2_0, pattern2_1, pattern2_2)) = C::abi_arg_struct_pointer(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 2916.
        let expr0_0 = C::memarg_stack_off(ctx, pattern0_0, pattern2_1);
        let expr1_0 = C::put_in_reg(ctx, pattern3_0);
        let expr2_0: i64 = 0i128 as i64;
        let expr3_0: u8 = 0i128 as u8;
        let expr4_0 = C::memflags_trusted(ctx);
        let expr5_0 = C::memarg_reg_plus_off(ctx, expr1_0, expr2_0, expr3_0, expr4_0);
        let expr6_0 = constructor_memcpy(ctx, &expr0_0, &expr5_0, pattern2_2)?;
        let expr7_0 = constructor_side_effect(ctx, &expr6_0)?;
        return Some(expr7_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some((pattern2_0, pattern2_1, pattern2_2)) = C::abi_arg_implicit_pointer(ctx, pattern1_0)
    {
        let pattern3_0 = arg2;
        let pattern4_0 = C::value_type(ctx, pattern3_0);
        if pattern4_0 == pattern2_2 {
            // Rule at src/isa/s390x/inst.isle line 2920.
            let expr0_0 = C::put_in_reg(ctx, pattern3_0);
            let expr1_0 = C::memarg_stack_off(ctx, pattern0_0, pattern2_1);
            let expr2_0 = constructor_arg_store(ctx, pattern2_2, expr0_0, &expr1_0)?;
            let expr3_0 = constructor_side_effect(ctx, &expr2_0)?;
            return Some(expr3_0);
        }
    }
    return None;
}

// Generated as internal constructor for term copy_to_arg.
pub fn constructor_copy_to_arg<C: Context>(
    ctx: &mut C,
    arg0: &CallArgListBuilder,
    arg1: &LaneOrder,
    arg2: i64,
    arg3: &ABIArg,
    arg4: Value,
) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    if let Some(pattern4_0) = C::abi_arg_only_slot(ctx, pattern3_0) {
        let pattern5_0 = arg4;
        // Rule at src/isa/s390x/inst.isle line 2927.
        let expr0_0 = constructor_prepare_arg_val(ctx, &pattern4_0, pattern5_0)?;
        let expr1_0 = constructor_copy_reg_to_arg_slot(
            ctx,
            pattern0_0,
            pattern1_0,
            pattern2_0,
            &pattern4_0,
            expr0_0,
        )?;
        return Some(expr1_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    if let Some((pattern4_0, pattern4_1, pattern4_2)) = C::abi_arg_struct_pointer(ctx, pattern3_0) {
        let pattern5_0 = arg4;
        // Rule at src/isa/s390x/inst.isle line 2929.
        let expr0_0 = C::memarg_stack_off(ctx, pattern2_0, pattern4_1);
        let expr1_0 = constructor_load_addr(ctx, &expr0_0)?;
        let expr2_0 = constructor_copy_reg_to_arg_slot(
            ctx,
            pattern0_0,
            pattern1_0,
            pattern2_0,
            &pattern4_0,
            expr1_0,
        )?;
        return Some(expr2_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    if let Some((pattern4_0, pattern4_1, pattern4_2)) = C::abi_arg_implicit_pointer(ctx, pattern3_0)
    {
        let pattern5_0 = arg4;
        // Rule at src/isa/s390x/inst.isle line 2932.
        let expr0_0 = C::memarg_stack_off(ctx, pattern2_0, pattern4_1);
        let expr1_0 = constructor_load_addr(ctx, &expr0_0)?;
        let expr2_0 = constructor_copy_reg_to_arg_slot(
            ctx,
            pattern0_0,
            pattern1_0,
            pattern2_0,
            &pattern4_0,
            expr1_0,
        )?;
        return Some(expr2_0);
    }
    return None;
}

// Generated as internal constructor for term copy_from_arg.
pub fn constructor_copy_from_arg<C: Context>(
    ctx: &mut C,
    arg0: &CallRetList,
    arg1: &LaneOrder,
    arg2: i64,
    arg3: &ABIArg,
) -> Option<ValueRegs> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    if let Some(pattern4_0) = C::abi_arg_only_slot(ctx, pattern3_0) {
        // Rule at src/isa/s390x/inst.isle line 2938.
        let expr0_0 = constructor_copy_reg_from_arg_slot(
            ctx,
            pattern0_0,
            pattern1_0,
            pattern2_0,
            &pattern4_0,
        )?;
        let expr1_0 = C::value_reg(ctx, expr0_0);
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term prepare_arg_val.
pub fn constructor_prepare_arg_val<C: Context>(
    ctx: &mut C,
    arg0: &ABIArgSlot,
    arg1: Value,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let &ABIArgSlot::Reg {
        reg: pattern1_0,
        ty: pattern1_1,
        extension: ref pattern1_2,
    } = pattern0_0
    {
        if pattern1_1 == R64 {
            if let &ArgumentExtension::None = pattern1_2 {
                let pattern4_0 = arg1;
                // Rule at src/isa/s390x/inst.isle line 2945.
                let expr0_0: Type = I64;
                let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                let expr2_0 = constructor_copy_reg(ctx, expr0_0, expr1_0)?;
                return Some(expr2_0);
            }
        }
    }
    let pattern0_0 = arg0;
    match pattern0_0 {
        &ABIArgSlot::Stack {
            offset: pattern1_0,
            ty: pattern1_1,
            extension: ref pattern1_2,
        } => {
            match pattern1_2 {
                &ArgumentExtension::None => {
                    let pattern3_0 = arg1;
                    // Rule at src/isa/s390x/inst.isle line 2953.
                    let expr0_0 = C::put_in_reg(ctx, pattern3_0);
                    return Some(expr0_0);
                }
                &ArgumentExtension::Uext => {
                    let pattern3_0 = arg1;
                    // Rule at src/isa/s390x/inst.isle line 2955.
                    let expr0_0 = constructor_put_in_reg_zext64(ctx, pattern3_0)?;
                    return Some(expr0_0);
                }
                &ArgumentExtension::Sext => {
                    let pattern3_0 = arg1;
                    // Rule at src/isa/s390x/inst.isle line 2957.
                    let expr0_0 = constructor_put_in_reg_sext64(ctx, pattern3_0)?;
                    return Some(expr0_0);
                }
                _ => {}
            }
        }
        &ABIArgSlot::Reg {
            reg: pattern1_0,
            ty: pattern1_1,
            extension: ref pattern1_2,
        } => {
            match pattern1_2 {
                &ArgumentExtension::None => {
                    let pattern3_0 = arg1;
                    // Rule at src/isa/s390x/inst.isle line 2947.
                    let expr0_0 = C::put_in_reg(ctx, pattern3_0);
                    return Some(expr0_0);
                }
                &ArgumentExtension::Uext => {
                    let pattern3_0 = arg1;
                    // Rule at src/isa/s390x/inst.isle line 2949.
                    let expr0_0 = constructor_put_in_reg_zext64(ctx, pattern3_0)?;
                    return Some(expr0_0);
                }
                &ArgumentExtension::Sext => {
                    let pattern3_0 = arg1;
                    // Rule at src/isa/s390x/inst.isle line 2951.
                    let expr0_0 = constructor_put_in_reg_sext64(ctx, pattern3_0)?;
                    return Some(expr0_0);
                }
                _ => {}
            }
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term copy_reg_to_arg_slot.
pub fn constructor_copy_reg_to_arg_slot<C: Context>(
    ctx: &mut C,
    arg0: &CallArgListBuilder,
    arg1: &LaneOrder,
    arg2: i64,
    arg3: &ABIArgSlot,
    arg4: Reg,
) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    match pattern3_0 {
        &ABIArgSlot::Stack {
            offset: pattern4_0,
            ty: pattern4_1,
            extension: ref pattern4_2,
        } => {
            let pattern5_0 = arg4;
            // Rule at src/isa/s390x/inst.isle line 2966.
            let expr0_0 = constructor_abi_ext_ty(ctx, pattern4_2, pattern4_1)?;
            let expr1_0 = C::memarg_stack_off(ctx, pattern2_0, pattern4_0);
            let expr2_0 = constructor_arg_store(ctx, expr0_0, pattern5_0, &expr1_0)?;
            let expr3_0 = constructor_side_effect(ctx, &expr2_0)?;
            return Some(expr3_0);
        }
        &ABIArgSlot::Reg {
            reg: pattern4_0,
            ty: pattern4_1,
            extension: ref pattern4_2,
        } => {
            let pattern5_0 = arg4;
            // Rule at src/isa/s390x/inst.isle line 2963.
            let expr0_0 = constructor_abi_vec_elt_rev(ctx, pattern1_0, pattern4_1, pattern5_0)?;
            let expr1_0 = C::args_builder_push(ctx, pattern0_0, expr0_0, pattern4_0);
            let expr2_0 = C::output_none(ctx);
            return Some(expr2_0);
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term copy_reg_from_arg_slot.
pub fn constructor_copy_reg_from_arg_slot<C: Context>(
    ctx: &mut C,
    arg0: &CallRetList,
    arg1: &LaneOrder,
    arg2: i64,
    arg3: &ABIArgSlot,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    match pattern3_0 {
        &ABIArgSlot::Stack {
            offset: pattern4_0,
            ty: pattern4_1,
            extension: ref pattern4_2,
        } => {
            // Rule at src/isa/s390x/inst.isle line 2973.
            let expr0_0 = constructor_abi_ext_ty(ctx, pattern4_2, pattern4_1)?;
            let expr1_0 = C::memarg_stack_off(ctx, pattern2_0, pattern4_0);
            let expr2_0 = constructor_arg_load(ctx, expr0_0, &expr1_0)?;
            return Some(expr2_0);
        }
        &ABIArgSlot::Reg {
            reg: pattern4_0,
            ty: pattern4_1,
            extension: ref pattern4_2,
        } => {
            // Rule at src/isa/s390x/inst.isle line 2971.
            let expr0_0 = C::defs_lookup(ctx, pattern0_0, pattern4_0);
            let expr1_0 = constructor_abi_vec_elt_rev(ctx, pattern1_0, pattern4_1, expr0_0)?;
            return Some(expr1_0);
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term abi_ext_ty.
pub fn constructor_abi_ext_ty<C: Context>(
    ctx: &mut C,
    arg0: &ArgumentExtension,
    arg1: Type,
) -> Option<Type> {
    let pattern0_0 = arg0;
    match pattern0_0 {
        &ArgumentExtension::None => {
            let pattern2_0 = arg1;
            // Rule at src/isa/s390x/inst.isle line 2978.
            return Some(pattern2_0);
        }
        &ArgumentExtension::Uext => {
            let pattern2_0 = arg1;
            // Rule at src/isa/s390x/inst.isle line 2979.
            let expr0_0: Type = I64;
            return Some(expr0_0);
        }
        &ArgumentExtension::Sext => {
            let pattern2_0 = arg1;
            // Rule at src/isa/s390x/inst.isle line 2980.
            let expr0_0: Type = I64;
            return Some(expr0_0);
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 3052.
        let expr0_0: Type = F32;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = C::u64_as_u32(ctx, pattern2_0);
        let expr3_0 = MInst::LoadFpuConst32 {
            rd: expr1_0,
            const_data: expr2_0,
        };
        let expr4_0 = C::emit(ctx, &expr3_0);
        let expr5_0 = C::writable_reg_to_reg(ctx, expr1_0);
        return Some(expr5_0);
    }
    if pattern0_0 == F64 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 3059.
        let expr0_0: Type = F64;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = MInst::LoadFpuConst64 {
            rd: expr1_0,
            const_data: pattern2_0,
        };
        let expr3_0 = C::emit(ctx, &expr2_0);
        let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
        return Some(expr4_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr64_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        if let Some(pattern3_0) = C::u64_nonzero_hipart(ctx, pattern2_0) {
            if let Some(pattern4_0) = C::u64_nonzero_lopart(ctx, pattern2_0) {
                // Rule at src/isa/s390x/inst.isle line 3031.
                let expr0_0 = constructor_imm(ctx, pattern1_0, pattern3_0)?;
                let expr1_0 = constructor_insert_imm(ctx, pattern1_0, expr0_0, pattern4_0)?;
                return Some(expr1_0);
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr64_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        if let Some(pattern3_0) = C::i16_from_u64(ctx, pattern2_0) {
            // Rule at src/isa/s390x/inst.isle line 3007.
            let expr0_0 = C::temp_writable_reg(ctx, pattern1_0);
            let expr1_0 = MInst::Mov64SImm16 {
                rd: expr0_0,
                imm: pattern3_0,
            };
            let expr2_0 = C::emit(ctx, &expr1_0);
            let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
            return Some(expr3_0);
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::fits_in_16(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 2989.
        let expr0_0 = C::temp_writable_reg(ctx, pattern1_0);
        let expr1_0 = C::u64_as_i16(ctx, pattern2_0);
        let expr2_0 = MInst::Mov32SImm16 {
            rd: expr0_0,
            imm: expr1_0,
        };
        let expr3_0 = C::emit(ctx, &expr2_0);
        let expr4_0 = C::writable_reg_to_reg(ctx, expr0_0);
        return Some(expr4_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr32_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        if let Some(pattern3_0) = C::i16_from_u64(ctx, pattern2_0) {
            // Rule at src/isa/s390x/inst.isle line 2995.
            let expr0_0 = C::temp_writable_reg(ctx, pattern1_0);
            let expr1_0 = MInst::Mov32SImm16 {
                rd: expr0_0,
                imm: pattern3_0,
            };
            let expr2_0 = C::emit(ctx, &expr1_0);
            let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
            return Some(expr3_0);
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr32_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 3001.
        let expr0_0 = C::temp_writable_reg(ctx, pattern1_0);
        let expr1_0 = C::u64_as_u32(ctx, pattern2_0);
        let expr2_0 = MInst::Mov32Imm {
            rd: expr0_0,
            imm: expr1_0,
        };
        let expr3_0 = C::emit(ctx, &expr2_0);
        let expr4_0 = C::writable_reg_to_reg(ctx, expr0_0);
        return Some(expr4_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr64_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        if let Some(pattern3_0) = C::i32_from_u64(ctx, pattern2_0) {
            // Rule at src/isa/s390x/inst.isle line 3013.
            let expr0_0 = C::temp_writable_reg(ctx, pattern1_0);
            let expr1_0 = MInst::Mov64SImm32 {
                rd: expr0_0,
                imm: pattern3_0,
            };
            let expr2_0 = C::emit(ctx, &expr1_0);
            let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
            return Some(expr3_0);
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr64_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        if let Some(pattern3_0) = C::uimm16shifted_from_u64(ctx, pattern2_0) {
            // Rule at src/isa/s390x/inst.isle line 3019.
            let expr0_0 = C::temp_writable_reg(ctx, pattern1_0);
            let expr1_0 = MInst::Mov64UImm16Shifted {
                rd: expr0_0,
                imm: pattern3_0,
            };
            let expr2_0 = C::emit(ctx, &expr1_0);
            let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
            return Some(expr3_0);
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr64_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        if let Some(pattern3_0) = C::uimm32shifted_from_u64(ctx, pattern2_0) {
            // Rule at src/isa/s390x/inst.isle line 3025.
            let expr0_0 = C::temp_writable_reg(ctx, pattern1_0);
            let expr1_0 = MInst::Mov64UImm32Shifted {
                rd: expr0_0,
                imm: pattern3_0,
            };
            let expr2_0 = C::emit(ctx, &expr1_0);
            let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
            return Some(expr3_0);
        }
    }
    return None;
}

// Generated as internal constructor for term insert_imm.
pub fn constructor_insert_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u64,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    if let Some(pattern3_0) = C::uimm16shifted_from_u64(ctx, pattern2_0) {
        // Rule at src/isa/s390x/inst.isle line 3039.
        let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
        let expr1_0 = MInst::Insert64UImm16Shifted {
            rd: expr0_0,
            ri: pattern1_0,
            imm: pattern3_0,
        };
        let expr2_0 = C::emit(ctx, &expr1_0);
        let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
        return Some(expr3_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    if let Some(pattern3_0) = C::uimm32shifted_from_u64(ctx, pattern2_0) {
        // Rule at src/isa/s390x/inst.isle line 3045.
        let expr0_0 = C::temp_writable_reg(ctx, pattern0_0);
        let expr1_0 = MInst::Insert64UImm32Shifted {
            rd: expr0_0,
            ri: pattern1_0,
            imm: pattern3_0,
        };
        let expr2_0 = C::emit(ctx, &expr1_0);
        let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term imm32.
pub fn constructor_imm32<C: Context>(ctx: &mut C, arg0: Type, arg1: i32) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == I64 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 3066.
        let expr0_0: Type = I64;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = MInst::Mov64SImm32 {
            rd: expr1_0,
            imm: pattern2_0,
        };
        let expr3_0 = C::emit(ctx, &expr2_0);
        let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
        return Some(expr4_0);
    }
    return None;
}

// Generated as internal constructor for term vec_imm.
pub fn constructor_vec_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u128) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::vr128_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        if pattern2_0 == 0i128 as u128 {
            // Rule at src/isa/s390x/inst.isle line 3073.
            let expr0_0: u16 = 0i128 as u16;
            let expr1_0 = constructor_vec_imm_byte_mask(ctx, pattern1_0, expr0_0)?;
            return Some(expr1_0);
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::vr128_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let (pattern3_0, pattern3_1) = C::u64_pair_split(ctx, pattern2_0);
        if pattern3_1 == pattern3_0 {
            // Rule at src/isa/s390x/inst.isle line 3075.
            let expr0_0: Type = I64X2;
            let expr1_0 = constructor_vec_imm_splat(ctx, expr0_0, pattern3_0)?;
            return Some(expr1_0);
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::vr128_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 3077.
        let expr0_0 = constructor_vec_load_const(ctx, pattern1_0, pattern2_0)?;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_imm_splat.
pub fn constructor_vec_imm_splat<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 16i128 as u32 {
            let pattern3_0 = arg1;
            let (pattern4_0, pattern4_1) = C::u32_pair_split(ctx, pattern3_0);
            let (pattern5_0, pattern5_1) = C::u16_pair_split(ctx, pattern4_1);
            let (pattern6_0, pattern6_1) = C::u8_pair_split(ctx, pattern5_1);
            if pattern6_1 == pattern6_0 {
                // Rule at src/isa/s390x/inst.isle line 3092.
                let expr0_0: Type = I8X16;
                let expr1_0 = C::u8_as_u64(ctx, pattern6_0)?;
                let expr2_0 = constructor_vec_imm_splat(ctx, expr0_0, expr1_0)?;
                return Some(expr2_0);
            }
        }
        if pattern1_0 == 32i128 as u32 {
            let pattern3_0 = arg1;
            let (pattern4_0, pattern4_1) = C::u32_pair_split(ctx, pattern3_0);
            let (pattern5_0, pattern5_1) = C::u16_pair_split(ctx, pattern4_1);
            if pattern5_1 == pattern5_0 {
                // Rule at src/isa/s390x/inst.isle line 3094.
                let expr0_0: Type = I16X8;
                let expr1_0 = C::u16_as_u64(ctx, pattern5_0)?;
                let expr2_0 = constructor_vec_imm_splat(ctx, expr0_0, expr1_0)?;
                return Some(expr2_0);
            }
        }
        if pattern1_0 == 64i128 as u32 {
            let pattern3_0 = arg1;
            let (pattern4_0, pattern4_1) = C::u32_pair_split(ctx, pattern3_0);
            if pattern4_1 == pattern4_0 {
                // Rule at src/isa/s390x/inst.isle line 3096.
                let expr0_0: Type = I32X4;
                let expr1_0 = C::u32_as_u64(ctx, pattern4_0)?;
                let expr2_0 = constructor_vec_imm_splat(ctx, expr0_0, expr1_0)?;
                return Some(expr2_0);
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 8i128 as u32 {
            let pattern3_0 = arg1;
            // Rule at src/isa/s390x/inst.isle line 3084.
            let expr0_0 = C::u64_as_i16(ctx, pattern3_0);
            let expr1_0 = constructor_vec_imm_replicate(ctx, pattern0_0, expr0_0)?;
            return Some(expr1_0);
        }
        if pattern1_0 == 16i128 as u32 {
            let pattern3_0 = arg1;
            // Rule at src/isa/s390x/inst.isle line 3086.
            let expr0_0 = C::u64_as_i16(ctx, pattern3_0);
            let expr1_0 = constructor_vec_imm_replicate(ctx, pattern0_0, expr0_0)?;
            return Some(expr1_0);
        }
        if pattern1_0 == 32i128 as u32 {
            let pattern3_0 = arg1;
            let (pattern4_0, pattern4_1) = C::u32_pair_split(ctx, pattern3_0);
            if let Some(pattern5_0) = C::i16_from_u32(ctx, pattern4_1) {
                // Rule at src/isa/s390x/inst.isle line 3088.
                let expr0_0 = constructor_vec_imm_replicate(ctx, pattern0_0, pattern5_0)?;
                return Some(expr0_0);
            }
        }
        if pattern1_0 == 64i128 as u32 {
            let pattern3_0 = arg1;
            if let Some(pattern4_0) = C::i16_from_u64(ctx, pattern3_0) {
                // Rule at src/isa/s390x/inst.isle line 3090.
                let expr0_0 = constructor_vec_imm_replicate(ctx, pattern0_0, pattern4_0)?;
                return Some(expr0_0);
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::ty_vec128(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        if pattern2_0 == 0i128 as u64 {
            // Rule at src/isa/s390x/inst.isle line 3082.
            let expr0_0: u16 = 0i128 as u16;
            let expr1_0 = constructor_vec_imm_byte_mask(ctx, pattern1_0, expr0_0)?;
            return Some(expr1_0);
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::ty_vec128(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 3098.
        let expr0_0 = constructor_vec_load_const_replicate(ctx, pattern1_0, pattern2_0)?;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term ty_ext32.
pub fn constructor_ty_ext32<C: Context>(ctx: &mut C, arg0: Type) -> Option<Type> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        // Rule at src/isa/s390x/inst.isle line 3106.
        let expr0_0: Type = I32;
        return Some(expr0_0);
    }
    if pattern0_0 == I16 {
        // Rule at src/isa/s390x/inst.isle line 3107.
        let expr0_0: Type = I32;
        return Some(expr0_0);
    }
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/inst.isle line 3108.
        let expr0_0: Type = I32;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3109.
        let expr0_0: Type = I64;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term ty_ext64.
pub fn constructor_ty_ext64<C: Context>(ctx: &mut C, arg0: Type) -> Option<Type> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        // Rule at src/isa/s390x/inst.isle line 3113.
        let expr0_0: Type = I64;
        return Some(expr0_0);
    }
    if pattern0_0 == I16 {
        // Rule at src/isa/s390x/inst.isle line 3114.
        let expr0_0: Type = I64;
        return Some(expr0_0);
    }
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/inst.isle line 3115.
        let expr0_0: Type = I64;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3116.
        let expr0_0: Type = I64;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term zext32_reg.
pub fn constructor_zext32_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 3121.
    let expr0_0: Type = I32;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0: bool = false;
    let expr3_0 = C::ty_bits(ctx, pattern0_0)?;
    let expr4_0: u8 = 32i128 as u8;
    let expr5_0 = MInst::Extend {
        rd: expr1_0,
        rn: pattern1_0,
        signed: expr2_0,
        from_bits: expr3_0,
        to_bits: expr4_0,
    };
    let expr6_0 = C::emit(ctx, &expr5_0);
    let expr7_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr7_0);
}

// Generated as internal constructor for term sext32_reg.
pub fn constructor_sext32_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 3128.
    let expr0_0: Type = I32;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0: bool = true;
    let expr3_0 = C::ty_bits(ctx, pattern0_0)?;
    let expr4_0: u8 = 32i128 as u8;
    let expr5_0 = MInst::Extend {
        rd: expr1_0,
        rn: pattern1_0,
        signed: expr2_0,
        from_bits: expr3_0,
        to_bits: expr4_0,
    };
    let expr6_0 = C::emit(ctx, &expr5_0);
    let expr7_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr7_0);
}

// Generated as internal constructor for term zext64_reg.
pub fn constructor_zext64_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 3135.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0: bool = false;
    let expr3_0 = C::ty_bits(ctx, pattern0_0)?;
    let expr4_0: u8 = 64i128 as u8;
    let expr5_0 = MInst::Extend {
        rd: expr1_0,
        rn: pattern1_0,
        signed: expr2_0,
        from_bits: expr3_0,
        to_bits: expr4_0,
    };
    let expr6_0 = C::emit(ctx, &expr5_0);
    let expr7_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr7_0);
}

// Generated as internal constructor for term sext64_reg.
pub fn constructor_sext64_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 3142.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0: bool = true;
    let expr3_0 = C::ty_bits(ctx, pattern0_0)?;
    let expr4_0: u8 = 64i128 as u8;
    let expr5_0 = MInst::Extend {
        rd: expr1_0,
        rn: pattern1_0,
        signed: expr2_0,
        from_bits: expr3_0,
        to_bits: expr4_0,
    };
    let expr6_0 = C::emit(ctx, &expr5_0);
    let expr7_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr7_0);
}

// Generated as internal constructor for term zext32_mem.
pub fn constructor_zext32_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 3150.
        let expr0_0: Type = I32;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = MInst::Load32ZExt8 {
            rd: expr1_0,
            mem: pattern2_0.clone(),
        };
        let expr3_0 = C::emit(ctx, &expr2_0);
        let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
        return Some(expr4_0);
    }
    if pattern0_0 == I16 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 3154.
        let expr0_0: Type = I32;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = MInst::Load32ZExt16 {
            rd: expr1_0,
            mem: pattern2_0.clone(),
        };
        let expr3_0 = C::emit(ctx, &expr2_0);
        let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
        return Some(expr4_0);
    }
    return None;
}

// Generated as internal constructor for term sext32_mem.
pub fn constructor_sext32_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 3161.
        let expr0_0: Type = I32;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = MInst::Load32SExt8 {
            rd: expr1_0,
            mem: pattern2_0.clone(),
        };
        let expr3_0 = C::emit(ctx, &expr2_0);
        let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
        return Some(expr4_0);
    }
    if pattern0_0 == I16 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 3165.
        let expr0_0: Type = I32;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = MInst::Load32SExt16 {
            rd: expr1_0,
            mem: pattern2_0.clone(),
        };
        let expr3_0 = C::emit(ctx, &expr2_0);
        let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
        return Some(expr4_0);
    }
    return None;
}

// Generated as internal constructor for term zext64_mem.
pub fn constructor_zext64_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 3172.
        let expr0_0: Type = I64;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = MInst::Load64ZExt8 {
            rd: expr1_0,
            mem: pattern2_0.clone(),
        };
        let expr3_0 = C::emit(ctx, &expr2_0);
        let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
        return Some(expr4_0);
    }
    if pattern0_0 == I16 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 3176.
        let expr0_0: Type = I64;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = MInst::Load64ZExt16 {
            rd: expr1_0,
            mem: pattern2_0.clone(),
        };
        let expr3_0 = C::emit(ctx, &expr2_0);
        let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
        return Some(expr4_0);
    }
    if pattern0_0 == I32 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 3180.
        let expr0_0: Type = I64;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = MInst::Load64ZExt32 {
            rd: expr1_0,
            mem: pattern2_0.clone(),
        };
        let expr3_0 = C::emit(ctx, &expr2_0);
        let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
        return Some(expr4_0);
    }
    return None;
}

// Generated as internal constructor for term sext64_mem.
pub fn constructor_sext64_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 3187.
        let expr0_0: Type = I64;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = MInst::Load64SExt8 {
            rd: expr1_0,
            mem: pattern2_0.clone(),
        };
        let expr3_0 = C::emit(ctx, &expr2_0);
        let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
        return Some(expr4_0);
    }
    if pattern0_0 == I16 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 3191.
        let expr0_0: Type = I64;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = MInst::Load64SExt16 {
            rd: expr1_0,
            mem: pattern2_0.clone(),
        };
        let expr3_0 = C::emit(ctx, &expr2_0);
        let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
        return Some(expr4_0);
    }
    if pattern0_0 == I32 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 3195.
        let expr0_0: Type = I64;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = MInst::Load64SExt32 {
            rd: expr1_0,
            mem: pattern2_0.clone(),
        };
        let expr3_0 = C::emit(ctx, &expr2_0);
        let expr4_0 = C::writable_reg_to_reg(ctx, expr1_0);
        return Some(expr4_0);
    }
    return None;
}

// Generated as internal constructor for term put_in_reg_zext32.
pub fn constructor_put_in_reg_zext32<C: Context>(ctx: &mut C, arg0: Value) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::u64_from_value(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 3203.
        let expr0_0 = constructor_ty_ext32(ctx, pattern1_0)?;
        let expr1_0 = constructor_imm(ctx, expr0_0, pattern2_0)?;
        return Some(expr1_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::ty_32_or_64(ctx, pattern1_0) {
        // Rule at src/isa/s390x/inst.isle line 3209.
        let expr0_0 = C::put_in_reg(ctx, pattern0_0);
        return Some(expr0_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::fits_in_16(ctx, pattern1_0) {
        if let Some(pattern3_0) = C::sinkable_inst(ctx, pattern0_0) {
            let pattern4_0 = C::inst_data(ctx, pattern3_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::Load = pattern5_0 {
                    if let Some(()) = C::bigendian(ctx, pattern5_2) {
                        // Rule at src/isa/s390x/inst.isle line 3205.
                        let expr0_0 = constructor_sink_load(ctx, pattern3_0)?;
                        let expr1_0 = constructor_zext32_mem(ctx, pattern2_0, &expr0_0)?;
                        return Some(expr1_0);
                    }
                }
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::fits_in_16(ctx, pattern1_0) {
        // Rule at src/isa/s390x/inst.isle line 3207.
        let expr0_0 = C::put_in_reg(ctx, pattern0_0);
        let expr1_0 = constructor_zext32_reg(ctx, pattern2_0, expr0_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term put_in_reg_sext32.
pub fn constructor_put_in_reg_sext32<C: Context>(ctx: &mut C, arg0: Value) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::u64_from_signed_value(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 3214.
        let expr0_0 = constructor_ty_ext32(ctx, pattern1_0)?;
        let expr1_0 = constructor_imm(ctx, expr0_0, pattern2_0)?;
        return Some(expr1_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::ty_32_or_64(ctx, pattern1_0) {
        // Rule at src/isa/s390x/inst.isle line 3220.
        let expr0_0 = C::put_in_reg(ctx, pattern0_0);
        return Some(expr0_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::fits_in_16(ctx, pattern1_0) {
        if let Some(pattern3_0) = C::sinkable_inst(ctx, pattern0_0) {
            let pattern4_0 = C::inst_data(ctx, pattern3_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::Load = pattern5_0 {
                    if let Some(()) = C::bigendian(ctx, pattern5_2) {
                        // Rule at src/isa/s390x/inst.isle line 3216.
                        let expr0_0 = constructor_sink_load(ctx, pattern3_0)?;
                        let expr1_0 = constructor_sext32_mem(ctx, pattern2_0, &expr0_0)?;
                        return Some(expr1_0);
                    }
                }
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::fits_in_16(ctx, pattern1_0) {
        // Rule at src/isa/s390x/inst.isle line 3218.
        let expr0_0 = C::put_in_reg(ctx, pattern0_0);
        let expr1_0 = constructor_sext32_reg(ctx, pattern2_0, expr0_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term put_in_reg_zext64.
pub fn constructor_put_in_reg_zext64<C: Context>(ctx: &mut C, arg0: Value) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::u64_from_value(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 3225.
        let expr0_0 = constructor_ty_ext64(ctx, pattern1_0)?;
        let expr1_0 = constructor_imm(ctx, expr0_0, pattern2_0)?;
        return Some(expr1_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::gpr64_ty(ctx, pattern1_0) {
        // Rule at src/isa/s390x/inst.isle line 3231.
        let expr0_0 = C::put_in_reg(ctx, pattern0_0);
        return Some(expr0_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::gpr32_ty(ctx, pattern1_0) {
        if let Some(pattern3_0) = C::sinkable_inst(ctx, pattern0_0) {
            let pattern4_0 = C::inst_data(ctx, pattern3_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::Load = pattern5_0 {
                    if let Some(()) = C::bigendian(ctx, pattern5_2) {
                        // Rule at src/isa/s390x/inst.isle line 3227.
                        let expr0_0 = constructor_sink_load(ctx, pattern3_0)?;
                        let expr1_0 = constructor_zext64_mem(ctx, pattern2_0, &expr0_0)?;
                        return Some(expr1_0);
                    }
                }
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::gpr32_ty(ctx, pattern1_0) {
        // Rule at src/isa/s390x/inst.isle line 3229.
        let expr0_0 = C::put_in_reg(ctx, pattern0_0);
        let expr1_0 = constructor_zext64_reg(ctx, pattern2_0, expr0_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term put_in_reg_sext64.
pub fn constructor_put_in_reg_sext64<C: Context>(ctx: &mut C, arg0: Value) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::u64_from_signed_value(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 3236.
        let expr0_0 = constructor_ty_ext64(ctx, pattern1_0)?;
        let expr1_0 = constructor_imm(ctx, expr0_0, pattern2_0)?;
        return Some(expr1_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::gpr64_ty(ctx, pattern1_0) {
        // Rule at src/isa/s390x/inst.isle line 3242.
        let expr0_0 = C::put_in_reg(ctx, pattern0_0);
        return Some(expr0_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::gpr32_ty(ctx, pattern1_0) {
        if let Some(pattern3_0) = C::sinkable_inst(ctx, pattern0_0) {
            let pattern4_0 = C::inst_data(ctx, pattern3_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::Load = pattern5_0 {
                    if let Some(()) = C::bigendian(ctx, pattern5_2) {
                        // Rule at src/isa/s390x/inst.isle line 3238.
                        let expr0_0 = constructor_sink_load(ctx, pattern3_0)?;
                        let expr1_0 = constructor_sext64_mem(ctx, pattern2_0, &expr0_0)?;
                        return Some(expr1_0);
                    }
                }
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::gpr32_ty(ctx, pattern1_0) {
        // Rule at src/isa/s390x/inst.isle line 3240.
        let expr0_0 = C::put_in_reg(ctx, pattern0_0);
        let expr1_0 = constructor_sext64_reg(ctx, pattern2_0, expr0_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term cmov_imm.
pub fn constructor_cmov_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: i16,
    arg3: Reg,
) -> Option<ConsumesFlags> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr64_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 3254.
        let expr0_0 = C::temp_writable_reg(ctx, pattern1_0);
        let expr1_0 = MInst::CMov64SImm16 {
            rd: expr0_0,
            cond: pattern2_0.clone(),
            ri: pattern4_0,
            imm: pattern3_0,
        };
        let expr2_0 = C::writable_reg_to_reg(ctx, expr0_0);
        let expr3_0 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: expr1_0,
            result: expr2_0,
        };
        return Some(expr3_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr32_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 3250.
        let expr0_0 = C::temp_writable_reg(ctx, pattern1_0);
        let expr1_0 = MInst::CMov32SImm16 {
            rd: expr0_0,
            cond: pattern2_0.clone(),
            ri: pattern4_0,
            imm: pattern3_0,
        };
        let expr2_0 = C::writable_reg_to_reg(ctx, expr0_0);
        let expr3_0 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: expr1_0,
            result: expr2_0,
        };
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term cmov_imm_imm.
pub fn constructor_cmov_imm_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: i16,
    arg3: i16,
) -> Option<ConsumesFlags> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr64_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 3268.
        let expr0_0 = C::temp_writable_reg(ctx, pattern1_0);
        let expr1_0 = C::temp_writable_reg(ctx, pattern1_0);
        let expr2_0 = MInst::Mov64SImm16 {
            rd: expr0_0,
            imm: pattern4_0,
        };
        let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
        let expr4_0 = MInst::CMov64SImm16 {
            rd: expr1_0,
            cond: pattern2_0.clone(),
            ri: expr3_0,
            imm: pattern3_0,
        };
        let expr5_0 = C::writable_reg_to_reg(ctx, expr1_0);
        let expr6_0 = C::value_reg(ctx, expr5_0);
        let expr7_0 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: expr2_0,
            inst2: expr4_0,
            result: expr6_0,
        };
        return Some(expr7_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr32_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 3261.
        let expr0_0 = C::temp_writable_reg(ctx, pattern1_0);
        let expr1_0 = C::temp_writable_reg(ctx, pattern1_0);
        let expr2_0 = MInst::Mov32SImm16 {
            rd: expr0_0,
            imm: pattern4_0,
        };
        let expr3_0 = C::writable_reg_to_reg(ctx, expr0_0);
        let expr4_0 = MInst::CMov32SImm16 {
            rd: expr1_0,
            cond: pattern2_0.clone(),
            ri: expr3_0,
            imm: pattern3_0,
        };
        let expr5_0 = C::writable_reg_to_reg(ctx, expr1_0);
        let expr6_0 = C::value_reg(ctx, expr5_0);
        let expr7_0 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: expr2_0,
            inst2: expr4_0,
            result: expr6_0,
        };
        return Some(expr7_0);
    }
    return None;
}

// Generated as internal constructor for term cmov_reg_reg.
pub fn constructor_cmov_reg_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: Reg,
    arg3: Reg,
) -> Option<ConsumesFlags> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 3286.
        let expr0_0: Type = F32;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = MInst::FpuCMov32 {
            rd: expr1_0,
            cond: pattern2_0.clone(),
            ri: pattern4_0,
            rm: pattern3_0,
        };
        let expr3_0 = C::writable_reg_to_reg(ctx, expr1_0);
        let expr4_0 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: expr2_0,
            result: expr3_0,
        };
        return Some(expr4_0);
    }
    if pattern0_0 == F64 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 3290.
        let expr0_0: Type = F64;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = MInst::FpuCMov64 {
            rd: expr1_0,
            cond: pattern2_0.clone(),
            ri: pattern4_0,
            rm: pattern3_0,
        };
        let expr3_0 = C::writable_reg_to_reg(ctx, expr1_0);
        let expr4_0 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: expr2_0,
            result: expr3_0,
        };
        return Some(expr4_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr64_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 3282.
        let expr0_0 = C::temp_writable_reg(ctx, pattern1_0);
        let expr1_0 = MInst::CMov64 {
            rd: expr0_0,
            cond: pattern2_0.clone(),
            ri: pattern4_0,
            rm: pattern3_0,
        };
        let expr2_0 = C::writable_reg_to_reg(ctx, expr0_0);
        let expr3_0 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: expr1_0,
            result: expr2_0,
        };
        return Some(expr3_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr32_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 3278.
        let expr0_0 = C::temp_writable_reg(ctx, pattern1_0);
        let expr1_0 = MInst::CMov32 {
            rd: expr0_0,
            cond: pattern2_0.clone(),
            ri: pattern4_0,
            rm: pattern3_0,
        };
        let expr2_0 = C::writable_reg_to_reg(ctx, expr0_0);
        let expr3_0 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: expr1_0,
            result: expr2_0,
        };
        return Some(expr3_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::vr128_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 3294.
        let expr0_0: Type = F64;
        let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
        let expr2_0 = MInst::VecCMov {
            rd: expr1_0,
            cond: pattern2_0.clone(),
            ri: pattern4_0,
            rm: pattern3_0,
        };
        let expr3_0 = C::writable_reg_to_reg(ctx, expr1_0);
        let expr4_0 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: expr2_0,
            result: expr3_0,
        };
        return Some(expr4_0);
    }
    return None;
}

// Generated as internal constructor for term trap_if.
pub fn constructor_trap_if<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &Cond,
    arg2: &TrapCode,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3303.
    let expr0_0 = constructor_trap_if_impl(ctx, pattern1_0, pattern2_0)?;
    let expr1_0 = constructor_with_flags_side_effect(ctx, pattern0_0, &expr0_0)?;
    let expr2_0 = constructor_side_effect(ctx, &expr1_0)?;
    let expr3_0 = C::invalid_reg(ctx);
    return Some(expr3_0);
}

// Generated as internal constructor for term icmps_reg_and_trap.
pub fn constructor_icmps_reg_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/s390x/inst.isle line 3309.
    let expr0_0 = constructor_cmpop_cmps(ctx, pattern0_0)?;
    let expr1_0 = MInst::CmpTrapRR {
        op: expr0_0,
        rn: pattern1_0,
        rm: pattern2_0,
        cond: pattern3_0.clone(),
        trap_code: pattern4_0.clone(),
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::invalid_reg(ctx);
    return Some(expr3_0);
}

// Generated as internal constructor for term icmps_simm16_and_trap.
pub fn constructor_icmps_simm16_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/s390x/inst.isle line 3315.
    let expr0_0 = constructor_cmpop_cmps(ctx, pattern0_0)?;
    let expr1_0 = MInst::CmpTrapRSImm16 {
        op: expr0_0,
        rn: pattern1_0,
        imm: pattern2_0,
        cond: pattern3_0.clone(),
        trap_code: pattern4_0.clone(),
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::invalid_reg(ctx);
    return Some(expr3_0);
}

// Generated as internal constructor for term icmpu_reg_and_trap.
pub fn constructor_icmpu_reg_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/s390x/inst.isle line 3321.
    let expr0_0 = constructor_cmpop_cmpu(ctx, pattern0_0)?;
    let expr1_0 = MInst::CmpTrapRR {
        op: expr0_0,
        rn: pattern1_0,
        rm: pattern2_0,
        cond: pattern3_0.clone(),
        trap_code: pattern4_0.clone(),
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::invalid_reg(ctx);
    return Some(expr3_0);
}

// Generated as internal constructor for term icmpu_uimm16_and_trap.
pub fn constructor_icmpu_uimm16_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u16,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/s390x/inst.isle line 3327.
    let expr0_0 = constructor_cmpop_cmpu(ctx, pattern0_0)?;
    let expr1_0 = MInst::CmpTrapRUImm16 {
        op: expr0_0,
        rn: pattern1_0,
        imm: pattern2_0,
        cond: pattern3_0.clone(),
        trap_code: pattern4_0.clone(),
    };
    let expr2_0 = C::emit(ctx, &expr1_0);
    let expr3_0 = C::invalid_reg(ctx);
    return Some(expr3_0);
}

// Generated as internal constructor for term trap_impl.
pub fn constructor_trap_impl<C: Context>(
    ctx: &mut C,
    arg0: &TrapCode,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/inst.isle line 3333.
    let expr0_0 = MInst::Trap {
        trap_code: pattern0_0.clone(),
    };
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term trap_if_impl.
pub fn constructor_trap_if_impl<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: &TrapCode,
) -> Option<ConsumesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 3337.
    let expr0_0 = MInst::TrapIf {
        cond: pattern0_0.clone(),
        trap_code: pattern1_0.clone(),
    };
    let expr1_0 = ConsumesFlags::ConsumesFlagsSideEffect { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term debugtrap_impl.
pub fn constructor_debugtrap_impl<C: Context>(ctx: &mut C) -> Option<SideEffectNoResult> {
    // Rule at src/isa/s390x/inst.isle line 3341.
    let expr0_0 = MInst::Debugtrap;
    let expr1_0 = SideEffectNoResult::Inst { inst: expr0_0 };
    return Some(expr1_0);
}

// Generated as internal constructor for term bool.
pub fn constructor_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &Cond,
) -> Option<ProducesBool> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 3352.
    let expr0_0 = ProducesBool::ProducesBool {
        producer: pattern0_0.clone(),
        cond: pattern1_0.clone(),
    };
    return Some(expr0_0);
}

// Generated as internal constructor for term invert_bool.
pub fn constructor_invert_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesBool,
) -> Option<ProducesBool> {
    let pattern0_0 = arg0;
    if let &ProducesBool::ProducesBool {
        producer: ref pattern1_0,
        cond: ref pattern1_1,
    } = pattern0_0
    {
        // Rule at src/isa/s390x/inst.isle line 3356.
        let expr0_0 = C::invert_cond(ctx, pattern1_1);
        let expr1_0 = constructor_bool(ctx, pattern1_0, &expr0_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term select_bool_reg.
pub fn constructor_select_bool_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
    arg2: Reg,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let &ProducesBool::ProducesBool {
        producer: ref pattern2_0,
        cond: ref pattern2_1,
    } = pattern1_0
    {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 3361.
        let expr0_0 =
            constructor_cmov_reg_reg(ctx, pattern0_0, pattern2_1, pattern3_0, pattern4_0)?;
        let expr1_0 = constructor_with_flags_reg(ctx, pattern2_0, &expr0_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term select_bool_imm.
pub fn constructor_select_bool_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
    arg2: i16,
    arg3: i16,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let &ProducesBool::ProducesBool {
        producer: ref pattern2_0,
        cond: ref pattern2_1,
    } = pattern1_0
    {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 3366.
        let expr0_0 =
            constructor_cmov_imm_imm(ctx, pattern0_0, pattern2_1, pattern3_0, pattern4_0)?;
        let expr1_0 = constructor_with_flags_reg(ctx, pattern2_0, &expr0_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term lower_bool.
pub fn constructor_lower_bool<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 3372.
        let expr0_0: Type = I8;
        let expr1_0: i16 = 1i128 as i16;
        let expr2_0: i16 = 0i128 as i16;
        let expr3_0 = constructor_select_bool_imm(ctx, expr0_0, pattern2_0, expr1_0, expr2_0)?;
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term lower_bool_to_mask.
pub fn constructor_lower_bool_to_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == I128 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 3379.
        let expr0_0: Type = I64;
        let expr1_0 = constructor_lower_bool_to_mask(ctx, expr0_0, pattern2_0)?;
        let expr2_0: Type = I128;
        let expr3_0 = constructor_mov_to_vec128(ctx, expr2_0, expr1_0, expr1_0)?;
        return Some(expr3_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::fits_in_64(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 3376.
        let expr0_0: i16 = -1i128 as i16;
        let expr1_0: i16 = 0i128 as i16;
        let expr2_0 = constructor_select_bool_imm(ctx, pattern1_0, pattern2_0, expr0_0, expr1_0)?;
        return Some(expr2_0);
    }
    return None;
}

// Generated as internal constructor for term cond_br_bool.
pub fn constructor_cond_br_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesBool,
    arg1: MachLabel,
    arg2: MachLabel,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    if let &ProducesBool::ProducesBool {
        producer: ref pattern1_0,
        cond: ref pattern1_1,
    } = pattern0_0
    {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 3385.
        let expr0_0 = constructor_cond_br(ctx, pattern2_0, pattern3_0, pattern1_1)?;
        let expr1_0 = constructor_with_flags_side_effect(ctx, pattern1_0, &expr0_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term oneway_cond_br_bool.
pub fn constructor_oneway_cond_br_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesBool,
    arg1: MachLabel,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    if let &ProducesBool::ProducesBool {
        producer: ref pattern1_0,
        cond: ref pattern1_1,
    } = pattern0_0
    {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 3390.
        let expr0_0 = constructor_oneway_cond_br(ctx, pattern2_0, pattern1_1)?;
        let expr1_0 = constructor_with_flags_side_effect(ctx, pattern1_0, &expr0_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term trap_if_bool.
pub fn constructor_trap_if_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesBool,
    arg1: &TrapCode,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    if let &ProducesBool::ProducesBool {
        producer: ref pattern1_0,
        cond: ref pattern1_1,
    } = pattern0_0
    {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 3395.
        let expr0_0 = constructor_trap_if_impl(ctx, pattern1_1, pattern2_0)?;
        let expr1_0 = constructor_with_flags_side_effect(ctx, pattern1_0, &expr0_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term casloop_val_reg.
pub fn constructor_casloop_val_reg<C: Context>(ctx: &mut C) -> Option<WritableReg> {
    // Rule at src/isa/s390x/inst.isle line 3408.
    let expr0_0: u8 = 0i128 as u8;
    let expr1_0 = C::writable_gpr(ctx, expr0_0);
    return Some(expr1_0);
}

// Generated as internal constructor for term casloop_tmp_reg.
pub fn constructor_casloop_tmp_reg<C: Context>(ctx: &mut C) -> Option<WritableReg> {
    // Rule at src/isa/s390x/inst.isle line 3412.
    let expr0_0: u8 = 1i128 as u8;
    let expr1_0 = C::writable_gpr(ctx, expr0_0);
    return Some(expr1_0);
}

// Generated as internal constructor for term casloop_emit.
pub fn constructor_casloop_emit<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> Option<PReg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/s390x/inst.isle line 3421.
    let expr0_0: i64 = 0i128 as i64;
    let expr1_0: u8 = 0i128 as u8;
    let expr2_0 = C::memarg_reg_plus_off(ctx, pattern3_0, expr0_0, expr1_0, pattern2_0);
    let expr3_0 = constructor_ty_ext32(ctx, pattern1_0)?;
    let expr4_0 = constructor_casloop_val_reg(ctx)?;
    let expr5_0 =
        constructor_push_atomic_cas(ctx, pattern0_0, expr3_0, expr4_0, pattern4_0, &expr2_0)?;
    let expr6_0 = constructor_ty_ext32(ctx, pattern1_0)?;
    let expr7_0 = constructor_casloop_val_reg(ctx)?;
    let expr8_0 = constructor_emit_load(ctx, expr6_0, expr7_0, &expr2_0)?;
    let expr9_0 = IntCC::NotEqual;
    let expr10_0 = C::intcc_as_cond(ctx, &expr9_0);
    let expr11_0 = constructor_emit_loop(ctx, pattern0_0, &expr10_0)?;
    let expr12_0 = C::preg_gpr_0(ctx);
    return Some(expr12_0);
}

// Generated as internal constructor for term casloop_result.
pub fn constructor_casloop_result<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: PReg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::ty_32_or_64(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        if let Some(()) = C::bigendian(ctx, pattern2_0) {
            let pattern4_0 = arg2;
            // Rule at src/isa/s390x/inst.isle line 3443.
            let expr0_0 = constructor_mov_preg(ctx, pattern4_0)?;
            return Some(expr0_0);
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::ty_32_or_64(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        if let Some(()) = C::littleendian(ctx, pattern2_0) {
            let pattern4_0 = arg2;
            // Rule at src/isa/s390x/inst.isle line 3445.
            let expr0_0 = C::preg_to_reg(ctx, pattern4_0);
            let expr1_0 = constructor_bswap_reg(ctx, pattern1_0, expr0_0)?;
            return Some(expr1_0);
        }
    }
    return None;
}

// Generated as internal constructor for term casloop.
pub fn constructor_casloop<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/s390x/inst.isle line 3450.
    let expr0_0 = constructor_casloop_emit(
        ctx, pattern0_0, pattern1_0, pattern2_0, pattern3_0, pattern4_0,
    )?;
    let expr1_0 = constructor_casloop_result(ctx, pattern1_0, pattern2_0, expr0_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term casloop_bitshift.
pub fn constructor_casloop_bitshift<C: Context>(ctx: &mut C, arg0: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/inst.isle line 3465.
    let expr0_0: Type = I32;
    let expr1_0: u8 = 3i128 as u8;
    let expr2_0 = constructor_lshl_imm(ctx, expr0_0, pattern0_0, expr1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term casloop_aligned_addr.
pub fn constructor_casloop_aligned_addr<C: Context>(ctx: &mut C, arg0: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/inst.isle line 3470.
    let expr0_0: Type = I64;
    let expr1_0: u16 = 65532i128 as u16;
    let expr2_0: u8 = 0i128 as u8;
    let expr3_0 = C::uimm16shifted(ctx, expr1_0, expr2_0);
    let expr4_0 = constructor_and_uimm16shifted(ctx, expr0_0, pattern0_0, expr3_0)?;
    return Some(expr4_0);
}

// Generated as internal constructor for term casloop_rotate_in.
pub fn constructor_casloop_rotate_in<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if pattern1_0 == I16 {
        let pattern3_0 = arg2;
        if let Some(()) = C::bigendian(ctx, pattern3_0) {
            let pattern5_0 = arg3;
            let pattern6_0 = arg4;
            // Rule at src/isa/s390x/inst.isle line 3482.
            let expr0_0: Type = I32;
            let expr1_0 = constructor_casloop_tmp_reg(ctx)?;
            let expr2_0: u8 = 0i128 as u8;
            let expr3_0 = constructor_push_rot_imm_reg(
                ctx, pattern0_0, expr0_0, expr1_0, pattern6_0, expr2_0, pattern5_0,
            )?;
            return Some(expr3_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if pattern1_0 == I8 {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        // Rule at src/isa/s390x/inst.isle line 3480.
        let expr0_0: Type = I32;
        let expr1_0 = constructor_casloop_tmp_reg(ctx)?;
        let expr2_0: u8 = 0i128 as u8;
        let expr3_0 = constructor_push_rot_imm_reg(
            ctx, pattern0_0, expr0_0, expr1_0, pattern5_0, expr2_0, pattern4_0,
        )?;
        return Some(expr3_0);
    }
    if pattern1_0 == I16 {
        let pattern3_0 = arg2;
        if let Some(()) = C::littleendian(ctx, pattern3_0) {
            let pattern5_0 = arg3;
            let pattern6_0 = arg4;
            // Rule at src/isa/s390x/inst.isle line 3484.
            let expr0_0: Type = I32;
            let expr1_0 = constructor_casloop_tmp_reg(ctx)?;
            let expr2_0: u8 = 16i128 as u8;
            let expr3_0 = constructor_push_rot_imm_reg(
                ctx, pattern0_0, expr0_0, expr1_0, pattern6_0, expr2_0, pattern5_0,
            )?;
            return Some(expr3_0);
        }
    }
    return None;
}

// Generated as internal constructor for term casloop_rotate_out.
pub fn constructor_casloop_rotate_out<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if pattern1_0 == I16 {
        let pattern3_0 = arg2;
        if let Some(()) = C::bigendian(ctx, pattern3_0) {
            let pattern5_0 = arg3;
            let pattern6_0 = arg4;
            // Rule at src/isa/s390x/inst.isle line 3495.
            let expr0_0: Type = I32;
            let expr1_0 = constructor_casloop_tmp_reg(ctx)?;
            let expr2_0: u8 = 0i128 as u8;
            let expr3_0 = constructor_push_rot_imm_reg(
                ctx, pattern0_0, expr0_0, expr1_0, pattern6_0, expr2_0, pattern5_0,
            )?;
            return Some(expr3_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if pattern1_0 == I8 {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        // Rule at src/isa/s390x/inst.isle line 3493.
        let expr0_0: Type = I32;
        let expr1_0 = constructor_casloop_tmp_reg(ctx)?;
        let expr2_0: u8 = 0i128 as u8;
        let expr3_0: Type = I32;
        let expr4_0 = constructor_neg_reg(ctx, expr3_0, pattern4_0)?;
        let expr5_0 = constructor_push_rot_imm_reg(
            ctx, pattern0_0, expr0_0, expr1_0, pattern5_0, expr2_0, expr4_0,
        )?;
        return Some(expr5_0);
    }
    if pattern1_0 == I16 {
        let pattern3_0 = arg2;
        if let Some(()) = C::littleendian(ctx, pattern3_0) {
            let pattern5_0 = arg3;
            let pattern6_0 = arg4;
            // Rule at src/isa/s390x/inst.isle line 3497.
            let expr0_0: Type = I32;
            let expr1_0 = constructor_casloop_tmp_reg(ctx)?;
            let expr2_0: u8 = 16i128 as u8;
            let expr3_0 = constructor_push_rot_imm_reg(
                ctx, pattern0_0, expr0_0, expr1_0, pattern6_0, expr2_0, pattern5_0,
            )?;
            return Some(expr3_0);
        }
    }
    return None;
}

// Generated as internal constructor for term casloop_rotate_result.
pub fn constructor_casloop_rotate_result<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == I16 {
        let pattern2_0 = arg1;
        if let Some(()) = C::bigendian(ctx, pattern2_0) {
            let pattern4_0 = arg2;
            let pattern5_0 = arg3;
            // Rule at src/isa/s390x/inst.isle line 3510.
            let expr0_0: Type = I32;
            let expr1_0: u8 = 16i128 as u8;
            let expr2_0 = constructor_rot_imm_reg(ctx, expr0_0, pattern5_0, expr1_0, pattern4_0)?;
            return Some(expr2_0);
        }
    }
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 3508.
        let expr0_0: Type = I32;
        let expr1_0: u8 = 8i128 as u8;
        let expr2_0 = constructor_rot_imm_reg(ctx, expr0_0, pattern4_0, expr1_0, pattern3_0)?;
        return Some(expr2_0);
    }
    if pattern0_0 == I16 {
        let pattern2_0 = arg1;
        if let Some(()) = C::littleendian(ctx, pattern2_0) {
            let pattern4_0 = arg2;
            let pattern5_0 = arg3;
            // Rule at src/isa/s390x/inst.isle line 3512.
            let expr0_0: Type = I32;
            let expr1_0: Type = I32;
            let expr2_0 = constructor_rot_reg(ctx, expr1_0, pattern5_0, pattern4_0)?;
            let expr3_0 = constructor_bswap_reg(ctx, expr0_0, expr2_0)?;
            return Some(expr3_0);
        }
    }
    return None;
}

// Generated as internal constructor for term casloop_subword.
pub fn constructor_casloop_subword<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
    arg5: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    let pattern5_0 = arg5;
    // Rule at src/isa/s390x/inst.isle line 3517.
    let expr0_0 = constructor_casloop_emit(
        ctx, pattern0_0, pattern1_0, pattern2_0, pattern3_0, pattern5_0,
    )?;
    let expr1_0 = C::preg_to_reg(ctx, expr0_0);
    let expr2_0 =
        constructor_casloop_rotate_result(ctx, pattern1_0, pattern2_0, pattern4_0, expr1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term writable_link_reg.
pub fn constructor_writable_link_reg<C: Context>(ctx: &mut C) -> Option<WritableReg> {
    // Rule at src/isa/s390x/inst.isle line 3566.
    let expr0_0: u8 = 14i128 as u8;
    let expr1_0 = C::writable_gpr(ctx, expr0_0);
    return Some(expr1_0);
}

// Generated as internal constructor for term abi_call.
pub fn constructor_abi_call<C: Context>(
    ctx: &mut C,
    arg0: &Sig,
    arg1: ExternalName,
    arg2: &CallArgList,
    arg3: &CallRetList,
    arg4: &Opcode,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/s390x/inst.isle line 3569.
    let expr0_0 = constructor_writable_link_reg(ctx)?;
    let expr1_0 = C::abi_call_info(
        ctx, pattern0_0, pattern1_0, pattern2_0, pattern3_0, pattern4_0,
    );
    let expr2_0 = constructor_call_impl(ctx, expr0_0, expr1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term abi_call_ind.
pub fn constructor_abi_call_ind<C: Context>(
    ctx: &mut C,
    arg0: &Sig,
    arg1: Reg,
    arg2: &CallArgList,
    arg3: &CallRetList,
    arg4: &Opcode,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/s390x/inst.isle line 3573.
    let expr0_0 = constructor_writable_link_reg(ctx)?;
    let expr1_0 = C::abi_call_ind_info(
        ctx, pattern0_0, pattern1_0, pattern2_0, pattern3_0, pattern4_0,
    );
    let expr2_0 = constructor_call_ind_impl(ctx, expr0_0, expr1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term lib_call.
pub fn constructor_lib_call<C: Context>(
    ctx: &mut C,
    arg0: &LibCallInfo,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/inst.isle line 3597.
    let expr0_0 = constructor_writable_link_reg(ctx)?;
    let expr1_0 = C::lib_call_info(ctx, pattern0_0);
    let expr2_0 = constructor_call_impl(ctx, expr0_0, expr1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term vec_widen_type.
pub fn constructor_vec_widen_type<C: Context>(ctx: &mut C, arg0: Type) -> Option<Type> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 3607.
        let expr0_0: Type = I16X8;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 3608.
        let expr0_0: Type = I32X4;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 3609.
        let expr0_0: Type = I64X2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vecop_pack.
pub fn constructor_vecop_pack<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecBinaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 3612.
        let expr0_0 = VecBinaryOp::Pack16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 3613.
        let expr0_0 = VecBinaryOp::Pack32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == I64X2 {
        // Rule at src/isa/s390x/inst.isle line 3614.
        let expr0_0 = VecBinaryOp::Pack64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_pack.
pub fn constructor_vec_pack<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3617.
    let expr0_0 = constructor_vecop_pack(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_pack_ssat.
pub fn constructor_vecop_pack_ssat<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecBinaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 3620.
        let expr0_0 = VecBinaryOp::PackSSat16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 3621.
        let expr0_0 = VecBinaryOp::PackSSat32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == I64X2 {
        // Rule at src/isa/s390x/inst.isle line 3622.
        let expr0_0 = VecBinaryOp::PackSSat64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_pack_ssat.
pub fn constructor_vec_pack_ssat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3625.
    let expr0_0 = constructor_vecop_pack_ssat(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_pack_usat.
pub fn constructor_vecop_pack_usat<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecBinaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 3628.
        let expr0_0 = VecBinaryOp::PackUSat16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 3629.
        let expr0_0 = VecBinaryOp::PackUSat32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == I64X2 {
        // Rule at src/isa/s390x/inst.isle line 3630.
        let expr0_0 = VecBinaryOp::PackUSat64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_pack_usat.
pub fn constructor_vec_pack_usat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3633.
    let expr0_0 = constructor_vecop_pack_usat(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_unpacks_low.
pub fn constructor_vecop_unpacks_low<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecUnaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 3636.
        let expr0_0 = VecUnaryOp::UnpackSLow8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 3637.
        let expr0_0 = VecUnaryOp::UnpackSLow16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 3638.
        let expr0_0 = VecUnaryOp::UnpackSLow32x4;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_unpacks_low.
pub fn constructor_vec_unpacks_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 3641.
    let expr0_0 = constructor_vecop_unpacks_low(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rr(ctx, pattern0_0, &expr0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_unpacks_high.
pub fn constructor_vecop_unpacks_high<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecUnaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 3644.
        let expr0_0 = VecUnaryOp::UnpackSHigh8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 3645.
        let expr0_0 = VecUnaryOp::UnpackSHigh16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 3646.
        let expr0_0 = VecUnaryOp::UnpackSHigh32x4;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_unpacks_high.
pub fn constructor_vec_unpacks_high<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 3649.
    let expr0_0 = constructor_vecop_unpacks_high(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rr(ctx, pattern0_0, &expr0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_unpacku_low.
pub fn constructor_vecop_unpacku_low<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecUnaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 3652.
        let expr0_0 = VecUnaryOp::UnpackULow8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 3653.
        let expr0_0 = VecUnaryOp::UnpackULow16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 3654.
        let expr0_0 = VecUnaryOp::UnpackULow32x4;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_unpacku_low.
pub fn constructor_vec_unpacku_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 3657.
    let expr0_0 = constructor_vecop_unpacku_low(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rr(ctx, pattern0_0, &expr0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_unpacku_high.
pub fn constructor_vecop_unpacku_high<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecUnaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 3660.
        let expr0_0 = VecUnaryOp::UnpackUHigh8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 3661.
        let expr0_0 = VecUnaryOp::UnpackUHigh16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 3662.
        let expr0_0 = VecUnaryOp::UnpackUHigh32x4;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_unpacku_high.
pub fn constructor_vec_unpacku_high<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 3665.
    let expr0_0 = constructor_vecop_unpacku_high(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rr(ctx, pattern0_0, &expr0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vec_pack_lane_order.
pub fn constructor_vec_pack_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let mut closure3 = || {
        let expr0_0 = C::lane_order(ctx)?;
        return Some(expr0_0);
    };
    if let Some(pattern3_0) = closure3() {
        if let &LaneOrder::BigEndian = &pattern3_0 {
            // Rule at src/isa/s390x/inst.isle line 3673.
            let expr0_0 = constructor_vec_pack(ctx, pattern0_0, pattern1_0, pattern2_0)?;
            return Some(expr0_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let mut closure3 = || {
        let expr0_0 = C::lane_order(ctx)?;
        return Some(expr0_0);
    };
    if let Some(pattern3_0) = closure3() {
        if let &LaneOrder::LittleEndian = &pattern3_0 {
            // Rule at src/isa/s390x/inst.isle line 3676.
            let expr0_0 = constructor_vec_pack(ctx, pattern0_0, pattern2_0, pattern1_0)?;
            return Some(expr0_0);
        }
    }
    return None;
}

// Generated as internal constructor for term vec_pack_ssat_lane_order.
pub fn constructor_vec_pack_ssat_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let mut closure3 = || {
        let expr0_0 = C::lane_order(ctx)?;
        return Some(expr0_0);
    };
    if let Some(pattern3_0) = closure3() {
        if let &LaneOrder::BigEndian = &pattern3_0 {
            // Rule at src/isa/s390x/inst.isle line 3681.
            let expr0_0 = constructor_vec_pack_ssat(ctx, pattern0_0, pattern1_0, pattern2_0)?;
            return Some(expr0_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let mut closure3 = || {
        let expr0_0 = C::lane_order(ctx)?;
        return Some(expr0_0);
    };
    if let Some(pattern3_0) = closure3() {
        if let &LaneOrder::LittleEndian = &pattern3_0 {
            // Rule at src/isa/s390x/inst.isle line 3684.
            let expr0_0 = constructor_vec_pack_ssat(ctx, pattern0_0, pattern2_0, pattern1_0)?;
            return Some(expr0_0);
        }
    }
    return None;
}

// Generated as internal constructor for term vec_pack_usat_lane_order.
pub fn constructor_vec_pack_usat_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let mut closure3 = || {
        let expr0_0 = C::lane_order(ctx)?;
        return Some(expr0_0);
    };
    if let Some(pattern3_0) = closure3() {
        if let &LaneOrder::BigEndian = &pattern3_0 {
            // Rule at src/isa/s390x/inst.isle line 3689.
            let expr0_0 = constructor_vec_pack_usat(ctx, pattern0_0, pattern1_0, pattern2_0)?;
            return Some(expr0_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let mut closure3 = || {
        let expr0_0 = C::lane_order(ctx)?;
        return Some(expr0_0);
    };
    if let Some(pattern3_0) = closure3() {
        if let &LaneOrder::LittleEndian = &pattern3_0 {
            // Rule at src/isa/s390x/inst.isle line 3692.
            let expr0_0 = constructor_vec_pack_usat(ctx, pattern0_0, pattern2_0, pattern1_0)?;
            return Some(expr0_0);
        }
    }
    return None;
}

// Generated as internal constructor for term vec_unpacks_low_lane_order.
pub fn constructor_vec_unpacks_low_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let mut closure2 = || {
        let expr0_0 = C::lane_order(ctx)?;
        return Some(expr0_0);
    };
    if let Some(pattern2_0) = closure2() {
        if let &LaneOrder::BigEndian = &pattern2_0 {
            // Rule at src/isa/s390x/inst.isle line 3702.
            let expr0_0 = constructor_vec_unpacks_high(ctx, pattern0_0, pattern1_0)?;
            return Some(expr0_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let mut closure2 = || {
        let expr0_0 = C::lane_order(ctx)?;
        return Some(expr0_0);
    };
    if let Some(pattern2_0) = closure2() {
        if let &LaneOrder::LittleEndian = &pattern2_0 {
            // Rule at src/isa/s390x/inst.isle line 3705.
            let expr0_0 = constructor_vec_unpacks_low(ctx, pattern0_0, pattern1_0)?;
            return Some(expr0_0);
        }
    }
    return None;
}

// Generated as internal constructor for term vec_unpacks_high_lane_order.
pub fn constructor_vec_unpacks_high_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let mut closure2 = || {
        let expr0_0 = C::lane_order(ctx)?;
        return Some(expr0_0);
    };
    if let Some(pattern2_0) = closure2() {
        if let &LaneOrder::BigEndian = &pattern2_0 {
            // Rule at src/isa/s390x/inst.isle line 3710.
            let expr0_0 = constructor_vec_unpacks_low(ctx, pattern0_0, pattern1_0)?;
            return Some(expr0_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let mut closure2 = || {
        let expr0_0 = C::lane_order(ctx)?;
        return Some(expr0_0);
    };
    if let Some(pattern2_0) = closure2() {
        if let &LaneOrder::LittleEndian = &pattern2_0 {
            // Rule at src/isa/s390x/inst.isle line 3713.
            let expr0_0 = constructor_vec_unpacks_high(ctx, pattern0_0, pattern1_0)?;
            return Some(expr0_0);
        }
    }
    return None;
}

// Generated as internal constructor for term vec_unpacku_low_lane_order.
pub fn constructor_vec_unpacku_low_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let mut closure2 = || {
        let expr0_0 = C::lane_order(ctx)?;
        return Some(expr0_0);
    };
    if let Some(pattern2_0) = closure2() {
        if let &LaneOrder::BigEndian = &pattern2_0 {
            // Rule at src/isa/s390x/inst.isle line 3718.
            let expr0_0 = constructor_vec_unpacku_high(ctx, pattern0_0, pattern1_0)?;
            return Some(expr0_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let mut closure2 = || {
        let expr0_0 = C::lane_order(ctx)?;
        return Some(expr0_0);
    };
    if let Some(pattern2_0) = closure2() {
        if let &LaneOrder::LittleEndian = &pattern2_0 {
            // Rule at src/isa/s390x/inst.isle line 3721.
            let expr0_0 = constructor_vec_unpacku_low(ctx, pattern0_0, pattern1_0)?;
            return Some(expr0_0);
        }
    }
    return None;
}

// Generated as internal constructor for term vec_unpacku_high_lane_order.
pub fn constructor_vec_unpacku_high_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let mut closure2 = || {
        let expr0_0 = C::lane_order(ctx)?;
        return Some(expr0_0);
    };
    if let Some(pattern2_0) = closure2() {
        if let &LaneOrder::BigEndian = &pattern2_0 {
            // Rule at src/isa/s390x/inst.isle line 3726.
            let expr0_0 = constructor_vec_unpacku_low(ctx, pattern0_0, pattern1_0)?;
            return Some(expr0_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let mut closure2 = || {
        let expr0_0 = C::lane_order(ctx)?;
        return Some(expr0_0);
    };
    if let Some(pattern2_0) = closure2() {
        if let &LaneOrder::LittleEndian = &pattern2_0 {
            // Rule at src/isa/s390x/inst.isle line 3729.
            let expr0_0 = constructor_vec_unpacku_high(ctx, pattern0_0, pattern1_0)?;
            return Some(expr0_0);
        }
    }
    return None;
}

// Generated as internal constructor for term vecop_merge_low.
pub fn constructor_vecop_merge_low<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecBinaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 3737.
        let expr0_0 = VecBinaryOp::MergeLow8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 3738.
        let expr0_0 = VecBinaryOp::MergeLow16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 3739.
        let expr0_0 = VecBinaryOp::MergeLow32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == I64X2 {
        // Rule at src/isa/s390x/inst.isle line 3740.
        let expr0_0 = VecBinaryOp::MergeLow64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_merge_low.
pub fn constructor_vec_merge_low<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3743.
    let expr0_0 = constructor_vecop_merge_low(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_merge_high.
pub fn constructor_vecop_merge_high<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecBinaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 3746.
        let expr0_0 = VecBinaryOp::MergeHigh8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 3747.
        let expr0_0 = VecBinaryOp::MergeHigh16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 3748.
        let expr0_0 = VecBinaryOp::MergeHigh32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == I64X2 {
        // Rule at src/isa/s390x/inst.isle line 3749.
        let expr0_0 = VecBinaryOp::MergeHigh64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_merge_high.
pub fn constructor_vec_merge_high<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3752.
    let expr0_0 = constructor_vecop_merge_high(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vec_merge_low_lane_order.
pub fn constructor_vec_merge_low_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let mut closure3 = || {
        let expr0_0 = C::lane_order(ctx)?;
        return Some(expr0_0);
    };
    if let Some(pattern3_0) = closure3() {
        if let &LaneOrder::BigEndian = &pattern3_0 {
            // Rule at src/isa/s390x/inst.isle line 3763.
            let expr0_0 = constructor_vec_merge_high(ctx, pattern0_0, pattern1_0, pattern2_0)?;
            return Some(expr0_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let mut closure3 = || {
        let expr0_0 = C::lane_order(ctx)?;
        return Some(expr0_0);
    };
    if let Some(pattern3_0) = closure3() {
        if let &LaneOrder::LittleEndian = &pattern3_0 {
            // Rule at src/isa/s390x/inst.isle line 3766.
            let expr0_0 = constructor_vec_merge_low(ctx, pattern0_0, pattern2_0, pattern1_0)?;
            return Some(expr0_0);
        }
    }
    return None;
}

// Generated as internal constructor for term vec_merge_high_lane_order.
pub fn constructor_vec_merge_high_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let mut closure3 = || {
        let expr0_0 = C::lane_order(ctx)?;
        return Some(expr0_0);
    };
    if let Some(pattern3_0) = closure3() {
        if let &LaneOrder::BigEndian = &pattern3_0 {
            // Rule at src/isa/s390x/inst.isle line 3771.
            let expr0_0 = constructor_vec_merge_low(ctx, pattern0_0, pattern1_0, pattern2_0)?;
            return Some(expr0_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let mut closure3 = || {
        let expr0_0 = C::lane_order(ctx)?;
        return Some(expr0_0);
    };
    if let Some(pattern3_0) = closure3() {
        if let &LaneOrder::LittleEndian = &pattern3_0 {
            // Rule at src/isa/s390x/inst.isle line 3774.
            let expr0_0 = constructor_vec_merge_high(ctx, pattern0_0, pattern2_0, pattern1_0)?;
            return Some(expr0_0);
        }
    }
    return None;
}

// Generated as internal constructor for term clz_reg.
pub fn constructor_clz_reg<C: Context>(ctx: &mut C, arg0: i16, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == 64i128 as i16 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 3785.
        let expr0_0 = constructor_temp_writable_regpair(ctx)?;
        let expr1_0 = MInst::Flogr {
            rd: expr0_0,
            rn: pattern2_0,
        };
        let expr2_0 = C::emit(ctx, &expr1_0);
        let expr3_0 = constructor_writable_regpair_to_regpair(ctx, expr0_0)?;
        let expr4_0 = C::regpair_hi(ctx, expr3_0);
        return Some(expr4_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 3791.
    let expr0_0 = constructor_temp_writable_regpair(ctx)?;
    let expr1_0 = MInst::Flogr {
        rd: expr0_0,
        rn: pattern1_0,
    };
    let expr2_0 = ProducesFlags::ProducesFlagsSideEffect { inst: expr1_0 };
    let expr3_0: Type = I64;
    let expr4_0 = IntCC::Equal;
    let expr5_0 = C::intcc_as_cond(ctx, &expr4_0);
    let expr6_0 = constructor_writable_regpair_to_regpair(ctx, expr0_0)?;
    let expr7_0 = C::regpair_hi(ctx, expr6_0);
    let expr8_0 = constructor_cmov_imm(ctx, expr3_0, &expr5_0, pattern0_0, expr7_0)?;
    let expr9_0 = constructor_with_flags_reg(ctx, &expr2_0, &expr8_0)?;
    return Some(expr9_0);
}

// Generated as internal constructor for term vecop_clz.
pub fn constructor_vecop_clz<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecUnaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 3799.
        let expr0_0 = VecUnaryOp::Clz8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 3800.
        let expr0_0 = VecUnaryOp::Clz16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 3801.
        let expr0_0 = VecUnaryOp::Clz32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == I64X2 {
        // Rule at src/isa/s390x/inst.isle line 3802.
        let expr0_0 = VecUnaryOp::Clz64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_clz.
pub fn constructor_vec_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 3805.
    let expr0_0 = constructor_vecop_clz(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rr(ctx, pattern0_0, &expr0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_ctz.
pub fn constructor_vecop_ctz<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecUnaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 3809.
        let expr0_0 = VecUnaryOp::Ctz8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 3810.
        let expr0_0 = VecUnaryOp::Ctz16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 3811.
        let expr0_0 = VecUnaryOp::Ctz32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == I64X2 {
        // Rule at src/isa/s390x/inst.isle line 3812.
        let expr0_0 = VecUnaryOp::Ctz64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_ctz.
pub fn constructor_vec_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 3815.
    let expr0_0 = constructor_vecop_ctz(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rr(ctx, pattern0_0, &expr0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term uint_sat_reg.
pub fn constructor_uint_sat_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if pattern1_0 == pattern0_0 {
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 3821.
        return Some(pattern3_0);
    }
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        let pattern2_0 = arg1;
        if let Some(pattern3_0) = C::ty_32_or_64(ctx, pattern2_0) {
            let pattern4_0 = arg2;
            // Rule at src/isa/s390x/inst.isle line 3822.
            let expr0_0: u32 = 256i128 as u32;
            let expr1_0 = constructor_icmpu_uimm32(ctx, pattern3_0, pattern4_0, expr0_0)?;
            let expr2_0 = IntCC::UnsignedGreaterThan;
            let expr3_0 = C::intcc_as_cond(ctx, &expr2_0);
            let expr4_0: i16 = 255i128 as i16;
            let expr5_0 = constructor_cmov_imm(ctx, pattern3_0, &expr3_0, expr4_0, pattern4_0)?;
            let expr6_0 = constructor_with_flags_reg(ctx, &expr1_0, &expr5_0)?;
            return Some(expr6_0);
        }
    }
    if pattern0_0 == I16 {
        let pattern2_0 = arg1;
        if let Some(pattern3_0) = C::ty_32_or_64(ctx, pattern2_0) {
            let pattern4_0 = arg2;
            // Rule at src/isa/s390x/inst.isle line 3825.
            let expr0_0: u32 = 65535i128 as u32;
            let expr1_0 = constructor_icmpu_uimm32(ctx, pattern3_0, pattern4_0, expr0_0)?;
            let expr2_0 = IntCC::UnsignedGreaterThan;
            let expr3_0 = C::intcc_as_cond(ctx, &expr2_0);
            let expr4_0: i16 = -1i128 as i16;
            let expr5_0 = constructor_cmov_imm(ctx, pattern3_0, &expr3_0, expr4_0, pattern4_0)?;
            let expr6_0 = constructor_with_flags_reg(ctx, &expr1_0, &expr5_0)?;
            return Some(expr6_0);
        }
    }
    if pattern0_0 == I32 {
        let pattern2_0 = arg1;
        if pattern2_0 == I64 {
            let pattern4_0 = arg2;
            // Rule at src/isa/s390x/inst.isle line 3828.
            let expr0_0: Type = I64;
            let expr1_0: u64 = 4294967295i128 as u64;
            let expr2_0 = constructor_imm(ctx, expr0_0, expr1_0)?;
            let expr3_0: Type = I64;
            let expr4_0 = constructor_icmpu_reg(ctx, expr3_0, pattern4_0, expr2_0)?;
            let expr5_0 = IntCC::UnsignedGreaterThan;
            let expr6_0 = C::intcc_as_cond(ctx, &expr5_0);
            let expr7_0 = constructor_bool(ctx, &expr4_0, &expr6_0)?;
            let expr8_0: Type = I64;
            let expr9_0 = constructor_select_bool_reg(ctx, expr8_0, &expr7_0, expr2_0, pattern4_0)?;
            return Some(expr9_0);
        }
    }
    return None;
}

// Generated as internal constructor for term sint_sat_reg.
pub fn constructor_sint_sat_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if pattern1_0 == pattern0_0 {
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 3836.
        return Some(pattern3_0);
    }
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        let pattern2_0 = arg1;
        if let Some(pattern3_0) = C::ty_32_or_64(ctx, pattern2_0) {
            let pattern4_0 = arg2;
            // Rule at src/isa/s390x/inst.isle line 3837.
            let expr0_0: i16 = 127i128 as i16;
            let expr1_0 = constructor_icmps_simm16(ctx, pattern3_0, pattern4_0, expr0_0)?;
            let expr2_0 = IntCC::SignedGreaterThan;
            let expr3_0 = C::intcc_as_cond(ctx, &expr2_0);
            let expr4_0: i16 = 127i128 as i16;
            let expr5_0 = constructor_cmov_imm(ctx, pattern3_0, &expr3_0, expr4_0, pattern4_0)?;
            let expr6_0 = constructor_with_flags_reg(ctx, &expr1_0, &expr5_0)?;
            let expr7_0: i16 = -128i128 as i16;
            let expr8_0 = constructor_icmps_simm16(ctx, pattern3_0, expr6_0, expr7_0)?;
            let expr9_0 = IntCC::SignedLessThan;
            let expr10_0 = C::intcc_as_cond(ctx, &expr9_0);
            let expr11_0: i16 = -128i128 as i16;
            let expr12_0 = constructor_cmov_imm(ctx, pattern3_0, &expr10_0, expr11_0, expr6_0)?;
            let expr13_0 = constructor_with_flags_reg(ctx, &expr8_0, &expr12_0)?;
            return Some(expr13_0);
        }
    }
    if pattern0_0 == I16 {
        let pattern2_0 = arg1;
        if let Some(pattern3_0) = C::ty_32_or_64(ctx, pattern2_0) {
            let pattern4_0 = arg2;
            // Rule at src/isa/s390x/inst.isle line 3843.
            let expr0_0: i16 = 32767i128 as i16;
            let expr1_0 = constructor_icmps_simm16(ctx, pattern3_0, pattern4_0, expr0_0)?;
            let expr2_0 = IntCC::SignedGreaterThan;
            let expr3_0 = C::intcc_as_cond(ctx, &expr2_0);
            let expr4_0: i16 = 32767i128 as i16;
            let expr5_0 = constructor_cmov_imm(ctx, pattern3_0, &expr3_0, expr4_0, pattern4_0)?;
            let expr6_0 = constructor_with_flags_reg(ctx, &expr1_0, &expr5_0)?;
            let expr7_0: i16 = -32768i128 as i16;
            let expr8_0 = constructor_icmps_simm16(ctx, pattern3_0, expr6_0, expr7_0)?;
            let expr9_0 = IntCC::SignedLessThan;
            let expr10_0 = C::intcc_as_cond(ctx, &expr9_0);
            let expr11_0: i16 = -32768i128 as i16;
            let expr12_0 = constructor_cmov_imm(ctx, pattern3_0, &expr10_0, expr11_0, expr6_0)?;
            let expr13_0 = constructor_with_flags_reg(ctx, &expr8_0, &expr12_0)?;
            return Some(expr13_0);
        }
    }
    if pattern0_0 == I32 {
        let pattern2_0 = arg1;
        if pattern2_0 == I64 {
            let pattern4_0 = arg2;
            // Rule at src/isa/s390x/inst.isle line 3849.
            let expr0_0: Type = I64;
            let expr1_0: i32 = 2147483647i128 as i32;
            let expr2_0 = constructor_imm32(ctx, expr0_0, expr1_0)?;
            let expr3_0: Type = I64;
            let expr4_0 = constructor_icmps_reg(ctx, expr3_0, pattern4_0, expr2_0)?;
            let expr5_0 = IntCC::SignedGreaterThan;
            let expr6_0 = C::intcc_as_cond(ctx, &expr5_0);
            let expr7_0 = constructor_bool(ctx, &expr4_0, &expr6_0)?;
            let expr8_0: Type = I64;
            let expr9_0 = constructor_select_bool_reg(ctx, expr8_0, &expr7_0, expr2_0, pattern4_0)?;
            let expr10_0: Type = I64;
            let expr11_0: i32 = -2147483648i128 as i32;
            let expr12_0 = constructor_imm32(ctx, expr10_0, expr11_0)?;
            let expr13_0: Type = I64;
            let expr14_0 = constructor_icmps_reg(ctx, expr13_0, expr9_0, expr12_0)?;
            let expr15_0 = IntCC::SignedLessThan;
            let expr16_0 = C::intcc_as_cond(ctx, &expr15_0);
            let expr17_0 = constructor_bool(ctx, &expr14_0, &expr16_0)?;
            let expr18_0: Type = I64;
            let expr19_0 =
                constructor_select_bool_reg(ctx, expr18_0, &expr17_0, expr12_0, expr9_0)?;
            return Some(expr19_0);
        }
    }
    return None;
}

// Generated as internal constructor for term aluop_add.
pub fn constructor_aluop_add<C: Context>(ctx: &mut C, arg0: Type) -> Option<ALUOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        // Rule at src/isa/s390x/inst.isle line 3865.
        let expr0_0 = ALUOp::Add32;
        return Some(expr0_0);
    }
    if pattern0_0 == I16 {
        // Rule at src/isa/s390x/inst.isle line 3866.
        let expr0_0 = ALUOp::Add32;
        return Some(expr0_0);
    }
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/inst.isle line 3867.
        let expr0_0 = ALUOp::Add32;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3868.
        let expr0_0 = ALUOp::Add64;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term aluop_add_sext16.
pub fn constructor_aluop_add_sext16<C: Context>(ctx: &mut C, arg0: Type) -> Option<ALUOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I16 {
        // Rule at src/isa/s390x/inst.isle line 3871.
        let expr0_0 = ALUOp::Add32Ext16;
        return Some(expr0_0);
    }
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/inst.isle line 3872.
        let expr0_0 = ALUOp::Add32Ext16;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3873.
        let expr0_0 = ALUOp::Add64Ext16;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term aluop_add_sext32.
pub fn constructor_aluop_add_sext32<C: Context>(ctx: &mut C, arg0: Type) -> Option<ALUOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3876.
        let expr0_0 = ALUOp::Add64Ext32;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term add_reg.
pub fn constructor_add_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3879.
    let expr0_0 = constructor_aluop_add(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term add_reg_sext32.
pub fn constructor_add_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3882.
    let expr0_0 = constructor_aluop_add_sext32(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term add_simm16.
pub fn constructor_add_simm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3885.
    let expr0_0 = constructor_aluop_add(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rrsimm16(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term add_simm32.
pub fn constructor_add_simm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i32,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3888.
    let expr0_0 = constructor_aluop_add(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rsimm32(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term add_mem.
pub fn constructor_add_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3891.
    let expr0_0 = constructor_aluop_add(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rx(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term add_mem_sext16.
pub fn constructor_add_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3894.
    let expr0_0 = constructor_aluop_add_sext16(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rx(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term add_mem_sext32.
pub fn constructor_add_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3897.
    let expr0_0 = constructor_aluop_add_sext32(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rx(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_add.
pub fn constructor_vecop_add<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecBinaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I128 {
        // Rule at src/isa/s390x/inst.isle line 3904.
        let expr0_0 = VecBinaryOp::Add128;
        return Some(expr0_0);
    }
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 3900.
        let expr0_0 = VecBinaryOp::Add8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 3901.
        let expr0_0 = VecBinaryOp::Add16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 3902.
        let expr0_0 = VecBinaryOp::Add32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == I64X2 {
        // Rule at src/isa/s390x/inst.isle line 3903.
        let expr0_0 = VecBinaryOp::Add64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_add.
pub fn constructor_vec_add<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3907.
    let expr0_0 = constructor_vecop_add(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term aluop_add_logical.
pub fn constructor_aluop_add_logical<C: Context>(ctx: &mut C, arg0: Type) -> Option<ALUOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/inst.isle line 3913.
        let expr0_0 = ALUOp::AddLogical32;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3914.
        let expr0_0 = ALUOp::AddLogical64;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term aluop_add_logical_zext32.
pub fn constructor_aluop_add_logical_zext32<C: Context>(ctx: &mut C, arg0: Type) -> Option<ALUOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3917.
        let expr0_0 = ALUOp::AddLogical64Ext32;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term add_logical_reg.
pub fn constructor_add_logical_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3920.
    let expr0_0 = constructor_aluop_add_logical(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term add_logical_reg_with_flags_paired.
pub fn constructor_add_logical_reg_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3923.
    let expr0_0 = constructor_aluop_add_logical(ctx, pattern0_0)?;
    let expr1_0 =
        constructor_alu_rrr_with_flags_paired(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term add_logical_reg_zext32.
pub fn constructor_add_logical_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3927.
    let expr0_0 = constructor_aluop_add_logical_zext32(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term add_logical_reg_zext32_with_flags_paired.
pub fn constructor_add_logical_reg_zext32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3930.
    let expr0_0 = constructor_aluop_add_logical_zext32(ctx, pattern0_0)?;
    let expr1_0 =
        constructor_alu_rr_with_flags_paired(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term add_logical_zimm32.
pub fn constructor_add_logical_zimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3934.
    let expr0_0 = constructor_aluop_add_logical(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_ruimm32(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term add_logical_zimm32_with_flags_paired.
pub fn constructor_add_logical_zimm32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3937.
    let expr0_0 = constructor_aluop_add_logical(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_ruimm32_with_flags_paired(
        ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0,
    )?;
    return Some(expr1_0);
}

// Generated as internal constructor for term add_logical_mem.
pub fn constructor_add_logical_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3941.
    let expr0_0 = constructor_aluop_add_logical(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rx(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term add_logical_mem_with_flags_paired.
pub fn constructor_add_logical_mem_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3944.
    let expr0_0 = constructor_aluop_add_logical(ctx, pattern0_0)?;
    let expr1_0 =
        constructor_alu_rx_with_flags_paired(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term add_logical_mem_zext32.
pub fn constructor_add_logical_mem_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3948.
    let expr0_0 = constructor_aluop_add_logical_zext32(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rx(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term add_logical_mem_zext32_with_flags_paired.
pub fn constructor_add_logical_mem_zext32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3951.
    let expr0_0 = constructor_aluop_add_logical_zext32(ctx, pattern0_0)?;
    let expr1_0 =
        constructor_alu_rx_with_flags_paired(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term aluop_sub.
pub fn constructor_aluop_sub<C: Context>(ctx: &mut C, arg0: Type) -> Option<ALUOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        // Rule at src/isa/s390x/inst.isle line 3958.
        let expr0_0 = ALUOp::Sub32;
        return Some(expr0_0);
    }
    if pattern0_0 == I16 {
        // Rule at src/isa/s390x/inst.isle line 3959.
        let expr0_0 = ALUOp::Sub32;
        return Some(expr0_0);
    }
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/inst.isle line 3960.
        let expr0_0 = ALUOp::Sub32;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3961.
        let expr0_0 = ALUOp::Sub64;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term aluop_sub_sext16.
pub fn constructor_aluop_sub_sext16<C: Context>(ctx: &mut C, arg0: Type) -> Option<ALUOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I16 {
        // Rule at src/isa/s390x/inst.isle line 3964.
        let expr0_0 = ALUOp::Sub32Ext16;
        return Some(expr0_0);
    }
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/inst.isle line 3965.
        let expr0_0 = ALUOp::Sub32Ext16;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3966.
        let expr0_0 = ALUOp::Sub64Ext16;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term aluop_sub_sext32.
pub fn constructor_aluop_sub_sext32<C: Context>(ctx: &mut C, arg0: Type) -> Option<ALUOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3969.
        let expr0_0 = ALUOp::Sub64Ext32;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term sub_reg.
pub fn constructor_sub_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3972.
    let expr0_0 = constructor_aluop_sub(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term sub_reg_sext32.
pub fn constructor_sub_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3975.
    let expr0_0 = constructor_aluop_sub_sext32(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term sub_mem.
pub fn constructor_sub_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3978.
    let expr0_0 = constructor_aluop_sub(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rx(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term sub_mem_sext16.
pub fn constructor_sub_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3981.
    let expr0_0 = constructor_aluop_sub_sext16(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rx(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term sub_mem_sext32.
pub fn constructor_sub_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3984.
    let expr0_0 = constructor_aluop_sub_sext32(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rx(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_sub.
pub fn constructor_vecop_sub<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecBinaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I128 {
        // Rule at src/isa/s390x/inst.isle line 3991.
        let expr0_0 = VecBinaryOp::Sub128;
        return Some(expr0_0);
    }
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 3987.
        let expr0_0 = VecBinaryOp::Sub8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 3988.
        let expr0_0 = VecBinaryOp::Sub16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 3989.
        let expr0_0 = VecBinaryOp::Sub32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == I64X2 {
        // Rule at src/isa/s390x/inst.isle line 3990.
        let expr0_0 = VecBinaryOp::Sub64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_sub.
pub fn constructor_vec_sub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 3994.
    let expr0_0 = constructor_vecop_sub(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term aluop_sub_logical.
pub fn constructor_aluop_sub_logical<C: Context>(ctx: &mut C, arg0: Type) -> Option<ALUOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/inst.isle line 4000.
        let expr0_0 = ALUOp::SubLogical32;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4001.
        let expr0_0 = ALUOp::SubLogical64;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term aluop_sub_logical_zext32.
pub fn constructor_aluop_sub_logical_zext32<C: Context>(ctx: &mut C, arg0: Type) -> Option<ALUOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4004.
        let expr0_0 = ALUOp::SubLogical64Ext32;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term sub_logical_reg.
pub fn constructor_sub_logical_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4007.
    let expr0_0 = constructor_aluop_sub_logical(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term sub_logical_reg_zext32.
pub fn constructor_sub_logical_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4010.
    let expr0_0 = constructor_aluop_sub_logical_zext32(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term sub_logical_zimm32.
pub fn constructor_sub_logical_zimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4013.
    let expr0_0 = constructor_aluop_sub_logical(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_ruimm32(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term sub_logical_mem.
pub fn constructor_sub_logical_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4016.
    let expr0_0 = constructor_aluop_sub_logical(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rx(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term sub_logical_mem_zext32.
pub fn constructor_sub_logical_mem_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4019.
    let expr0_0 = constructor_aluop_sub_logical(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rx(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term aluop_mul.
pub fn constructor_aluop_mul<C: Context>(ctx: &mut C, arg0: Type) -> Option<ALUOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        // Rule at src/isa/s390x/inst.isle line 4025.
        let expr0_0 = ALUOp::Mul32;
        return Some(expr0_0);
    }
    if pattern0_0 == I16 {
        // Rule at src/isa/s390x/inst.isle line 4026.
        let expr0_0 = ALUOp::Mul32;
        return Some(expr0_0);
    }
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/inst.isle line 4027.
        let expr0_0 = ALUOp::Mul32;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4028.
        let expr0_0 = ALUOp::Mul64;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term aluop_mul_sext16.
pub fn constructor_aluop_mul_sext16<C: Context>(ctx: &mut C, arg0: Type) -> Option<ALUOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I16 {
        // Rule at src/isa/s390x/inst.isle line 4031.
        let expr0_0 = ALUOp::Mul32Ext16;
        return Some(expr0_0);
    }
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/inst.isle line 4032.
        let expr0_0 = ALUOp::Mul32Ext16;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4033.
        let expr0_0 = ALUOp::Mul64Ext16;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term aluop_mul_sext32.
pub fn constructor_aluop_mul_sext32<C: Context>(ctx: &mut C, arg0: Type) -> Option<ALUOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4036.
        let expr0_0 = ALUOp::Mul64Ext32;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term mul_reg.
pub fn constructor_mul_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4039.
    let expr0_0 = constructor_aluop_mul(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term mul_reg_sext32.
pub fn constructor_mul_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4042.
    let expr0_0 = constructor_aluop_mul_sext32(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term mul_simm16.
pub fn constructor_mul_simm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4045.
    let expr0_0 = constructor_aluop_mul(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rsimm16(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term mul_simm32.
pub fn constructor_mul_simm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i32,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4048.
    let expr0_0 = constructor_aluop_mul(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rsimm32(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term mul_mem.
pub fn constructor_mul_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4051.
    let expr0_0 = constructor_aluop_mul(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rx(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term mul_mem_sext16.
pub fn constructor_mul_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4054.
    let expr0_0 = constructor_aluop_mul_sext16(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rx(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term mul_mem_sext32.
pub fn constructor_mul_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4057.
    let expr0_0 = constructor_aluop_mul_sext32(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rx(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_mul.
pub fn constructor_vecop_mul<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecBinaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 4060.
        let expr0_0 = VecBinaryOp::Mul8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 4061.
        let expr0_0 = VecBinaryOp::Mul16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 4062.
        let expr0_0 = VecBinaryOp::Mul32x4;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_mul.
pub fn constructor_vec_mul<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4066.
    let expr0_0 = constructor_vecop_mul(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_umulhi.
pub fn constructor_vecop_umulhi<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecBinaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 4069.
        let expr0_0 = VecBinaryOp::UMulHi8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 4070.
        let expr0_0 = VecBinaryOp::UMulHi16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 4071.
        let expr0_0 = VecBinaryOp::UMulHi32x4;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_umulhi.
pub fn constructor_vec_umulhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4075.
    let expr0_0 = constructor_vecop_umulhi(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_smulhi.
pub fn constructor_vecop_smulhi<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecBinaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 4078.
        let expr0_0 = VecBinaryOp::SMulHi8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 4079.
        let expr0_0 = VecBinaryOp::SMulHi16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 4080.
        let expr0_0 = VecBinaryOp::SMulHi32x4;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_smulhi.
pub fn constructor_vec_smulhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4084.
    let expr0_0 = constructor_vecop_smulhi(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_umul_even.
pub fn constructor_vecop_umul_even<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecBinaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 4087.
        let expr0_0 = VecBinaryOp::UMulEven8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 4088.
        let expr0_0 = VecBinaryOp::UMulEven16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 4089.
        let expr0_0 = VecBinaryOp::UMulEven32x4;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_umul_even.
pub fn constructor_vec_umul_even<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4093.
    let expr0_0 = constructor_vecop_umul_even(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_smul_even.
pub fn constructor_vecop_smul_even<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecBinaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 4096.
        let expr0_0 = VecBinaryOp::SMulEven8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 4097.
        let expr0_0 = VecBinaryOp::SMulEven16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 4098.
        let expr0_0 = VecBinaryOp::SMulEven32x4;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_smul_even.
pub fn constructor_vec_smul_even<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4102.
    let expr0_0 = constructor_vecop_smul_even(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_umul_odd.
pub fn constructor_vecop_umul_odd<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecBinaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 4105.
        let expr0_0 = VecBinaryOp::UMulOdd8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 4106.
        let expr0_0 = VecBinaryOp::UMulOdd16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 4107.
        let expr0_0 = VecBinaryOp::UMulOdd32x4;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_umul_odd.
pub fn constructor_vec_umul_odd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4111.
    let expr0_0 = constructor_vecop_umul_odd(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_smul_odd.
pub fn constructor_vecop_smul_odd<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecBinaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 4114.
        let expr0_0 = VecBinaryOp::SMulOdd8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 4115.
        let expr0_0 = VecBinaryOp::SMulOdd16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 4116.
        let expr0_0 = VecBinaryOp::SMulOdd32x4;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_smul_odd.
pub fn constructor_vec_smul_odd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4120.
    let expr0_0 = constructor_vecop_smul_odd(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term udivmod.
pub fn constructor_udivmod<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: RegPair,
    arg2: Reg,
) -> Option<RegPair> {
    let pattern0_0 = arg0;
    if pattern0_0 == I32 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4126.
        let expr0_0 = constructor_udivmod32(ctx, pattern2_0, pattern3_0)?;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4127.
        let expr0_0 = constructor_udivmod64(ctx, pattern2_0, pattern3_0)?;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term sdivmod.
pub fn constructor_sdivmod<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<RegPair> {
    let pattern0_0 = arg0;
    if pattern0_0 == I32 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4133.
        let expr0_0 = constructor_sdivmod32(ctx, pattern2_0, pattern3_0)?;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4134.
        let expr0_0 = constructor_sdivmod64(ctx, pattern2_0, pattern3_0)?;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vecop_umax.
pub fn constructor_vecop_umax<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecBinaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 4140.
        let expr0_0 = VecBinaryOp::UMax8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 4141.
        let expr0_0 = VecBinaryOp::UMax16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 4142.
        let expr0_0 = VecBinaryOp::UMax32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == I64X2 {
        // Rule at src/isa/s390x/inst.isle line 4143.
        let expr0_0 = VecBinaryOp::UMax64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_umax.
pub fn constructor_vec_umax<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4146.
    let expr0_0 = constructor_vecop_umax(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_smax.
pub fn constructor_vecop_smax<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecBinaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 4152.
        let expr0_0 = VecBinaryOp::SMax8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 4153.
        let expr0_0 = VecBinaryOp::SMax16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 4154.
        let expr0_0 = VecBinaryOp::SMax32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == I64X2 {
        // Rule at src/isa/s390x/inst.isle line 4155.
        let expr0_0 = VecBinaryOp::SMax64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_smax.
pub fn constructor_vec_smax<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4158.
    let expr0_0 = constructor_vecop_smax(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_umin.
pub fn constructor_vecop_umin<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecBinaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 4164.
        let expr0_0 = VecBinaryOp::UMin8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 4165.
        let expr0_0 = VecBinaryOp::UMin16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 4166.
        let expr0_0 = VecBinaryOp::UMin32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == I64X2 {
        // Rule at src/isa/s390x/inst.isle line 4167.
        let expr0_0 = VecBinaryOp::UMin64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_umin.
pub fn constructor_vec_umin<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4170.
    let expr0_0 = constructor_vecop_umin(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_smin.
pub fn constructor_vecop_smin<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecBinaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 4176.
        let expr0_0 = VecBinaryOp::SMin8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 4177.
        let expr0_0 = VecBinaryOp::SMin16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 4178.
        let expr0_0 = VecBinaryOp::SMin32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == I64X2 {
        // Rule at src/isa/s390x/inst.isle line 4179.
        let expr0_0 = VecBinaryOp::SMin64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_smin.
pub fn constructor_vec_smin<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4182.
    let expr0_0 = constructor_vecop_smin(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_uavg.
pub fn constructor_vecop_uavg<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecBinaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 4188.
        let expr0_0 = VecBinaryOp::UAvg8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 4189.
        let expr0_0 = VecBinaryOp::UAvg16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 4190.
        let expr0_0 = VecBinaryOp::UAvg32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == I64X2 {
        // Rule at src/isa/s390x/inst.isle line 4191.
        let expr0_0 = VecBinaryOp::UAvg64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_uavg.
pub fn constructor_vec_uavg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4194.
    let expr0_0 = constructor_vecop_uavg(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term aluop_and.
pub fn constructor_aluop_and<C: Context>(ctx: &mut C, arg0: Type) -> Option<ALUOp> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr64_ty(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 4201.
        let expr0_0 = ALUOp::And64;
        return Some(expr0_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr32_ty(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 4200.
        let expr0_0 = ALUOp::And32;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term and_reg.
pub fn constructor_and_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4204.
    let expr0_0 = constructor_aluop_and(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term and_uimm16shifted.
pub fn constructor_and_uimm16shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm16Shifted,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4207.
    let expr0_0 = constructor_aluop_and(ctx, pattern0_0)?;
    let expr1_0 =
        constructor_alu_ruimm16shifted(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term and_uimm32shifted.
pub fn constructor_and_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm32Shifted,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4210.
    let expr0_0 = constructor_aluop_and(ctx, pattern0_0)?;
    let expr1_0 =
        constructor_alu_ruimm32shifted(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term and_mem.
pub fn constructor_and_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4213.
    let expr0_0 = constructor_aluop_and(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rx(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vec_and.
pub fn constructor_vec_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::vr128_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4216.
        let expr0_0 = VecBinaryOp::And128;
        let expr1_0 = constructor_vec_rrr(ctx, pattern1_0, &expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term aluop_or.
pub fn constructor_aluop_or<C: Context>(ctx: &mut C, arg0: Type) -> Option<ALUOp> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr64_ty(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 4223.
        let expr0_0 = ALUOp::Orr64;
        return Some(expr0_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr32_ty(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 4222.
        let expr0_0 = ALUOp::Orr32;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term or_reg.
pub fn constructor_or_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4226.
    let expr0_0 = constructor_aluop_or(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term or_uimm16shifted.
pub fn constructor_or_uimm16shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm16Shifted,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4229.
    let expr0_0 = constructor_aluop_or(ctx, pattern0_0)?;
    let expr1_0 =
        constructor_alu_ruimm16shifted(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term or_uimm32shifted.
pub fn constructor_or_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm32Shifted,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4232.
    let expr0_0 = constructor_aluop_or(ctx, pattern0_0)?;
    let expr1_0 =
        constructor_alu_ruimm32shifted(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term or_mem.
pub fn constructor_or_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4235.
    let expr0_0 = constructor_aluop_or(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rx(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vec_or.
pub fn constructor_vec_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::vr128_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4238.
        let expr0_0 = VecBinaryOp::Orr128;
        let expr1_0 = constructor_vec_rrr(ctx, pattern1_0, &expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term aluop_xor.
pub fn constructor_aluop_xor<C: Context>(ctx: &mut C, arg0: Type) -> Option<ALUOp> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr64_ty(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 4245.
        let expr0_0 = ALUOp::Xor64;
        return Some(expr0_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr32_ty(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 4244.
        let expr0_0 = ALUOp::Xor32;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term xor_reg.
pub fn constructor_xor_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4248.
    let expr0_0 = constructor_aluop_xor(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term xor_uimm32shifted.
pub fn constructor_xor_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm32Shifted,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4251.
    let expr0_0 = constructor_aluop_xor(ctx, pattern0_0)?;
    let expr1_0 =
        constructor_alu_ruimm32shifted(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term xor_mem.
pub fn constructor_xor_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4254.
    let expr0_0 = constructor_aluop_xor(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rx(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term push_xor_uimm32shifted.
pub fn constructor_push_xor_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
    arg4: UImm32Shifted,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/s390x/inst.isle line 4257.
    let expr0_0 = constructor_aluop_xor(ctx, pattern1_0)?;
    let expr1_0 = constructor_push_alu_uimm32shifted(
        ctx, pattern0_0, &expr0_0, pattern2_0, pattern3_0, pattern4_0,
    )?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vec_xor.
pub fn constructor_vec_xor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::vr128_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4261.
        let expr0_0 = VecBinaryOp::Xor128;
        let expr1_0 = constructor_vec_rrr(ctx, pattern1_0, &expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term not_reg.
pub fn constructor_not_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr64_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 4269.
        let expr0_0: u32 = 4294967295i128 as u32;
        let expr1_0: u8 = 0i128 as u8;
        let expr2_0 = C::uimm32shifted(ctx, expr0_0, expr1_0);
        let expr3_0 = constructor_xor_uimm32shifted(ctx, pattern1_0, pattern2_0, expr2_0)?;
        let expr4_0: u32 = 4294967295i128 as u32;
        let expr5_0: u8 = 32i128 as u8;
        let expr6_0 = C::uimm32shifted(ctx, expr4_0, expr5_0);
        let expr7_0 = constructor_xor_uimm32shifted(ctx, pattern1_0, expr3_0, expr6_0)?;
        return Some(expr7_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr32_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 4267.
        let expr0_0: u32 = 4294967295i128 as u32;
        let expr1_0: u8 = 0i128 as u8;
        let expr2_0 = C::uimm32shifted(ctx, expr0_0, expr1_0);
        let expr3_0 = constructor_xor_uimm32shifted(ctx, pattern1_0, pattern2_0, expr2_0)?;
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term push_not_reg.
pub fn constructor_push_not_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(pattern2_0) = C::gpr64_ty(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 4277.
        let expr0_0: u32 = 4294967295i128 as u32;
        let expr1_0: u8 = 0i128 as u8;
        let expr2_0 = C::uimm32shifted(ctx, expr0_0, expr1_0);
        let expr3_0 = constructor_push_xor_uimm32shifted(
            ctx, pattern0_0, pattern2_0, pattern3_0, pattern4_0, expr2_0,
        )?;
        let expr4_0: u32 = 4294967295i128 as u32;
        let expr5_0: u8 = 32i128 as u8;
        let expr6_0 = C::uimm32shifted(ctx, expr4_0, expr5_0);
        let expr7_0 = constructor_push_xor_uimm32shifted(
            ctx, pattern0_0, pattern2_0, pattern3_0, expr3_0, expr6_0,
        )?;
        return Some(expr7_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(pattern2_0) = C::gpr32_ty(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 4275.
        let expr0_0: u32 = 4294967295i128 as u32;
        let expr1_0: u8 = 0i128 as u8;
        let expr2_0 = C::uimm32shifted(ctx, expr0_0, expr1_0);
        let expr3_0 = constructor_push_xor_uimm32shifted(
            ctx, pattern0_0, pattern2_0, pattern3_0, pattern4_0, expr2_0,
        )?;
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term vec_not.
pub fn constructor_vec_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4282.
    let expr0_0 = constructor_vec_not_or(ctx, pattern0_0, pattern1_0, pattern1_0)?;
    return Some(expr0_0);
}

// Generated as internal constructor for term aluop_not_and.
pub fn constructor_aluop_not_and<C: Context>(ctx: &mut C, arg0: Type) -> Option<ALUOp> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr64_ty(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 4289.
        let expr0_0 = ALUOp::NotAnd64;
        return Some(expr0_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr32_ty(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 4288.
        let expr0_0 = ALUOp::NotAnd32;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term not_and_reg.
pub fn constructor_not_and_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4292.
    let expr0_0 = constructor_aluop_not_and(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vec_not_and.
pub fn constructor_vec_not_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::vr128_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4295.
        let expr0_0 = VecBinaryOp::NotAnd128;
        let expr1_0 = constructor_vec_rrr(ctx, pattern1_0, &expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term aluop_not_or.
pub fn constructor_aluop_not_or<C: Context>(ctx: &mut C, arg0: Type) -> Option<ALUOp> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr64_ty(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 4302.
        let expr0_0 = ALUOp::NotOrr64;
        return Some(expr0_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr32_ty(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 4301.
        let expr0_0 = ALUOp::NotOrr32;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term not_or_reg.
pub fn constructor_not_or_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4305.
    let expr0_0 = constructor_aluop_not_or(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vec_not_or.
pub fn constructor_vec_not_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::vr128_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4308.
        let expr0_0 = VecBinaryOp::NotOrr128;
        let expr1_0 = constructor_vec_rrr(ctx, pattern1_0, &expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term aluop_not_xor.
pub fn constructor_aluop_not_xor<C: Context>(ctx: &mut C, arg0: Type) -> Option<ALUOp> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr64_ty(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 4315.
        let expr0_0 = ALUOp::NotXor64;
        return Some(expr0_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr32_ty(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 4314.
        let expr0_0 = ALUOp::NotXor32;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term not_xor_reg.
pub fn constructor_not_xor_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4318.
    let expr0_0 = constructor_aluop_not_xor(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vec_not_xor.
pub fn constructor_vec_not_xor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::vr128_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4321.
        let expr0_0 = VecBinaryOp::NotXor128;
        let expr1_0 = constructor_vec_rrr(ctx, pattern1_0, &expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term aluop_and_not.
pub fn constructor_aluop_and_not<C: Context>(ctx: &mut C, arg0: Type) -> Option<ALUOp> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr64_ty(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 4328.
        let expr0_0 = ALUOp::AndNot64;
        return Some(expr0_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr32_ty(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 4327.
        let expr0_0 = ALUOp::AndNot32;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term and_not_reg.
pub fn constructor_and_not_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4331.
    let expr0_0 = constructor_aluop_and_not(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vec_and_not.
pub fn constructor_vec_and_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::vr128_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4334.
        let expr0_0 = VecBinaryOp::AndNot128;
        let expr1_0 = constructor_vec_rrr(ctx, pattern1_0, &expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term aluop_or_not.
pub fn constructor_aluop_or_not<C: Context>(ctx: &mut C, arg0: Type) -> Option<ALUOp> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr64_ty(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 4341.
        let expr0_0 = ALUOp::OrrNot64;
        return Some(expr0_0);
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::gpr32_ty(ctx, pattern0_0) {
        // Rule at src/isa/s390x/inst.isle line 4340.
        let expr0_0 = ALUOp::OrrNot32;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term or_not_reg.
pub fn constructor_or_not_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4344.
    let expr0_0 = constructor_aluop_or_not(ctx, pattern0_0)?;
    let expr1_0 = constructor_alu_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vec_or_not.
pub fn constructor_vec_or_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::vr128_ty(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4347.
        let expr0_0 = VecBinaryOp::OrrNot128;
        let expr1_0 = constructor_vec_rrr(ctx, pattern1_0, &expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term vec_bitpermute.
pub fn constructor_vec_bitpermute<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4353.
    let expr0_0: Type = I64X2;
    let expr1_0 = VecBinaryOp::BitPermute128;
    let expr2_0 = constructor_vec_rrr(ctx, expr0_0, &expr1_0, pattern0_0, pattern1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term unaryop_abs.
pub fn constructor_unaryop_abs<C: Context>(ctx: &mut C, arg0: Type) -> Option<UnaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/inst.isle line 4359.
        let expr0_0 = UnaryOp::Abs32;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4360.
        let expr0_0 = UnaryOp::Abs64;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term unaryop_abs_sext32.
pub fn constructor_unaryop_abs_sext32<C: Context>(ctx: &mut C, arg0: Type) -> Option<UnaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4363.
        let expr0_0 = UnaryOp::Abs64Ext32;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term abs_reg.
pub fn constructor_abs_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4366.
    let expr0_0 = constructor_unaryop_abs(ctx, pattern0_0)?;
    let expr1_0 = constructor_unary_rr(ctx, pattern0_0, &expr0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term abs_reg_sext32.
pub fn constructor_abs_reg_sext32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4369.
    let expr0_0 = constructor_unaryop_abs_sext32(ctx, pattern0_0)?;
    let expr1_0 = constructor_unary_rr(ctx, pattern0_0, &expr0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_abs.
pub fn constructor_vecop_abs<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecUnaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 4372.
        let expr0_0 = VecUnaryOp::Abs8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 4373.
        let expr0_0 = VecUnaryOp::Abs16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 4374.
        let expr0_0 = VecUnaryOp::Abs32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == I64X2 {
        // Rule at src/isa/s390x/inst.isle line 4375.
        let expr0_0 = VecUnaryOp::Abs64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_abs.
pub fn constructor_vec_abs<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4378.
    let expr0_0 = constructor_vecop_abs(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rr(ctx, pattern0_0, &expr0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term unaryop_neg.
pub fn constructor_unaryop_neg<C: Context>(ctx: &mut C, arg0: Type) -> Option<UnaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        // Rule at src/isa/s390x/inst.isle line 4384.
        let expr0_0 = UnaryOp::Neg32;
        return Some(expr0_0);
    }
    if pattern0_0 == I16 {
        // Rule at src/isa/s390x/inst.isle line 4385.
        let expr0_0 = UnaryOp::Neg32;
        return Some(expr0_0);
    }
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/inst.isle line 4386.
        let expr0_0 = UnaryOp::Neg32;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4387.
        let expr0_0 = UnaryOp::Neg64;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term unaryop_neg_sext32.
pub fn constructor_unaryop_neg_sext32<C: Context>(ctx: &mut C, arg0: Type) -> Option<UnaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4390.
        let expr0_0 = UnaryOp::Neg64Ext32;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term neg_reg.
pub fn constructor_neg_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4393.
    let expr0_0 = constructor_unaryop_neg(ctx, pattern0_0)?;
    let expr1_0 = constructor_unary_rr(ctx, pattern0_0, &expr0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term neg_reg_sext32.
pub fn constructor_neg_reg_sext32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4396.
    let expr0_0 = constructor_unaryop_neg_sext32(ctx, pattern0_0)?;
    let expr1_0 = constructor_unary_rr(ctx, pattern0_0, &expr0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_neg.
pub fn constructor_vecop_neg<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecUnaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 4399.
        let expr0_0 = VecUnaryOp::Neg8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 4400.
        let expr0_0 = VecUnaryOp::Neg16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 4401.
        let expr0_0 = VecUnaryOp::Neg32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == I64X2 {
        // Rule at src/isa/s390x/inst.isle line 4402.
        let expr0_0 = VecUnaryOp::Neg64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_neg.
pub fn constructor_vec_neg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4405.
    let expr0_0 = constructor_vecop_neg(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rr(ctx, pattern0_0, &expr0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term unaryop_bswap.
pub fn constructor_unaryop_bswap<C: Context>(ctx: &mut C, arg0: Type) -> Option<UnaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/inst.isle line 4411.
        let expr0_0 = UnaryOp::BSwap32;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4412.
        let expr0_0 = UnaryOp::BSwap64;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term bswap_reg.
pub fn constructor_bswap_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4415.
    let expr0_0 = constructor_unaryop_bswap(ctx, pattern0_0)?;
    let expr1_0 = constructor_unary_rr(ctx, pattern0_0, &expr0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term push_bswap_reg.
pub fn constructor_push_bswap_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 4418.
    let expr0_0 = constructor_unaryop_bswap(ctx, pattern1_0)?;
    let expr1_0 = constructor_push_unary(ctx, pattern0_0, &expr0_0, pattern2_0, pattern3_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term shiftop_rot.
pub fn constructor_shiftop_rot<C: Context>(ctx: &mut C, arg0: Type) -> Option<ShiftOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/inst.isle line 4424.
        let expr0_0 = ShiftOp::RotL32;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4425.
        let expr0_0 = ShiftOp::RotL64;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term rot_reg.
pub fn constructor_rot_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4428.
    let expr0_0 = constructor_shiftop_rot(ctx, pattern0_0)?;
    let expr1_0: u8 = 0i128 as u8;
    let expr2_0 = constructor_shift_rr(ctx, pattern0_0, &expr0_0, pattern1_0, expr1_0, pattern2_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term rot_imm.
pub fn constructor_rot_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4432.
    let expr0_0 = constructor_shiftop_rot(ctx, pattern0_0)?;
    let expr1_0 = C::zero_reg(ctx);
    let expr2_0 = constructor_shift_rr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0, expr1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term rot_imm_reg.
pub fn constructor_rot_imm_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 4436.
    let expr0_0 = constructor_shiftop_rot(ctx, pattern0_0)?;
    let expr1_0 = constructor_shift_rr(
        ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0, pattern3_0,
    )?;
    return Some(expr1_0);
}

// Generated as internal constructor for term push_rot_imm_reg.
pub fn constructor_push_rot_imm_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
    arg4: u8,
    arg5: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    let pattern5_0 = arg5;
    // Rule at src/isa/s390x/inst.isle line 4440.
    let expr0_0 = constructor_shiftop_rot(ctx, pattern1_0)?;
    let expr1_0 = constructor_push_shift(
        ctx, pattern0_0, &expr0_0, pattern2_0, pattern3_0, pattern4_0, pattern5_0,
    )?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vec_shiftop_rot.
pub fn constructor_vec_shiftop_rot<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecShiftOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 4444.
        let expr0_0 = VecShiftOp::RotL8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 4445.
        let expr0_0 = VecShiftOp::RotL16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 4446.
        let expr0_0 = VecShiftOp::RotL32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == I64X2 {
        // Rule at src/isa/s390x/inst.isle line 4447.
        let expr0_0 = VecShiftOp::RotL64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_rot_reg.
pub fn constructor_vec_rot_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4450.
    let expr0_0 = constructor_vec_shiftop_rot(ctx, pattern0_0)?;
    let expr1_0: u8 = 0i128 as u8;
    let expr2_0 =
        constructor_vec_shift_rr(ctx, pattern0_0, &expr0_0, pattern1_0, expr1_0, pattern2_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term vec_rot_imm.
pub fn constructor_vec_rot_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4454.
    let expr0_0 = constructor_vec_shiftop_rot(ctx, pattern0_0)?;
    let expr1_0 = C::zero_reg(ctx);
    let expr2_0 =
        constructor_vec_shift_rr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0, expr1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term shiftop_lshl.
pub fn constructor_shiftop_lshl<C: Context>(ctx: &mut C, arg0: Type) -> Option<ShiftOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        // Rule at src/isa/s390x/inst.isle line 4461.
        let expr0_0 = ShiftOp::LShL32;
        return Some(expr0_0);
    }
    if pattern0_0 == I16 {
        // Rule at src/isa/s390x/inst.isle line 4462.
        let expr0_0 = ShiftOp::LShL32;
        return Some(expr0_0);
    }
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/inst.isle line 4463.
        let expr0_0 = ShiftOp::LShL32;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4464.
        let expr0_0 = ShiftOp::LShL64;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term lshl_reg.
pub fn constructor_lshl_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4467.
    let expr0_0 = constructor_shiftop_lshl(ctx, pattern0_0)?;
    let expr1_0: u8 = 0i128 as u8;
    let expr2_0 = constructor_shift_rr(ctx, pattern0_0, &expr0_0, pattern1_0, expr1_0, pattern2_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term lshl_imm.
pub fn constructor_lshl_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4471.
    let expr0_0 = constructor_shiftop_lshl(ctx, pattern0_0)?;
    let expr1_0 = C::zero_reg(ctx);
    let expr2_0 = constructor_shift_rr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0, expr1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term vec_shiftop_lshl.
pub fn constructor_vec_shiftop_lshl<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecShiftOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 4475.
        let expr0_0 = VecShiftOp::LShL8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 4476.
        let expr0_0 = VecShiftOp::LShL16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 4477.
        let expr0_0 = VecShiftOp::LShL32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == I64X2 {
        // Rule at src/isa/s390x/inst.isle line 4478.
        let expr0_0 = VecShiftOp::LShL64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_lshl_reg.
pub fn constructor_vec_lshl_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4481.
    let expr0_0 = constructor_vec_shiftop_lshl(ctx, pattern0_0)?;
    let expr1_0: u8 = 0i128 as u8;
    let expr2_0 =
        constructor_vec_shift_rr(ctx, pattern0_0, &expr0_0, pattern1_0, expr1_0, pattern2_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term vec_lshl_imm.
pub fn constructor_vec_lshl_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4485.
    let expr0_0 = constructor_vec_shiftop_lshl(ctx, pattern0_0)?;
    let expr1_0 = C::zero_reg(ctx);
    let expr2_0 =
        constructor_vec_shift_rr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0, expr1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term vec_lshl_by_byte.
pub fn constructor_vec_lshl_by_byte<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4489.
    let expr0_0: Type = I8X16;
    let expr1_0 = VecBinaryOp::LShLByByte128;
    let expr2_0 = constructor_vec_rrr(ctx, expr0_0, &expr1_0, pattern0_0, pattern1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term vec_lshl_by_bit.
pub fn constructor_vec_lshl_by_bit<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4492.
    let expr0_0: Type = I8X16;
    let expr1_0 = VecBinaryOp::LShLByBit128;
    let expr2_0 = constructor_vec_rrr(ctx, expr0_0, &expr1_0, pattern0_0, pattern1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term shiftop_lshr.
pub fn constructor_shiftop_lshr<C: Context>(ctx: &mut C, arg0: Type) -> Option<ShiftOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/inst.isle line 4498.
        let expr0_0 = ShiftOp::LShR32;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4499.
        let expr0_0 = ShiftOp::LShR64;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term lshr_reg.
pub fn constructor_lshr_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4502.
    let expr0_0 = constructor_shiftop_lshr(ctx, pattern0_0)?;
    let expr1_0: u8 = 0i128 as u8;
    let expr2_0 = constructor_shift_rr(ctx, pattern0_0, &expr0_0, pattern1_0, expr1_0, pattern2_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term lshr_imm.
pub fn constructor_lshr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4506.
    let expr0_0 = constructor_shiftop_lshr(ctx, pattern0_0)?;
    let expr1_0 = C::zero_reg(ctx);
    let expr2_0 = constructor_shift_rr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0, expr1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term vec_shiftop_lshr.
pub fn constructor_vec_shiftop_lshr<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecShiftOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 4510.
        let expr0_0 = VecShiftOp::LShR8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 4511.
        let expr0_0 = VecShiftOp::LShR16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 4512.
        let expr0_0 = VecShiftOp::LShR32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == I64X2 {
        // Rule at src/isa/s390x/inst.isle line 4513.
        let expr0_0 = VecShiftOp::LShR64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_lshr_reg.
pub fn constructor_vec_lshr_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4516.
    let expr0_0 = constructor_vec_shiftop_lshr(ctx, pattern0_0)?;
    let expr1_0: u8 = 0i128 as u8;
    let expr2_0 =
        constructor_vec_shift_rr(ctx, pattern0_0, &expr0_0, pattern1_0, expr1_0, pattern2_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term vec_lshr_imm.
pub fn constructor_vec_lshr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4520.
    let expr0_0 = constructor_vec_shiftop_lshr(ctx, pattern0_0)?;
    let expr1_0 = C::zero_reg(ctx);
    let expr2_0 =
        constructor_vec_shift_rr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0, expr1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term vec_lshr_by_byte.
pub fn constructor_vec_lshr_by_byte<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4524.
    let expr0_0: Type = I8X16;
    let expr1_0 = VecBinaryOp::LShRByByte128;
    let expr2_0 = constructor_vec_rrr(ctx, expr0_0, &expr1_0, pattern0_0, pattern1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term vec_lshr_by_bit.
pub fn constructor_vec_lshr_by_bit<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4527.
    let expr0_0: Type = I8X16;
    let expr1_0 = VecBinaryOp::LShRByBit128;
    let expr2_0 = constructor_vec_rrr(ctx, expr0_0, &expr1_0, pattern0_0, pattern1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term shiftop_ashr.
pub fn constructor_shiftop_ashr<C: Context>(ctx: &mut C, arg0: Type) -> Option<ShiftOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/inst.isle line 4533.
        let expr0_0 = ShiftOp::AShR32;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4534.
        let expr0_0 = ShiftOp::AShR64;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term ashr_reg.
pub fn constructor_ashr_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4537.
    let expr0_0 = constructor_shiftop_ashr(ctx, pattern0_0)?;
    let expr1_0: u8 = 0i128 as u8;
    let expr2_0 = constructor_shift_rr(ctx, pattern0_0, &expr0_0, pattern1_0, expr1_0, pattern2_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term ashr_imm.
pub fn constructor_ashr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4541.
    let expr0_0 = constructor_shiftop_ashr(ctx, pattern0_0)?;
    let expr1_0 = C::zero_reg(ctx);
    let expr2_0 = constructor_shift_rr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0, expr1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term vec_shiftop_ashr.
pub fn constructor_vec_shiftop_ashr<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecShiftOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 4545.
        let expr0_0 = VecShiftOp::AShR8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 4546.
        let expr0_0 = VecShiftOp::AShR16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 4547.
        let expr0_0 = VecShiftOp::AShR32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == I64X2 {
        // Rule at src/isa/s390x/inst.isle line 4548.
        let expr0_0 = VecShiftOp::AShR64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_ashr_reg.
pub fn constructor_vec_ashr_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4551.
    let expr0_0 = constructor_vec_shiftop_ashr(ctx, pattern0_0)?;
    let expr1_0: u8 = 0i128 as u8;
    let expr2_0 =
        constructor_vec_shift_rr(ctx, pattern0_0, &expr0_0, pattern1_0, expr1_0, pattern2_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term vec_ashr_imm.
pub fn constructor_vec_ashr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4555.
    let expr0_0 = constructor_vec_shiftop_ashr(ctx, pattern0_0)?;
    let expr1_0 = C::zero_reg(ctx);
    let expr2_0 =
        constructor_vec_shift_rr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0, expr1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term vec_ashr_by_byte.
pub fn constructor_vec_ashr_by_byte<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4559.
    let expr0_0: Type = I8X16;
    let expr1_0 = VecBinaryOp::AShRByByte128;
    let expr2_0 = constructor_vec_rrr(ctx, expr0_0, &expr1_0, pattern0_0, pattern1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term vec_ashr_by_bit.
pub fn constructor_vec_ashr_by_bit<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4562.
    let expr0_0: Type = I8X16;
    let expr1_0 = VecBinaryOp::AShRByBit128;
    let expr2_0 = constructor_vec_rrr(ctx, expr0_0, &expr1_0, pattern0_0, pattern1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term popcnt_byte.
pub fn constructor_popcnt_byte<C: Context>(ctx: &mut C, arg0: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/inst.isle line 4568.
    let expr0_0: Type = I64;
    let expr1_0 = UnaryOp::PopcntByte;
    let expr2_0 = constructor_unary_rr(ctx, expr0_0, &expr1_0, pattern0_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term popcnt_reg.
pub fn constructor_popcnt_reg<C: Context>(ctx: &mut C, arg0: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/inst.isle line 4571.
    let expr0_0: Type = I64;
    let expr1_0 = UnaryOp::PopcntReg;
    let expr2_0 = constructor_unary_rr(ctx, expr0_0, &expr1_0, pattern0_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term vecop_popcnt.
pub fn constructor_vecop_popcnt<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecUnaryOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8X16 {
        // Rule at src/isa/s390x/inst.isle line 4574.
        let expr0_0 = VecUnaryOp::Popcnt8x16;
        return Some(expr0_0);
    }
    if pattern0_0 == I16X8 {
        // Rule at src/isa/s390x/inst.isle line 4575.
        let expr0_0 = VecUnaryOp::Popcnt16x8;
        return Some(expr0_0);
    }
    if pattern0_0 == I32X4 {
        // Rule at src/isa/s390x/inst.isle line 4576.
        let expr0_0 = VecUnaryOp::Popcnt32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == I64X2 {
        // Rule at src/isa/s390x/inst.isle line 4577.
        let expr0_0 = VecUnaryOp::Popcnt64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vec_popcnt.
pub fn constructor_vec_popcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4580.
    let expr0_0 = constructor_vecop_popcnt(ctx, pattern0_0)?;
    let expr1_0 = constructor_vec_rr(ctx, pattern0_0, &expr0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term atomic_rmw_and.
pub fn constructor_atomic_rmw_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == I32 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4586.
        let expr0_0: Type = I32;
        let expr1_0 = ALUOp::And32;
        let expr2_0 = constructor_atomic_rmw_impl(ctx, expr0_0, &expr1_0, pattern2_0, pattern3_0)?;
        return Some(expr2_0);
    }
    if pattern0_0 == I64 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4587.
        let expr0_0: Type = I64;
        let expr1_0 = ALUOp::And64;
        let expr2_0 = constructor_atomic_rmw_impl(ctx, expr0_0, &expr1_0, pattern2_0, pattern3_0)?;
        return Some(expr2_0);
    }
    return None;
}

// Generated as internal constructor for term atomic_rmw_or.
pub fn constructor_atomic_rmw_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == I32 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4590.
        let expr0_0: Type = I32;
        let expr1_0 = ALUOp::Orr32;
        let expr2_0 = constructor_atomic_rmw_impl(ctx, expr0_0, &expr1_0, pattern2_0, pattern3_0)?;
        return Some(expr2_0);
    }
    if pattern0_0 == I64 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4591.
        let expr0_0: Type = I64;
        let expr1_0 = ALUOp::Orr64;
        let expr2_0 = constructor_atomic_rmw_impl(ctx, expr0_0, &expr1_0, pattern2_0, pattern3_0)?;
        return Some(expr2_0);
    }
    return None;
}

// Generated as internal constructor for term atomic_rmw_xor.
pub fn constructor_atomic_rmw_xor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == I32 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4594.
        let expr0_0: Type = I32;
        let expr1_0 = ALUOp::Xor32;
        let expr2_0 = constructor_atomic_rmw_impl(ctx, expr0_0, &expr1_0, pattern2_0, pattern3_0)?;
        return Some(expr2_0);
    }
    if pattern0_0 == I64 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4595.
        let expr0_0: Type = I64;
        let expr1_0 = ALUOp::Xor64;
        let expr2_0 = constructor_atomic_rmw_impl(ctx, expr0_0, &expr1_0, pattern2_0, pattern3_0)?;
        return Some(expr2_0);
    }
    return None;
}

// Generated as internal constructor for term atomic_rmw_add.
pub fn constructor_atomic_rmw_add<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == I32 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4598.
        let expr0_0: Type = I32;
        let expr1_0 = ALUOp::Add32;
        let expr2_0 = constructor_atomic_rmw_impl(ctx, expr0_0, &expr1_0, pattern2_0, pattern3_0)?;
        return Some(expr2_0);
    }
    if pattern0_0 == I64 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4599.
        let expr0_0: Type = I64;
        let expr1_0 = ALUOp::Add64;
        let expr2_0 = constructor_atomic_rmw_impl(ctx, expr0_0, &expr1_0, pattern2_0, pattern3_0)?;
        return Some(expr2_0);
    }
    return None;
}

// Generated as internal constructor for term atomic_cas_impl.
pub fn constructor_atomic_cas_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == I32 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 4605.
        let expr0_0 = constructor_atomic_cas32(ctx, pattern2_0, pattern3_0, pattern4_0)?;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 4606.
        let expr0_0 = constructor_atomic_cas64(ctx, pattern2_0, pattern3_0, pattern4_0)?;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term push_atomic_cas.
pub fn constructor_push_atomic_cas<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
    arg4: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if pattern1_0 == I32 {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        // Rule at src/isa/s390x/inst.isle line 4609.
        let expr0_0 =
            constructor_push_atomic_cas32(ctx, pattern0_0, pattern3_0, pattern4_0, pattern5_0)?;
        return Some(expr0_0);
    }
    if pattern1_0 == I64 {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        // Rule at src/isa/s390x/inst.isle line 4610.
        let expr0_0 =
            constructor_push_atomic_cas64(ctx, pattern0_0, pattern3_0, pattern4_0, pattern5_0)?;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term fpuop2_add.
pub fn constructor_fpuop2_add<C: Context>(ctx: &mut C, arg0: Type) -> Option<FPUOp2> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        // Rule at src/isa/s390x/inst.isle line 4616.
        let expr0_0 = FPUOp2::Add32;
        return Some(expr0_0);
    }
    if pattern0_0 == F64 {
        // Rule at src/isa/s390x/inst.isle line 4617.
        let expr0_0 = FPUOp2::Add64;
        return Some(expr0_0);
    }
    if pattern0_0 == F32X4 {
        // Rule at src/isa/s390x/inst.isle line 4618.
        let expr0_0 = FPUOp2::Add32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == F64X2 {
        // Rule at src/isa/s390x/inst.isle line 4619.
        let expr0_0 = FPUOp2::Add64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term fadd_reg.
pub fn constructor_fadd_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4622.
    let expr0_0 = constructor_fpuop2_add(ctx, pattern0_0)?;
    let expr1_0 = constructor_fpu_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term fpuop2_sub.
pub fn constructor_fpuop2_sub<C: Context>(ctx: &mut C, arg0: Type) -> Option<FPUOp2> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        // Rule at src/isa/s390x/inst.isle line 4628.
        let expr0_0 = FPUOp2::Sub32;
        return Some(expr0_0);
    }
    if pattern0_0 == F64 {
        // Rule at src/isa/s390x/inst.isle line 4629.
        let expr0_0 = FPUOp2::Sub64;
        return Some(expr0_0);
    }
    if pattern0_0 == F32X4 {
        // Rule at src/isa/s390x/inst.isle line 4630.
        let expr0_0 = FPUOp2::Sub32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == F64X2 {
        // Rule at src/isa/s390x/inst.isle line 4631.
        let expr0_0 = FPUOp2::Sub64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term fsub_reg.
pub fn constructor_fsub_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4634.
    let expr0_0 = constructor_fpuop2_sub(ctx, pattern0_0)?;
    let expr1_0 = constructor_fpu_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term fpuop2_mul.
pub fn constructor_fpuop2_mul<C: Context>(ctx: &mut C, arg0: Type) -> Option<FPUOp2> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        // Rule at src/isa/s390x/inst.isle line 4640.
        let expr0_0 = FPUOp2::Mul32;
        return Some(expr0_0);
    }
    if pattern0_0 == F64 {
        // Rule at src/isa/s390x/inst.isle line 4641.
        let expr0_0 = FPUOp2::Mul64;
        return Some(expr0_0);
    }
    if pattern0_0 == F32X4 {
        // Rule at src/isa/s390x/inst.isle line 4642.
        let expr0_0 = FPUOp2::Mul32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == F64X2 {
        // Rule at src/isa/s390x/inst.isle line 4643.
        let expr0_0 = FPUOp2::Mul64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term fmul_reg.
pub fn constructor_fmul_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4646.
    let expr0_0 = constructor_fpuop2_mul(ctx, pattern0_0)?;
    let expr1_0 = constructor_fpu_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term fpuop2_div.
pub fn constructor_fpuop2_div<C: Context>(ctx: &mut C, arg0: Type) -> Option<FPUOp2> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        // Rule at src/isa/s390x/inst.isle line 4652.
        let expr0_0 = FPUOp2::Div32;
        return Some(expr0_0);
    }
    if pattern0_0 == F64 {
        // Rule at src/isa/s390x/inst.isle line 4653.
        let expr0_0 = FPUOp2::Div64;
        return Some(expr0_0);
    }
    if pattern0_0 == F32X4 {
        // Rule at src/isa/s390x/inst.isle line 4654.
        let expr0_0 = FPUOp2::Div32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == F64X2 {
        // Rule at src/isa/s390x/inst.isle line 4655.
        let expr0_0 = FPUOp2::Div64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term fdiv_reg.
pub fn constructor_fdiv_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4658.
    let expr0_0 = constructor_fpuop2_div(ctx, pattern0_0)?;
    let expr1_0 = constructor_fpu_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term fpuop2_min.
pub fn constructor_fpuop2_min<C: Context>(ctx: &mut C, arg0: Type) -> Option<FPUOp2> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        // Rule at src/isa/s390x/inst.isle line 4664.
        let expr0_0 = FPUOp2::Min32;
        return Some(expr0_0);
    }
    if pattern0_0 == F64 {
        // Rule at src/isa/s390x/inst.isle line 4665.
        let expr0_0 = FPUOp2::Min64;
        return Some(expr0_0);
    }
    if pattern0_0 == F32X4 {
        // Rule at src/isa/s390x/inst.isle line 4666.
        let expr0_0 = FPUOp2::Min32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == F64X2 {
        // Rule at src/isa/s390x/inst.isle line 4667.
        let expr0_0 = FPUOp2::Min64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term fmin_reg.
pub fn constructor_fmin_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4670.
    let expr0_0 = constructor_fpuop2_min(ctx, pattern0_0)?;
    let expr1_0 = constructor_fpu_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term fpuop2_max.
pub fn constructor_fpuop2_max<C: Context>(ctx: &mut C, arg0: Type) -> Option<FPUOp2> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        // Rule at src/isa/s390x/inst.isle line 4676.
        let expr0_0 = FPUOp2::Max32;
        return Some(expr0_0);
    }
    if pattern0_0 == F64 {
        // Rule at src/isa/s390x/inst.isle line 4677.
        let expr0_0 = FPUOp2::Max64;
        return Some(expr0_0);
    }
    if pattern0_0 == F32X4 {
        // Rule at src/isa/s390x/inst.isle line 4678.
        let expr0_0 = FPUOp2::Max32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == F64X2 {
        // Rule at src/isa/s390x/inst.isle line 4679.
        let expr0_0 = FPUOp2::Max64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term fmax_reg.
pub fn constructor_fmax_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4682.
    let expr0_0 = constructor_fpuop2_max(ctx, pattern0_0)?;
    let expr1_0 = constructor_fpu_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term fpuop2_min_pseudo.
pub fn constructor_fpuop2_min_pseudo<C: Context>(ctx: &mut C, arg0: Type) -> Option<FPUOp2> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        // Rule at src/isa/s390x/inst.isle line 4688.
        let expr0_0 = FPUOp2::MinPseudo32;
        return Some(expr0_0);
    }
    if pattern0_0 == F64 {
        // Rule at src/isa/s390x/inst.isle line 4689.
        let expr0_0 = FPUOp2::MinPseudo64;
        return Some(expr0_0);
    }
    if pattern0_0 == F32X4 {
        // Rule at src/isa/s390x/inst.isle line 4690.
        let expr0_0 = FPUOp2::MinPseudo32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == F64X2 {
        // Rule at src/isa/s390x/inst.isle line 4691.
        let expr0_0 = FPUOp2::MinPseudo64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term fmin_pseudo_reg.
pub fn constructor_fmin_pseudo_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4694.
    let expr0_0 = constructor_fpuop2_min_pseudo(ctx, pattern0_0)?;
    let expr1_0 = constructor_fpu_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term fpuop2_max_pseudo.
pub fn constructor_fpuop2_max_pseudo<C: Context>(ctx: &mut C, arg0: Type) -> Option<FPUOp2> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        // Rule at src/isa/s390x/inst.isle line 4700.
        let expr0_0 = FPUOp2::MaxPseudo32;
        return Some(expr0_0);
    }
    if pattern0_0 == F64 {
        // Rule at src/isa/s390x/inst.isle line 4701.
        let expr0_0 = FPUOp2::MaxPseudo64;
        return Some(expr0_0);
    }
    if pattern0_0 == F32X4 {
        // Rule at src/isa/s390x/inst.isle line 4702.
        let expr0_0 = FPUOp2::MaxPseudo32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == F64X2 {
        // Rule at src/isa/s390x/inst.isle line 4703.
        let expr0_0 = FPUOp2::MaxPseudo64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term fmax_pseudo_reg.
pub fn constructor_fmax_pseudo_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4706.
    let expr0_0 = constructor_fpuop2_max_pseudo(ctx, pattern0_0)?;
    let expr1_0 = constructor_fpu_rrr(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term fpuop3_fma.
pub fn constructor_fpuop3_fma<C: Context>(ctx: &mut C, arg0: Type) -> Option<FPUOp3> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        // Rule at src/isa/s390x/inst.isle line 4712.
        let expr0_0 = FPUOp3::MAdd32;
        return Some(expr0_0);
    }
    if pattern0_0 == F64 {
        // Rule at src/isa/s390x/inst.isle line 4713.
        let expr0_0 = FPUOp3::MAdd64;
        return Some(expr0_0);
    }
    if pattern0_0 == F32X4 {
        // Rule at src/isa/s390x/inst.isle line 4714.
        let expr0_0 = FPUOp3::MAdd32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == F64X2 {
        // Rule at src/isa/s390x/inst.isle line 4715.
        let expr0_0 = FPUOp3::MAdd64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term fma_reg.
pub fn constructor_fma_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/inst.isle line 4718.
    let expr0_0 = constructor_fpuop3_fma(ctx, pattern0_0)?;
    let expr1_0 = constructor_fpu_rrrr(
        ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0, pattern3_0,
    )?;
    return Some(expr1_0);
}

// Generated as internal constructor for term fpuop1_sqrt.
pub fn constructor_fpuop1_sqrt<C: Context>(ctx: &mut C, arg0: Type) -> Option<FPUOp1> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        // Rule at src/isa/s390x/inst.isle line 4724.
        let expr0_0 = FPUOp1::Sqrt32;
        return Some(expr0_0);
    }
    if pattern0_0 == F64 {
        // Rule at src/isa/s390x/inst.isle line 4725.
        let expr0_0 = FPUOp1::Sqrt64;
        return Some(expr0_0);
    }
    if pattern0_0 == F32X4 {
        // Rule at src/isa/s390x/inst.isle line 4726.
        let expr0_0 = FPUOp1::Sqrt32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == F64X2 {
        // Rule at src/isa/s390x/inst.isle line 4727.
        let expr0_0 = FPUOp1::Sqrt64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term sqrt_reg.
pub fn constructor_sqrt_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4730.
    let expr0_0 = constructor_fpuop1_sqrt(ctx, pattern0_0)?;
    let expr1_0 = constructor_fpu_rr(ctx, pattern0_0, &expr0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term fpuop1_neg.
pub fn constructor_fpuop1_neg<C: Context>(ctx: &mut C, arg0: Type) -> Option<FPUOp1> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        // Rule at src/isa/s390x/inst.isle line 4736.
        let expr0_0 = FPUOp1::Neg32;
        return Some(expr0_0);
    }
    if pattern0_0 == F64 {
        // Rule at src/isa/s390x/inst.isle line 4737.
        let expr0_0 = FPUOp1::Neg64;
        return Some(expr0_0);
    }
    if pattern0_0 == F32X4 {
        // Rule at src/isa/s390x/inst.isle line 4738.
        let expr0_0 = FPUOp1::Neg32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == F64X2 {
        // Rule at src/isa/s390x/inst.isle line 4739.
        let expr0_0 = FPUOp1::Neg64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term fneg_reg.
pub fn constructor_fneg_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4742.
    let expr0_0 = constructor_fpuop1_neg(ctx, pattern0_0)?;
    let expr1_0 = constructor_fpu_rr(ctx, pattern0_0, &expr0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term fpuop1_abs.
pub fn constructor_fpuop1_abs<C: Context>(ctx: &mut C, arg0: Type) -> Option<FPUOp1> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        // Rule at src/isa/s390x/inst.isle line 4748.
        let expr0_0 = FPUOp1::Abs32;
        return Some(expr0_0);
    }
    if pattern0_0 == F64 {
        // Rule at src/isa/s390x/inst.isle line 4749.
        let expr0_0 = FPUOp1::Abs64;
        return Some(expr0_0);
    }
    if pattern0_0 == F32X4 {
        // Rule at src/isa/s390x/inst.isle line 4750.
        let expr0_0 = FPUOp1::Abs32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == F64X2 {
        // Rule at src/isa/s390x/inst.isle line 4751.
        let expr0_0 = FPUOp1::Abs64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term fabs_reg.
pub fn constructor_fabs_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4754.
    let expr0_0 = constructor_fpuop1_abs(ctx, pattern0_0)?;
    let expr1_0 = constructor_fpu_rr(ctx, pattern0_0, &expr0_0, pattern1_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term fpuroundop_round.
pub fn constructor_fpuroundop_round<C: Context>(ctx: &mut C, arg0: Type) -> Option<FpuRoundOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        // Rule at src/isa/s390x/inst.isle line 4760.
        let expr0_0 = FpuRoundOp::Round32;
        return Some(expr0_0);
    }
    if pattern0_0 == F64 {
        // Rule at src/isa/s390x/inst.isle line 4761.
        let expr0_0 = FpuRoundOp::Round64;
        return Some(expr0_0);
    }
    if pattern0_0 == F32X4 {
        // Rule at src/isa/s390x/inst.isle line 4762.
        let expr0_0 = FpuRoundOp::Round32x4;
        return Some(expr0_0);
    }
    if pattern0_0 == F64X2 {
        // Rule at src/isa/s390x/inst.isle line 4763.
        let expr0_0 = FpuRoundOp::Round64x2;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term ceil_reg.
pub fn constructor_ceil_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4766.
    let expr0_0 = constructor_fpuroundop_round(ctx, pattern0_0)?;
    let expr1_0 = FpuRoundMode::ToPosInfinity;
    let expr2_0 = constructor_fpu_round(ctx, pattern0_0, &expr0_0, &expr1_0, pattern1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term floor_reg.
pub fn constructor_floor_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4770.
    let expr0_0 = constructor_fpuroundop_round(ctx, pattern0_0)?;
    let expr1_0 = FpuRoundMode::ToNegInfinity;
    let expr2_0 = constructor_fpu_round(ctx, pattern0_0, &expr0_0, &expr1_0, pattern1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term trunc_reg.
pub fn constructor_trunc_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4774.
    let expr0_0 = constructor_fpuroundop_round(ctx, pattern0_0)?;
    let expr1_0 = FpuRoundMode::ToZero;
    let expr2_0 = constructor_fpu_round(ctx, pattern0_0, &expr0_0, &expr1_0, pattern1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term nearest_reg.
pub fn constructor_nearest_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    // Rule at src/isa/s390x/inst.isle line 4778.
    let expr0_0 = constructor_fpuroundop_round(ctx, pattern0_0)?;
    let expr1_0 = FpuRoundMode::ToNearestTiesToEven;
    let expr2_0 = constructor_fpu_round(ctx, pattern0_0, &expr0_0, &expr1_0, pattern1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term fpromote_reg.
pub fn constructor_fpromote_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if pattern1_0 == pattern0_0 {
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4785.
        return Some(pattern3_0);
    }
    let pattern0_0 = arg0;
    if pattern0_0 == F64 {
        let pattern2_0 = arg1;
        if pattern2_0 == F32 {
            let pattern4_0 = arg2;
            // Rule at src/isa/s390x/inst.isle line 4786.
            let expr0_0: Type = F64;
            let expr1_0 = FPUOp1::Cvt32To64;
            let expr2_0 = constructor_fpu_rr(ctx, expr0_0, &expr1_0, pattern4_0)?;
            return Some(expr2_0);
        }
    }
    if pattern0_0 == F64X2 {
        let pattern2_0 = arg1;
        if pattern2_0 == F32X4 {
            let pattern4_0 = arg2;
            // Rule at src/isa/s390x/inst.isle line 4788.
            let expr0_0: Type = F64;
            let expr1_0 = FPUOp1::Cvt32x4To64x2;
            let expr2_0 = constructor_fpu_rr(ctx, expr0_0, &expr1_0, pattern4_0)?;
            return Some(expr2_0);
        }
    }
    return None;
}

// Generated as internal constructor for term fdemote_reg.
pub fn constructor_fdemote_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: &FpuRoundMode,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if pattern1_0 == pattern0_0 {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/inst.isle line 4795.
        return Some(pattern4_0);
    }
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        let pattern2_0 = arg1;
        if pattern2_0 == F64 {
            let pattern4_0 = arg2;
            let pattern5_0 = arg3;
            // Rule at src/isa/s390x/inst.isle line 4796.
            let expr0_0: Type = F32;
            let expr1_0 = FpuRoundOp::Cvt64To32;
            let expr2_0 = constructor_fpu_round(ctx, expr0_0, &expr1_0, pattern4_0, pattern5_0)?;
            return Some(expr2_0);
        }
    }
    if pattern0_0 == F32X4 {
        let pattern2_0 = arg1;
        if pattern2_0 == F64X2 {
            let pattern4_0 = arg2;
            let pattern5_0 = arg3;
            // Rule at src/isa/s390x/inst.isle line 4798.
            let expr0_0: Type = F32X4;
            let expr1_0 = FpuRoundOp::Cvt64x2To32x4;
            let expr2_0 = constructor_fpu_round(ctx, expr0_0, &expr1_0, pattern4_0, pattern5_0)?;
            return Some(expr2_0);
        }
    }
    return None;
}

// Generated as internal constructor for term fcvt_from_uint_reg.
pub fn constructor_fcvt_from_uint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4805.
        let expr0_0: Type = F32;
        let expr1_0 = FpuRoundOp::FromUInt32;
        let expr2_0: Type = I32X4;
        let expr3_0: u8 = 0i128 as u8;
        let expr4_0 = C::zero_reg(ctx);
        let expr5_0 =
            constructor_vec_insert_lane_undef(ctx, expr2_0, pattern3_0, expr3_0, expr4_0)?;
        let expr6_0 = constructor_fpu_round(ctx, expr0_0, &expr1_0, pattern2_0, expr5_0)?;
        return Some(expr6_0);
    }
    if pattern0_0 == F64 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4807.
        let expr0_0: Type = F64;
        let expr1_0 = FpuRoundOp::FromUInt64;
        let expr2_0: Type = I64X2;
        let expr3_0: u8 = 0i128 as u8;
        let expr4_0 = C::zero_reg(ctx);
        let expr5_0 =
            constructor_vec_insert_lane_undef(ctx, expr2_0, pattern3_0, expr3_0, expr4_0)?;
        let expr6_0 = constructor_fpu_round(ctx, expr0_0, &expr1_0, pattern2_0, expr5_0)?;
        return Some(expr6_0);
    }
    if pattern0_0 == F32X4 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4809.
        let expr0_0: Type = F32X4;
        let expr1_0 = FpuRoundOp::FromUInt32x4;
        let expr2_0 = constructor_fpu_round(ctx, expr0_0, &expr1_0, pattern2_0, pattern3_0)?;
        return Some(expr2_0);
    }
    if pattern0_0 == F64X2 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4811.
        let expr0_0: Type = F64X2;
        let expr1_0 = FpuRoundOp::FromUInt64x2;
        let expr2_0 = constructor_fpu_round(ctx, expr0_0, &expr1_0, pattern2_0, pattern3_0)?;
        return Some(expr2_0);
    }
    return None;
}

// Generated as internal constructor for term fcvt_from_sint_reg.
pub fn constructor_fcvt_from_sint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4818.
        let expr0_0: Type = F32;
        let expr1_0 = FpuRoundOp::FromSInt32;
        let expr2_0: Type = I32X4;
        let expr3_0: u8 = 0i128 as u8;
        let expr4_0 = C::zero_reg(ctx);
        let expr5_0 =
            constructor_vec_insert_lane_undef(ctx, expr2_0, pattern3_0, expr3_0, expr4_0)?;
        let expr6_0 = constructor_fpu_round(ctx, expr0_0, &expr1_0, pattern2_0, expr5_0)?;
        return Some(expr6_0);
    }
    if pattern0_0 == F64 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4820.
        let expr0_0: Type = F64;
        let expr1_0 = FpuRoundOp::FromSInt64;
        let expr2_0: Type = I64X2;
        let expr3_0: u8 = 0i128 as u8;
        let expr4_0 = C::zero_reg(ctx);
        let expr5_0 =
            constructor_vec_insert_lane_undef(ctx, expr2_0, pattern3_0, expr3_0, expr4_0)?;
        let expr6_0 = constructor_fpu_round(ctx, expr0_0, &expr1_0, pattern2_0, expr5_0)?;
        return Some(expr6_0);
    }
    if pattern0_0 == F32X4 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4822.
        let expr0_0: Type = F32X4;
        let expr1_0 = FpuRoundOp::FromSInt32x4;
        let expr2_0 = constructor_fpu_round(ctx, expr0_0, &expr1_0, pattern2_0, pattern3_0)?;
        return Some(expr2_0);
    }
    if pattern0_0 == F64X2 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4824.
        let expr0_0: Type = F64X2;
        let expr1_0 = FpuRoundOp::FromSInt64x2;
        let expr2_0 = constructor_fpu_round(ctx, expr0_0, &expr1_0, pattern2_0, pattern3_0)?;
        return Some(expr2_0);
    }
    return None;
}

// Generated as internal constructor for term fcvt_flt_ty.
pub fn constructor_fcvt_flt_ty<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Option<Type> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::fits_in_32(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        if let Some(()) = C::vxrs_ext2_enabled(ctx, pattern2_0) {
            if pattern2_0 == F32 {
                // Rule at src/isa/s390x/inst.isle line 4831.
                let expr0_0: Type = F32;
                return Some(expr0_0);
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::fits_in_64(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        if pattern2_0 == F32 {
            // Rule at src/isa/s390x/inst.isle line 4832.
            let expr0_0: Type = F64;
            return Some(expr0_0);
        }
        if pattern2_0 == F64 {
            // Rule at src/isa/s390x/inst.isle line 4833.
            let expr0_0: Type = F64;
            return Some(expr0_0);
        }
    }
    return None;
}

// Generated as internal constructor for term fcvt_int_ty.
pub fn constructor_fcvt_int_ty<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Option<Type> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::fits_in_32(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        if let Some(()) = C::vxrs_ext2_enabled(ctx, pattern2_0) {
            if pattern2_0 == F32 {
                // Rule at src/isa/s390x/inst.isle line 4836.
                let expr0_0: Type = I32;
                return Some(expr0_0);
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::fits_in_64(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        if pattern2_0 == F32 {
            // Rule at src/isa/s390x/inst.isle line 4837.
            let expr0_0: Type = I64;
            return Some(expr0_0);
        }
        if pattern2_0 == F64 {
            // Rule at src/isa/s390x/inst.isle line 4838.
            let expr0_0: Type = I64;
            return Some(expr0_0);
        }
    }
    return None;
}

// Generated as internal constructor for term fcvt_to_uint_reg.
pub fn constructor_fcvt_to_uint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4844.
        let expr0_0: Type = I32X4;
        let expr1_0: Type = F32;
        let expr2_0 = FpuRoundOp::ToUInt32;
        let expr3_0 = constructor_fpu_round(ctx, expr1_0, &expr2_0, pattern2_0, pattern3_0)?;
        let expr4_0: u8 = 0i128 as u8;
        let expr5_0 = C::zero_reg(ctx);
        let expr6_0 = constructor_vec_extract_lane(ctx, expr0_0, expr3_0, expr4_0, expr5_0)?;
        return Some(expr6_0);
    }
    if pattern0_0 == F64 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4846.
        let expr0_0: Type = I64X2;
        let expr1_0: Type = F64;
        let expr2_0 = FpuRoundOp::ToUInt64;
        let expr3_0 = constructor_fpu_round(ctx, expr1_0, &expr2_0, pattern2_0, pattern3_0)?;
        let expr4_0: u8 = 0i128 as u8;
        let expr5_0 = C::zero_reg(ctx);
        let expr6_0 = constructor_vec_extract_lane(ctx, expr0_0, expr3_0, expr4_0, expr5_0)?;
        return Some(expr6_0);
    }
    if pattern0_0 == F32X4 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4848.
        let expr0_0: Type = F32X4;
        let expr1_0 = FpuRoundOp::ToUInt32x4;
        let expr2_0 = constructor_fpu_round(ctx, expr0_0, &expr1_0, pattern2_0, pattern3_0)?;
        return Some(expr2_0);
    }
    if pattern0_0 == F64X2 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4850.
        let expr0_0: Type = F64X2;
        let expr1_0 = FpuRoundOp::ToUInt64x2;
        let expr2_0 = constructor_fpu_round(ctx, expr0_0, &expr1_0, pattern2_0, pattern3_0)?;
        return Some(expr2_0);
    }
    return None;
}

// Generated as internal constructor for term fcvt_to_uint_ub.
pub fn constructor_fcvt_to_uint_ub<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 4854.
        let expr0_0: Type = F32;
        let expr1_0 = C::ty_bits(ctx, pattern2_0)?;
        let expr2_0 = C::fcvt_to_uint_ub32(ctx, expr1_0);
        let expr3_0 = constructor_imm(ctx, expr0_0, expr2_0)?;
        return Some(expr3_0);
    }
    if pattern0_0 == F64 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 4856.
        let expr0_0: Type = F64;
        let expr1_0 = C::ty_bits(ctx, pattern2_0)?;
        let expr2_0 = C::fcvt_to_uint_ub64(ctx, expr1_0);
        let expr3_0 = constructor_imm(ctx, expr0_0, expr2_0)?;
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term fcvt_to_uint_lb.
pub fn constructor_fcvt_to_uint_lb<C: Context>(ctx: &mut C, arg0: Type) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        // Rule at src/isa/s390x/inst.isle line 4860.
        let expr0_0: Type = F32;
        let expr1_0 = C::fcvt_to_uint_lb32(ctx);
        let expr2_0 = constructor_imm(ctx, expr0_0, expr1_0)?;
        return Some(expr2_0);
    }
    if pattern0_0 == F64 {
        // Rule at src/isa/s390x/inst.isle line 4861.
        let expr0_0: Type = F64;
        let expr1_0 = C::fcvt_to_uint_lb64(ctx);
        let expr2_0 = constructor_imm(ctx, expr0_0, expr1_0)?;
        return Some(expr2_0);
    }
    return None;
}

// Generated as internal constructor for term fcvt_to_sint_reg.
pub fn constructor_fcvt_to_sint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4876.
        let expr0_0: Type = F32X4;
        let expr1_0: Type = F32;
        let expr2_0 = FpuRoundOp::ToSInt32;
        let expr3_0 = constructor_fpu_round(ctx, expr1_0, &expr2_0, pattern2_0, pattern3_0)?;
        let expr4_0: u8 = 0i128 as u8;
        let expr5_0 = C::zero_reg(ctx);
        let expr6_0 = constructor_vec_extract_lane(ctx, expr0_0, expr3_0, expr4_0, expr5_0)?;
        return Some(expr6_0);
    }
    if pattern0_0 == F64 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4878.
        let expr0_0: Type = F64X2;
        let expr1_0: Type = F64;
        let expr2_0 = FpuRoundOp::ToSInt64;
        let expr3_0 = constructor_fpu_round(ctx, expr1_0, &expr2_0, pattern2_0, pattern3_0)?;
        let expr4_0: u8 = 0i128 as u8;
        let expr5_0 = C::zero_reg(ctx);
        let expr6_0 = constructor_vec_extract_lane(ctx, expr0_0, expr3_0, expr4_0, expr5_0)?;
        return Some(expr6_0);
    }
    if pattern0_0 == F32X4 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4880.
        let expr0_0: Type = F32X4;
        let expr1_0 = FpuRoundOp::ToSInt32x4;
        let expr2_0 = constructor_fpu_round(ctx, expr0_0, &expr1_0, pattern2_0, pattern3_0)?;
        return Some(expr2_0);
    }
    if pattern0_0 == F64X2 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4882.
        let expr0_0: Type = F64X2;
        let expr1_0 = FpuRoundOp::ToSInt64x2;
        let expr2_0 = constructor_fpu_round(ctx, expr0_0, &expr1_0, pattern2_0, pattern3_0)?;
        return Some(expr2_0);
    }
    return None;
}

// Generated as internal constructor for term fcvt_to_sint_ub.
pub fn constructor_fcvt_to_sint_ub<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 4886.
        let expr0_0: Type = F32;
        let expr1_0 = C::ty_bits(ctx, pattern2_0)?;
        let expr2_0 = C::fcvt_to_sint_ub32(ctx, expr1_0);
        let expr3_0 = constructor_imm(ctx, expr0_0, expr2_0)?;
        return Some(expr3_0);
    }
    if pattern0_0 == F64 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 4888.
        let expr0_0: Type = F64;
        let expr1_0 = C::ty_bits(ctx, pattern2_0)?;
        let expr2_0 = C::fcvt_to_sint_ub64(ctx, expr1_0);
        let expr3_0 = constructor_imm(ctx, expr0_0, expr2_0)?;
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term fcvt_to_sint_lb.
pub fn constructor_fcvt_to_sint_lb<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 4892.
        let expr0_0: Type = F32;
        let expr1_0 = C::ty_bits(ctx, pattern2_0)?;
        let expr2_0 = C::fcvt_to_sint_lb32(ctx, expr1_0);
        let expr3_0 = constructor_imm(ctx, expr0_0, expr2_0)?;
        return Some(expr3_0);
    }
    if pattern0_0 == F64 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/inst.isle line 4894.
        let expr0_0: Type = F64;
        let expr1_0 = C::ty_bits(ctx, pattern2_0)?;
        let expr2_0 = C::fcvt_to_sint_lb64(ctx, expr1_0);
        let expr3_0 = constructor_imm(ctx, expr0_0, expr2_0)?;
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term cmpop_cmps.
pub fn constructor_cmpop_cmps<C: Context>(ctx: &mut C, arg0: Type) -> Option<CmpOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/inst.isle line 4910.
        let expr0_0 = CmpOp::CmpS32;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4911.
        let expr0_0 = CmpOp::CmpS64;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term cmpop_cmps_sext16.
pub fn constructor_cmpop_cmps_sext16<C: Context>(ctx: &mut C, arg0: Type) -> Option<CmpOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/inst.isle line 4914.
        let expr0_0 = CmpOp::CmpS32Ext16;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4915.
        let expr0_0 = CmpOp::CmpS64Ext16;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term cmpop_cmps_sext32.
pub fn constructor_cmpop_cmps_sext32<C: Context>(ctx: &mut C, arg0: Type) -> Option<CmpOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4918.
        let expr0_0 = CmpOp::CmpS64Ext32;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term icmps_reg.
pub fn constructor_icmps_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4921.
    let expr0_0 = constructor_cmpop_cmps(ctx, pattern0_0)?;
    let expr1_0 = constructor_cmp_rr(ctx, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term icmps_reg_sext32.
pub fn constructor_icmps_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4924.
    let expr0_0 = constructor_cmpop_cmps_sext32(ctx, pattern0_0)?;
    let expr1_0 = constructor_cmp_rr(ctx, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term icmps_simm16.
pub fn constructor_icmps_simm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4927.
    let expr0_0 = constructor_cmpop_cmps(ctx, pattern0_0)?;
    let expr1_0 = constructor_cmp_rsimm16(ctx, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term icmps_simm32.
pub fn constructor_icmps_simm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i32,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4930.
    let expr0_0 = constructor_cmpop_cmps(ctx, pattern0_0)?;
    let expr1_0 = constructor_cmp_rsimm32(ctx, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term icmps_mem.
pub fn constructor_icmps_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4933.
    let expr0_0 = constructor_cmpop_cmps(ctx, pattern0_0)?;
    let expr1_0 = constructor_cmp_rx(ctx, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term icmps_mem_sext16.
pub fn constructor_icmps_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4936.
    let expr0_0 = constructor_cmpop_cmps_sext16(ctx, pattern0_0)?;
    let expr1_0 = constructor_cmp_rx(ctx, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term icmps_mem_sext32.
pub fn constructor_icmps_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4939.
    let expr0_0 = constructor_cmpop_cmps_sext32(ctx, pattern0_0)?;
    let expr1_0 = constructor_cmp_rx(ctx, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term cmpop_cmpu.
pub fn constructor_cmpop_cmpu<C: Context>(ctx: &mut C, arg0: Type) -> Option<CmpOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/inst.isle line 4945.
        let expr0_0 = CmpOp::CmpL32;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4946.
        let expr0_0 = CmpOp::CmpL64;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term cmpop_cmpu_zext16.
pub fn constructor_cmpop_cmpu_zext16<C: Context>(ctx: &mut C, arg0: Type) -> Option<CmpOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/inst.isle line 4949.
        let expr0_0 = CmpOp::CmpL32Ext16;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4950.
        let expr0_0 = CmpOp::CmpL64Ext16;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term cmpop_cmpu_zext32.
pub fn constructor_cmpop_cmpu_zext32<C: Context>(ctx: &mut C, arg0: Type) -> Option<CmpOp> {
    let pattern0_0 = arg0;
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4953.
        let expr0_0 = CmpOp::CmpL64Ext32;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term icmpu_reg.
pub fn constructor_icmpu_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4956.
    let expr0_0 = constructor_cmpop_cmpu(ctx, pattern0_0)?;
    let expr1_0 = constructor_cmp_rr(ctx, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term icmpu_reg_zext32.
pub fn constructor_icmpu_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4959.
    let expr0_0 = constructor_cmpop_cmpu_zext32(ctx, pattern0_0)?;
    let expr1_0 = constructor_cmp_rr(ctx, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term icmpu_uimm32.
pub fn constructor_icmpu_uimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4962.
    let expr0_0 = constructor_cmpop_cmpu(ctx, pattern0_0)?;
    let expr1_0 = constructor_cmp_ruimm32(ctx, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term icmpu_mem.
pub fn constructor_icmpu_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4965.
    let expr0_0 = constructor_cmpop_cmpu(ctx, pattern0_0)?;
    let expr1_0 = constructor_cmp_rx(ctx, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term icmpu_mem_zext16.
pub fn constructor_icmpu_mem_zext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4968.
    let expr0_0 = constructor_cmpop_cmpu_zext16(ctx, pattern0_0)?;
    let expr1_0 = constructor_cmp_rx(ctx, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term icmpu_mem_zext32.
pub fn constructor_icmpu_mem_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/inst.isle line 4971.
    let expr0_0 = constructor_cmpop_cmpu_zext32(ctx, pattern0_0)?;
    let expr1_0 = constructor_cmp_rx(ctx, &expr0_0, pattern1_0, pattern2_0)?;
    return Some(expr1_0);
}

// Generated as internal constructor for term vecop_int_cmpeq.
pub fn constructor_vecop_int_cmpeq<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecIntCmpOp> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 8i128 as u32 {
            if pattern1_1 == 16i128 as u32 {
                // Rule at src/isa/s390x/inst.isle line 4977.
                let expr0_0 = VecIntCmpOp::CmpEq8x16;
                return Some(expr0_0);
            }
        }
        if pattern1_0 == 16i128 as u32 {
            if pattern1_1 == 8i128 as u32 {
                // Rule at src/isa/s390x/inst.isle line 4978.
                let expr0_0 = VecIntCmpOp::CmpEq16x8;
                return Some(expr0_0);
            }
        }
        if pattern1_0 == 32i128 as u32 {
            if pattern1_1 == 4i128 as u32 {
                // Rule at src/isa/s390x/inst.isle line 4979.
                let expr0_0 = VecIntCmpOp::CmpEq32x4;
                return Some(expr0_0);
            }
        }
        if pattern1_0 == 64i128 as u32 {
            if pattern1_1 == 2i128 as u32 {
                // Rule at src/isa/s390x/inst.isle line 4980.
                let expr0_0 = VecIntCmpOp::CmpEq64x2;
                return Some(expr0_0);
            }
        }
    }
    return None;
}

// Generated as internal constructor for term vec_cmpeq.
pub fn constructor_vec_cmpeq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::ty_vec128(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4983.
        let expr0_0 = constructor_vecop_int_cmpeq(ctx, pattern1_0)?;
        let expr1_0 = constructor_vec_int_cmp(ctx, pattern1_0, &expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term vec_cmpeqs.
pub fn constructor_vec_cmpeqs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::ty_vec128(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4985.
        let expr0_0 = constructor_vecop_int_cmpeq(ctx, pattern1_0)?;
        let expr1_0 = constructor_vec_int_cmps(ctx, pattern1_0, &expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term vecop_int_cmph.
pub fn constructor_vecop_int_cmph<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecIntCmpOp> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 8i128 as u32 {
            if pattern1_1 == 16i128 as u32 {
                // Rule at src/isa/s390x/inst.isle line 4988.
                let expr0_0 = VecIntCmpOp::SCmpHi8x16;
                return Some(expr0_0);
            }
        }
        if pattern1_0 == 16i128 as u32 {
            if pattern1_1 == 8i128 as u32 {
                // Rule at src/isa/s390x/inst.isle line 4989.
                let expr0_0 = VecIntCmpOp::SCmpHi16x8;
                return Some(expr0_0);
            }
        }
        if pattern1_0 == 32i128 as u32 {
            if pattern1_1 == 4i128 as u32 {
                // Rule at src/isa/s390x/inst.isle line 4990.
                let expr0_0 = VecIntCmpOp::SCmpHi32x4;
                return Some(expr0_0);
            }
        }
        if pattern1_0 == 64i128 as u32 {
            if pattern1_1 == 2i128 as u32 {
                // Rule at src/isa/s390x/inst.isle line 4991.
                let expr0_0 = VecIntCmpOp::SCmpHi64x2;
                return Some(expr0_0);
            }
        }
    }
    return None;
}

// Generated as internal constructor for term vec_cmph.
pub fn constructor_vec_cmph<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::ty_vec128(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4994.
        let expr0_0 = constructor_vecop_int_cmph(ctx, pattern1_0)?;
        let expr1_0 = constructor_vec_int_cmp(ctx, pattern1_0, &expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term vec_cmphs.
pub fn constructor_vec_cmphs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::ty_vec128(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 4996.
        let expr0_0 = constructor_vecop_int_cmph(ctx, pattern1_0)?;
        let expr1_0 = constructor_vec_int_cmps(ctx, pattern1_0, &expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term vecop_int_cmphl.
pub fn constructor_vecop_int_cmphl<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecIntCmpOp> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 8i128 as u32 {
            if pattern1_1 == 16i128 as u32 {
                // Rule at src/isa/s390x/inst.isle line 4999.
                let expr0_0 = VecIntCmpOp::UCmpHi8x16;
                return Some(expr0_0);
            }
        }
        if pattern1_0 == 16i128 as u32 {
            if pattern1_1 == 8i128 as u32 {
                // Rule at src/isa/s390x/inst.isle line 5000.
                let expr0_0 = VecIntCmpOp::UCmpHi16x8;
                return Some(expr0_0);
            }
        }
        if pattern1_0 == 32i128 as u32 {
            if pattern1_1 == 4i128 as u32 {
                // Rule at src/isa/s390x/inst.isle line 5001.
                let expr0_0 = VecIntCmpOp::UCmpHi32x4;
                return Some(expr0_0);
            }
        }
        if pattern1_0 == 64i128 as u32 {
            if pattern1_1 == 2i128 as u32 {
                // Rule at src/isa/s390x/inst.isle line 5002.
                let expr0_0 = VecIntCmpOp::UCmpHi64x2;
                return Some(expr0_0);
            }
        }
    }
    return None;
}

// Generated as internal constructor for term vec_cmphl.
pub fn constructor_vec_cmphl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::ty_vec128(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 5005.
        let expr0_0 = constructor_vecop_int_cmphl(ctx, pattern1_0)?;
        let expr1_0 = constructor_vec_int_cmp(ctx, pattern1_0, &expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term vec_cmphls.
pub fn constructor_vec_cmphls<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::ty_vec128(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 5007.
        let expr0_0 = constructor_vecop_int_cmphl(ctx, pattern1_0)?;
        let expr1_0 = constructor_vec_int_cmps(ctx, pattern1_0, &expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term fcmp_reg.
pub fn constructor_fcmp_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    if pattern0_0 == F32 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 5013.
        let expr0_0 = constructor_fpu_cmp32(ctx, pattern2_0, pattern3_0)?;
        return Some(expr0_0);
    }
    if pattern0_0 == F64 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 5014.
        let expr0_0 = constructor_fpu_cmp64(ctx, pattern2_0, pattern3_0)?;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term vecop_float_cmpeq.
pub fn constructor_vecop_float_cmpeq<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecFloatCmpOp> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 32i128 as u32 {
            if pattern1_1 == 4i128 as u32 {
                // Rule at src/isa/s390x/inst.isle line 5020.
                let expr0_0 = VecFloatCmpOp::CmpEq32x4;
                return Some(expr0_0);
            }
        }
        if pattern1_0 == 64i128 as u32 {
            if pattern1_1 == 2i128 as u32 {
                // Rule at src/isa/s390x/inst.isle line 5021.
                let expr0_0 = VecFloatCmpOp::CmpEq64x2;
                return Some(expr0_0);
            }
        }
    }
    return None;
}

// Generated as internal constructor for term vec_fcmpeq.
pub fn constructor_vec_fcmpeq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::ty_vec128(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 5024.
        let expr0_0 = constructor_vecop_float_cmpeq(ctx, pattern1_0)?;
        let expr1_0 = constructor_vec_float_cmp(ctx, pattern1_0, &expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term vec_fcmpeqs.
pub fn constructor_vec_fcmpeqs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::ty_vec128(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 5026.
        let expr0_0 = constructor_vecop_float_cmpeq(ctx, pattern1_0)?;
        let expr1_0 =
            constructor_vec_float_cmps(ctx, pattern1_0, &expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term vecop_float_cmph.
pub fn constructor_vecop_float_cmph<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecFloatCmpOp> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 32i128 as u32 {
            if pattern1_1 == 4i128 as u32 {
                // Rule at src/isa/s390x/inst.isle line 5029.
                let expr0_0 = VecFloatCmpOp::CmpHi32x4;
                return Some(expr0_0);
            }
        }
        if pattern1_0 == 64i128 as u32 {
            if pattern1_1 == 2i128 as u32 {
                // Rule at src/isa/s390x/inst.isle line 5030.
                let expr0_0 = VecFloatCmpOp::CmpHi64x2;
                return Some(expr0_0);
            }
        }
    }
    return None;
}

// Generated as internal constructor for term vec_fcmph.
pub fn constructor_vec_fcmph<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::ty_vec128(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 5033.
        let expr0_0 = constructor_vecop_float_cmph(ctx, pattern1_0)?;
        let expr1_0 = constructor_vec_float_cmp(ctx, pattern1_0, &expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term vec_fcmphs.
pub fn constructor_vec_fcmphs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::ty_vec128(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 5035.
        let expr0_0 = constructor_vecop_float_cmph(ctx, pattern1_0)?;
        let expr1_0 =
            constructor_vec_float_cmps(ctx, pattern1_0, &expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term vecop_float_cmphe.
pub fn constructor_vecop_float_cmphe<C: Context>(ctx: &mut C, arg0: Type) -> Option<VecFloatCmpOp> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 32i128 as u32 {
            if pattern1_1 == 4i128 as u32 {
                // Rule at src/isa/s390x/inst.isle line 5038.
                let expr0_0 = VecFloatCmpOp::CmpHiEq32x4;
                return Some(expr0_0);
            }
        }
        if pattern1_0 == 64i128 as u32 {
            if pattern1_1 == 2i128 as u32 {
                // Rule at src/isa/s390x/inst.isle line 5039.
                let expr0_0 = VecFloatCmpOp::CmpHiEq64x2;
                return Some(expr0_0);
            }
        }
    }
    return None;
}

// Generated as internal constructor for term vec_fcmphe.
pub fn constructor_vec_fcmphe<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::ty_vec128(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 5042.
        let expr0_0 = constructor_vecop_float_cmphe(ctx, pattern1_0)?;
        let expr1_0 = constructor_vec_float_cmp(ctx, pattern1_0, &expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term vec_fcmphes.
pub fn constructor_vec_fcmphes<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::ty_vec128(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/inst.isle line 5044.
        let expr0_0 = constructor_vecop_float_cmphe(ctx, pattern1_0)?;
        let expr1_0 =
            constructor_vec_float_cmps(ctx, pattern1_0, &expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Iadd => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::def_inst(ctx, pattern7_0) {
                            let pattern9_0 = C::inst_data(ctx, pattern8_0);
                            if let &InstructionData::Unary {
                                opcode: ref pattern10_0,
                                arg: pattern10_1,
                            } = &pattern9_0
                            {
                                if let &Opcode::Sextend = pattern10_0 {
                                    let pattern12_0 = C::value_type(ctx, pattern10_1);
                                    if pattern12_0 == I32 {
                                        // Rule at src/isa/s390x/lower.isle line 73.
                                        let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                        let expr1_0 = C::put_in_reg(ctx, pattern10_1);
                                        let expr2_0 = constructor_add_reg_sext32(
                                            ctx, pattern3_0, expr0_0, expr1_0,
                                        )?;
                                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                        return Some(expr3_0);
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Imul => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::def_inst(ctx, pattern7_0) {
                            let pattern9_0 = C::inst_data(ctx, pattern8_0);
                            if let &InstructionData::Unary {
                                opcode: ref pattern10_0,
                                arg: pattern10_1,
                            } = &pattern9_0
                            {
                                if let &Opcode::Sextend = pattern10_0 {
                                    let pattern12_0 = C::value_type(ctx, pattern10_1);
                                    if pattern12_0 == I32 {
                                        // Rule at src/isa/s390x/lower.isle line 324.
                                        let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                        let expr1_0 = C::put_in_reg(ctx, pattern10_1);
                                        let expr2_0 = constructor_mul_reg_sext32(
                                            ctx, pattern3_0, expr0_0, expr1_0,
                                        )?;
                                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                        return Some(expr3_0);
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Iadd => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::i16_from_value(ctx, pattern7_0) {
                            // Rule at src/isa/s390x/lower.isle line 79.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr1_0 =
                                constructor_add_simm16(ctx, pattern3_0, expr0_0, pattern8_0)?;
                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                            return Some(expr2_0);
                        }
                    }
                    &Opcode::Imul => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::i16_from_value(ctx, pattern7_0) {
                            // Rule at src/isa/s390x/lower.isle line 330.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr1_0 =
                                constructor_mul_simm16(ctx, pattern3_0, expr0_0, pattern8_0)?;
                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                            return Some(expr2_0);
                        }
                    }
                    _ => {}
                }
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Iadd => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::i32_from_value(ctx, pattern7_0) {
                            // Rule at src/isa/s390x/lower.isle line 83.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr1_0 =
                                constructor_add_simm32(ctx, pattern3_0, expr0_0, pattern8_0)?;
                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                            return Some(expr2_0);
                        }
                    }
                    &Opcode::Imul => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::i32_from_value(ctx, pattern7_0) {
                            // Rule at src/isa/s390x/lower.isle line 334.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr1_0 =
                                constructor_mul_simm32(ctx, pattern3_0, expr0_0, pattern8_0)?;
                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                            return Some(expr2_0);
                        }
                    }
                    _ => {}
                }
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Iadd => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        let pattern8_0 = C::value_type(ctx, pattern7_0);
                        if let Some(pattern9_0) = C::ty_32_or_64(ctx, pattern8_0) {
                            if let Some(pattern10_0) = C::sinkable_inst(ctx, pattern7_0) {
                                let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                if let &InstructionData::Load {
                                    opcode: ref pattern12_0,
                                    arg: pattern12_1,
                                    flags: pattern12_2,
                                    offset: pattern12_3,
                                } = &pattern11_0
                                {
                                    if let &Opcode::Load = pattern12_0 {
                                        if let Some(()) = C::bigendian(ctx, pattern12_2) {
                                            // Rule at src/isa/s390x/lower.isle line 89.
                                            let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                            let expr1_0 = constructor_sink_load(ctx, pattern10_0)?;
                                            let expr2_0 = constructor_add_mem(
                                                ctx, pattern3_0, expr0_0, &expr1_0,
                                            )?;
                                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                            return Some(expr3_0);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Imul => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        let pattern8_0 = C::value_type(ctx, pattern7_0);
                        if let Some(pattern9_0) = C::ty_32_or_64(ctx, pattern8_0) {
                            if let Some(pattern10_0) = C::sinkable_inst(ctx, pattern7_0) {
                                let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                if let &InstructionData::Load {
                                    opcode: ref pattern12_0,
                                    arg: pattern12_1,
                                    flags: pattern12_2,
                                    offset: pattern12_3,
                                } = &pattern11_0
                                {
                                    if let &Opcode::Load = pattern12_0 {
                                        if let Some(()) = C::bigendian(ctx, pattern12_2) {
                                            // Rule at src/isa/s390x/lower.isle line 340.
                                            let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                            let expr1_0 = constructor_sink_load(ctx, pattern10_0)?;
                                            let expr2_0 = constructor_mul_mem(
                                                ctx, pattern3_0, expr0_0, &expr1_0,
                                            )?;
                                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                            return Some(expr3_0);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Iadd => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        let pattern8_0 = C::value_type(ctx, pattern7_0);
                        if pattern8_0 == I16 {
                            if let Some(pattern10_0) = C::sinkable_inst(ctx, pattern7_0) {
                                let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                if let &InstructionData::Load {
                                    opcode: ref pattern12_0,
                                    arg: pattern12_1,
                                    flags: pattern12_2,
                                    offset: pattern12_3,
                                } = &pattern11_0
                                {
                                    if let &Opcode::Load = pattern12_0 {
                                        if let Some(()) = C::bigendian(ctx, pattern12_2) {
                                            // Rule at src/isa/s390x/lower.isle line 95.
                                            let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                            let expr1_0 = constructor_sink_load(ctx, pattern10_0)?;
                                            let expr2_0 = constructor_add_mem_sext16(
                                                ctx, pattern3_0, expr0_0, &expr1_0,
                                            )?;
                                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                            return Some(expr3_0);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Imul => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        let pattern8_0 = C::value_type(ctx, pattern7_0);
                        if pattern8_0 == I16 {
                            if let Some(pattern10_0) = C::sinkable_inst(ctx, pattern7_0) {
                                let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                if let &InstructionData::Load {
                                    opcode: ref pattern12_0,
                                    arg: pattern12_1,
                                    flags: pattern12_2,
                                    offset: pattern12_3,
                                } = &pattern11_0
                                {
                                    if let &Opcode::Load = pattern12_0 {
                                        if let Some(()) = C::bigendian(ctx, pattern12_2) {
                                            // Rule at src/isa/s390x/lower.isle line 346.
                                            let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                            let expr1_0 = constructor_sink_load(ctx, pattern10_0)?;
                                            let expr2_0 = constructor_mul_mem_sext16(
                                                ctx, pattern3_0, expr0_0, &expr1_0,
                                            )?;
                                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                            return Some(expr3_0);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Iadd => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::sinkable_inst(ctx, pattern7_0) {
                            let pattern9_0 = C::inst_data(ctx, pattern8_0);
                            if let &InstructionData::Load {
                                opcode: ref pattern10_0,
                                arg: pattern10_1,
                                flags: pattern10_2,
                                offset: pattern10_3,
                            } = &pattern9_0
                            {
                                if let &Opcode::Sload16 = pattern10_0 {
                                    if let Some(()) = C::bigendian(ctx, pattern10_2) {
                                        // Rule at src/isa/s390x/lower.isle line 101.
                                        let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                        let expr1_0 = constructor_sink_sload16(ctx, pattern8_0)?;
                                        let expr2_0 = constructor_add_mem_sext16(
                                            ctx, pattern3_0, expr0_0, &expr1_0,
                                        )?;
                                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                        return Some(expr3_0);
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Imul => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::sinkable_inst(ctx, pattern7_0) {
                            let pattern9_0 = C::inst_data(ctx, pattern8_0);
                            if let &InstructionData::Load {
                                opcode: ref pattern10_0,
                                arg: pattern10_1,
                                flags: pattern10_2,
                                offset: pattern10_3,
                            } = &pattern9_0
                            {
                                if let &Opcode::Sload16 = pattern10_0 {
                                    if let Some(()) = C::bigendian(ctx, pattern10_2) {
                                        // Rule at src/isa/s390x/lower.isle line 352.
                                        let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                        let expr1_0 = constructor_sink_sload16(ctx, pattern8_0)?;
                                        let expr2_0 = constructor_mul_mem_sext16(
                                            ctx, pattern3_0, expr0_0, &expr1_0,
                                        )?;
                                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                        return Some(expr3_0);
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Iadd => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::sinkable_inst(ctx, pattern7_0) {
                            let pattern9_0 = C::inst_data(ctx, pattern8_0);
                            if let &InstructionData::Load {
                                opcode: ref pattern10_0,
                                arg: pattern10_1,
                                flags: pattern10_2,
                                offset: pattern10_3,
                            } = &pattern9_0
                            {
                                if let &Opcode::Sload32 = pattern10_0 {
                                    if let Some(()) = C::bigendian(ctx, pattern10_2) {
                                        // Rule at src/isa/s390x/lower.isle line 105.
                                        let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                        let expr1_0 = constructor_sink_sload32(ctx, pattern8_0)?;
                                        let expr2_0 = constructor_add_mem_sext32(
                                            ctx, pattern3_0, expr0_0, &expr1_0,
                                        )?;
                                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                        return Some(expr3_0);
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Imul => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::sinkable_inst(ctx, pattern7_0) {
                            let pattern9_0 = C::inst_data(ctx, pattern8_0);
                            if let &InstructionData::Load {
                                opcode: ref pattern10_0,
                                arg: pattern10_1,
                                flags: pattern10_2,
                                offset: pattern10_3,
                            } = &pattern9_0
                            {
                                if let &Opcode::Sload32 = pattern10_0 {
                                    if let Some(()) = C::bigendian(ctx, pattern10_2) {
                                        // Rule at src/isa/s390x/lower.isle line 356.
                                        let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                        let expr1_0 = constructor_sink_sload32(ctx, pattern8_0)?;
                                        let expr2_0 = constructor_mul_mem_sext32(
                                            ctx, pattern3_0, expr0_0, &expr1_0,
                                        )?;
                                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                        return Some(expr3_0);
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Iadd => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::def_inst(ctx, pattern7_1) {
                                let pattern9_0 = C::inst_data(ctx, pattern8_0);
                                if let &InstructionData::Unary {
                                    opcode: ref pattern10_0,
                                    arg: pattern10_1,
                                } = &pattern9_0
                                {
                                    if let &Opcode::Sextend = pattern10_0 {
                                        let pattern12_0 = C::value_type(ctx, pattern10_1);
                                        if pattern12_0 == I32 {
                                            // Rule at src/isa/s390x/lower.isle line 71.
                                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                            let expr1_0 = C::put_in_reg(ctx, pattern10_1);
                                            let expr2_0 = constructor_add_reg_sext32(
                                                ctx, pattern3_0, expr0_0, expr1_0,
                                            )?;
                                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                            return Some(expr3_0);
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Isub => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::def_inst(ctx, pattern7_1) {
                                let pattern9_0 = C::inst_data(ctx, pattern8_0);
                                if let &InstructionData::Unary {
                                    opcode: ref pattern10_0,
                                    arg: pattern10_1,
                                } = &pattern9_0
                                {
                                    if let &Opcode::Sextend = pattern10_0 {
                                        let pattern12_0 = C::value_type(ctx, pattern10_1);
                                        if pattern12_0 == I32 {
                                            // Rule at src/isa/s390x/lower.isle line 149.
                                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                            let expr1_0 = C::put_in_reg(ctx, pattern10_1);
                                            let expr2_0 = constructor_sub_reg_sext32(
                                                ctx, pattern3_0, expr0_0, expr1_0,
                                            )?;
                                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                            return Some(expr3_0);
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Imul => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::def_inst(ctx, pattern7_1) {
                                let pattern9_0 = C::inst_data(ctx, pattern8_0);
                                if let &InstructionData::Unary {
                                    opcode: ref pattern10_0,
                                    arg: pattern10_1,
                                } = &pattern9_0
                                {
                                    if let &Opcode::Sextend = pattern10_0 {
                                        let pattern12_0 = C::value_type(ctx, pattern10_1);
                                        if pattern12_0 == I32 {
                                            // Rule at src/isa/s390x/lower.isle line 322.
                                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                            let expr1_0 = C::put_in_reg(ctx, pattern10_1);
                                            let expr2_0 = constructor_mul_reg_sext32(
                                                ctx, pattern3_0, expr0_0, expr1_0,
                                            )?;
                                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                            return Some(expr3_0);
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::IaddIfcout => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::def_inst(ctx, pattern7_0) {
                                let pattern9_0 = C::inst_data(ctx, pattern8_0);
                                if let &InstructionData::Unary {
                                    opcode: ref pattern10_0,
                                    arg: pattern10_1,
                                } = &pattern9_0
                                {
                                    if let &Opcode::Uextend = pattern10_0 {
                                        let pattern12_0 = C::value_type(ctx, pattern10_1);
                                        if pattern12_0 == I32 {
                                            // Rule at src/isa/s390x/lower.isle line 214.
                                            let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                            let expr1_0 = C::put_in_reg(ctx, pattern10_1);
                                            let expr2_0 = constructor_add_logical_reg_zext32(
                                                ctx, pattern3_0, expr0_0, expr1_0,
                                            )?;
                                            let expr3_0 = constructor_output_ifcout(ctx, expr2_0)?;
                                            return Some(expr3_0);
                                        }
                                    }
                                }
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::IntAddTrap {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    code: ref pattern5_2,
                } => {
                    if let &Opcode::UaddOverflowTrap = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::def_inst(ctx, pattern7_0) {
                            let pattern9_0 = C::inst_data(ctx, pattern8_0);
                            if let &InstructionData::Unary {
                                opcode: ref pattern10_0,
                                arg: pattern10_1,
                            } = &pattern9_0
                            {
                                if let &Opcode::Uextend = pattern10_0 {
                                    let pattern12_0 = C::value_type(ctx, pattern10_1);
                                    if pattern12_0 == I32 {
                                        // Rule at src/isa/s390x/lower.isle line 3880.
                                        let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                        let expr1_0 = C::put_in_reg(ctx, pattern10_1);
                                        let expr2_0 =
                                            constructor_add_logical_reg_zext32_with_flags_paired(
                                                ctx, pattern3_0, expr0_0, expr1_0,
                                            )?;
                                        let expr3_0: u8 = 3i128 as u8;
                                        let expr4_0 = C::mask_as_cond(ctx, expr3_0);
                                        let expr5_0 =
                                            constructor_trap_if_impl(ctx, &expr4_0, pattern5_2)?;
                                        let expr6_0 =
                                            constructor_with_flags(ctx, &expr2_0, &expr5_0)?;
                                        let expr7_0 = C::output(ctx, expr6_0);
                                        return Some(expr7_0);
                                    }
                                }
                            }
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Iadd => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::i16_from_value(ctx, pattern7_1) {
                                // Rule at src/isa/s390x/lower.isle line 77.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 =
                                    constructor_add_simm16(ctx, pattern3_0, expr0_0, pattern8_0)?;
                                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                        &Opcode::Isub => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::i16_from_negated_value(ctx, pattern7_1) {
                                // Rule at src/isa/s390x/lower.isle line 153.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 =
                                    constructor_add_simm16(ctx, pattern3_0, expr0_0, pattern8_0)?;
                                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                        &Opcode::Imul => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::i16_from_value(ctx, pattern7_1) {
                                // Rule at src/isa/s390x/lower.isle line 328.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 =
                                    constructor_mul_simm16(ctx, pattern3_0, expr0_0, pattern8_0)?;
                                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                        &Opcode::IaddIfcout => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::u32_from_value(ctx, pattern7_0) {
                                // Rule at src/isa/s390x/lower.isle line 220.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = constructor_add_logical_zimm32(
                                    ctx, pattern3_0, expr0_0, pattern8_0,
                                )?;
                                let expr2_0 = constructor_output_ifcout(ctx, expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::IntAddTrap {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    code: ref pattern5_2,
                } => {
                    if let &Opcode::UaddOverflowTrap = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::u32_from_value(ctx, pattern7_0) {
                            // Rule at src/isa/s390x/lower.isle line 3892.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr1_0 = constructor_add_logical_zimm32_with_flags_paired(
                                ctx, pattern3_0, expr0_0, pattern8_0,
                            )?;
                            let expr2_0: u8 = 3i128 as u8;
                            let expr3_0 = C::mask_as_cond(ctx, expr2_0);
                            let expr4_0 = constructor_trap_if_impl(ctx, &expr3_0, pattern5_2)?;
                            let expr5_0 = constructor_with_flags(ctx, &expr1_0, &expr4_0)?;
                            let expr6_0 = C::output(ctx, expr5_0);
                            return Some(expr6_0);
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if pattern2_0 == I128 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Rotl => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 825.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = constructor_amt_vr(ctx, pattern7_1)?;
                        let expr2_0: Type = I8X16;
                        let expr3_0 = constructor_vec_neg(ctx, expr2_0, expr1_0)?;
                        let expr4_0: Type = I128;
                        let expr5_0 = constructor_vec_lshl_by_byte(ctx, expr0_0, expr1_0)?;
                        let expr6_0 = constructor_vec_lshl_by_bit(ctx, expr5_0, expr1_0)?;
                        let expr7_0 = constructor_vec_lshr_by_byte(ctx, expr0_0, expr3_0)?;
                        let expr8_0 = constructor_vec_lshr_by_bit(ctx, expr7_0, expr3_0)?;
                        let expr9_0 = constructor_vec_or(ctx, expr4_0, expr6_0, expr8_0)?;
                        let expr10_0 = constructor_output_reg(ctx, expr9_0)?;
                        return Some(expr10_0);
                    }
                    &Opcode::Rotr => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 885.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = constructor_amt_vr(ctx, pattern7_1)?;
                        let expr2_0: Type = I8X16;
                        let expr3_0 = constructor_vec_neg(ctx, expr2_0, expr1_0)?;
                        let expr4_0: Type = I128;
                        let expr5_0 = constructor_vec_lshl_by_byte(ctx, expr0_0, expr3_0)?;
                        let expr6_0 = constructor_vec_lshl_by_bit(ctx, expr5_0, expr3_0)?;
                        let expr7_0 = constructor_vec_lshr_by_byte(ctx, expr0_0, expr1_0)?;
                        let expr8_0 = constructor_vec_lshr_by_bit(ctx, expr7_0, expr1_0)?;
                        let expr9_0 = constructor_vec_or(ctx, expr4_0, expr6_0, expr8_0)?;
                        let expr10_0 = constructor_output_reg(ctx, expr9_0)?;
                        return Some(expr10_0);
                    }
                    _ => {}
                }
            }
        }
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Iadd => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::i32_from_value(ctx, pattern7_1) {
                                // Rule at src/isa/s390x/lower.isle line 81.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 =
                                    constructor_add_simm32(ctx, pattern3_0, expr0_0, pattern8_0)?;
                                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                        &Opcode::Isub => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::i32_from_negated_value(ctx, pattern7_1) {
                                // Rule at src/isa/s390x/lower.isle line 155.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 =
                                    constructor_add_simm32(ctx, pattern3_0, expr0_0, pattern8_0)?;
                                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                        &Opcode::Imul => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::i32_from_value(ctx, pattern7_1) {
                                // Rule at src/isa/s390x/lower.isle line 332.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 =
                                    constructor_mul_simm32(ctx, pattern3_0, expr0_0, pattern8_0)?;
                                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                        &Opcode::IaddIfcout => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            let pattern8_0 = C::value_type(ctx, pattern7_0);
                            if let Some(pattern9_0) = C::ty_32_or_64(ctx, pattern8_0) {
                                if let Some(pattern10_0) = C::sinkable_inst(ctx, pattern7_0) {
                                    let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                    if let &InstructionData::Load {
                                        opcode: ref pattern12_0,
                                        arg: pattern12_1,
                                        flags: pattern12_2,
                                        offset: pattern12_3,
                                    } = &pattern11_0
                                    {
                                        if let &Opcode::Load = pattern12_0 {
                                            if let Some(()) = C::bigendian(ctx, pattern12_2) {
                                                // Rule at src/isa/s390x/lower.isle line 226.
                                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                                let expr1_0 =
                                                    constructor_sink_load(ctx, pattern10_0)?;
                                                let expr2_0 = constructor_add_logical_mem(
                                                    ctx, pattern3_0, expr0_0, &expr1_0,
                                                )?;
                                                let expr3_0 =
                                                    constructor_output_ifcout(ctx, expr2_0)?;
                                                return Some(expr3_0);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Band => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) =
                                C::uimm16shifted_from_inverted_value(ctx, pattern7_0)
                            {
                                // Rule at src/isa/s390x/lower.isle line 1010.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = constructor_and_uimm16shifted(
                                    ctx, pattern3_0, expr0_0, pattern8_0,
                                )?;
                                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                        &Opcode::Bor => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::uimm16shifted_from_value(ctx, pattern7_0) {
                                // Rule at src/isa/s390x/lower.isle line 1036.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = constructor_or_uimm16shifted(
                                    ctx, pattern3_0, expr0_0, pattern8_0,
                                )?;
                                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::IntAddTrap {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    code: ref pattern5_2,
                } => {
                    if let &Opcode::UaddOverflowTrap = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        let pattern8_0 = C::value_type(ctx, pattern7_0);
                        if let Some(pattern9_0) = C::ty_32_or_64(ctx, pattern8_0) {
                            if let Some(pattern10_0) = C::sinkable_inst(ctx, pattern7_0) {
                                let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                if let &InstructionData::Load {
                                    opcode: ref pattern12_0,
                                    arg: pattern12_1,
                                    flags: pattern12_2,
                                    offset: pattern12_3,
                                } = &pattern11_0
                                {
                                    if let &Opcode::Load = pattern12_0 {
                                        if let Some(()) = C::bigendian(ctx, pattern12_2) {
                                            // Rule at src/isa/s390x/lower.isle line 3904.
                                            let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                            let expr1_0 = constructor_sink_load(ctx, pattern10_0)?;
                                            let expr2_0 =
                                                constructor_add_logical_mem_with_flags_paired(
                                                    ctx, pattern3_0, expr0_0, &expr1_0,
                                                )?;
                                            let expr3_0: u8 = 3i128 as u8;
                                            let expr4_0 = C::mask_as_cond(ctx, expr3_0);
                                            let expr5_0 = constructor_trap_if_impl(
                                                ctx, &expr4_0, pattern5_2,
                                            )?;
                                            let expr6_0 =
                                                constructor_with_flags(ctx, &expr2_0, &expr5_0)?;
                                            let expr7_0 = C::output(ctx, expr6_0);
                                            return Some(expr7_0);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    if let &InstructionData::Store {
        opcode: ref pattern2_0,
        args: ref pattern2_1,
        flags: pattern2_2,
        offset: pattern2_3,
    } = &pattern1_0
    {
        if let &Opcode::Store = pattern2_0 {
            let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
            if let Some(pattern5_0) = C::def_inst(ctx, pattern4_0) {
                let pattern6_0 = C::inst_data(ctx, pattern5_0);
                if let &InstructionData::BinaryImm8 {
                    opcode: ref pattern7_0,
                    arg: pattern7_1,
                    imm: pattern7_2,
                } = &pattern6_0
                {
                    if let &Opcode::Extractlane = pattern7_0 {
                        let pattern9_0 = C::value_type(ctx, pattern7_1);
                        let pattern10_0 = C::u8_from_uimm8(ctx, pattern7_2);
                        if let Some(()) = C::bigendian(ctx, pattern2_2) {
                            // Rule at src/isa/s390x/lower.isle line 1914.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr1_0 =
                                constructor_lower_address(ctx, pattern2_2, pattern4_1, pattern2_3)?;
                            let expr2_0 = C::be_lane_idx(ctx, pattern9_0, pattern10_0);
                            let expr3_0 = constructor_vec_store_lane(
                                ctx, pattern9_0, expr0_0, &expr1_0, expr2_0,
                            )?;
                            let expr4_0 = constructor_side_effect(ctx, &expr3_0)?;
                            return Some(expr4_0);
                        }
                    }
                }
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if let Some((pattern3_0, pattern3_1)) = C::multi_lane(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::LoadNoOffset {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
            } = &pattern4_0
            {
                if let &Opcode::Bitcast = pattern5_0 {
                    let pattern7_0 = C::value_type(ctx, pattern5_1);
                    if let Some((pattern8_0, pattern8_1)) = C::multi_lane(ctx, pattern7_0) {
                        if pattern8_0 == pattern3_0 {
                            if pattern8_1 == pattern3_1 {
                                // Rule at src/isa/s390x/lower.isle line 1767.
                                let expr0_0 = constructor_output_value(ctx, pattern5_1)?;
                                return Some(expr0_0);
                            }
                        }
                    }
                }
            }
        }
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Iadd => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            let pattern8_0 = C::value_type(ctx, pattern7_1);
                            if let Some(pattern9_0) = C::ty_32_or_64(ctx, pattern8_0) {
                                if let Some(pattern10_0) = C::sinkable_inst(ctx, pattern7_1) {
                                    let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                    if let &InstructionData::Load {
                                        opcode: ref pattern12_0,
                                        arg: pattern12_1,
                                        flags: pattern12_2,
                                        offset: pattern12_3,
                                    } = &pattern11_0
                                    {
                                        if let &Opcode::Load = pattern12_0 {
                                            if let Some(()) = C::bigendian(ctx, pattern12_2) {
                                                // Rule at src/isa/s390x/lower.isle line 87.
                                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                                let expr1_0 =
                                                    constructor_sink_load(ctx, pattern10_0)?;
                                                let expr2_0 = constructor_add_mem(
                                                    ctx, pattern3_0, expr0_0, &expr1_0,
                                                )?;
                                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                                return Some(expr3_0);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Isub => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            let pattern8_0 = C::value_type(ctx, pattern7_1);
                            if let Some(pattern9_0) = C::ty_32_or_64(ctx, pattern8_0) {
                                if let Some(pattern10_0) = C::sinkable_inst(ctx, pattern7_1) {
                                    let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                    if let &InstructionData::Load {
                                        opcode: ref pattern12_0,
                                        arg: pattern12_1,
                                        flags: pattern12_2,
                                        offset: pattern12_3,
                                    } = &pattern11_0
                                    {
                                        if let &Opcode::Load = pattern12_0 {
                                            if let Some(()) = C::bigendian(ctx, pattern12_2) {
                                                // Rule at src/isa/s390x/lower.isle line 159.
                                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                                let expr1_0 =
                                                    constructor_sink_load(ctx, pattern10_0)?;
                                                let expr2_0 = constructor_sub_mem(
                                                    ctx, pattern3_0, expr0_0, &expr1_0,
                                                )?;
                                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                                return Some(expr3_0);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Imul => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            let pattern8_0 = C::value_type(ctx, pattern7_1);
                            if let Some(pattern9_0) = C::ty_32_or_64(ctx, pattern8_0) {
                                if let Some(pattern10_0) = C::sinkable_inst(ctx, pattern7_1) {
                                    let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                    if let &InstructionData::Load {
                                        opcode: ref pattern12_0,
                                        arg: pattern12_1,
                                        flags: pattern12_2,
                                        offset: pattern12_3,
                                    } = &pattern11_0
                                    {
                                        if let &Opcode::Load = pattern12_0 {
                                            if let Some(()) = C::bigendian(ctx, pattern12_2) {
                                                // Rule at src/isa/s390x/lower.isle line 338.
                                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                                let expr1_0 =
                                                    constructor_sink_load(ctx, pattern10_0)?;
                                                let expr2_0 = constructor_mul_mem(
                                                    ctx, pattern3_0, expr0_0, &expr1_0,
                                                )?;
                                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                                return Some(expr3_0);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::IaddIfcout => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::sinkable_inst(ctx, pattern7_0) {
                                let pattern9_0 = C::inst_data(ctx, pattern8_0);
                                if let &InstructionData::Load {
                                    opcode: ref pattern10_0,
                                    arg: pattern10_1,
                                    flags: pattern10_2,
                                    offset: pattern10_3,
                                } = &pattern9_0
                                {
                                    if let &Opcode::Uload32 = pattern10_0 {
                                        if let Some(()) = C::bigendian(ctx, pattern10_2) {
                                            // Rule at src/isa/s390x/lower.isle line 232.
                                            let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                            let expr1_0 =
                                                constructor_sink_uload32(ctx, pattern8_0)?;
                                            let expr2_0 = constructor_add_logical_mem_zext32(
                                                ctx, pattern3_0, expr0_0, &expr1_0,
                                            )?;
                                            let expr3_0 = constructor_output_ifcout(ctx, expr2_0)?;
                                            return Some(expr3_0);
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Band => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) =
                                C::uimm16shifted_from_inverted_value(ctx, pattern7_1)
                            {
                                // Rule at src/isa/s390x/lower.isle line 1008.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = constructor_and_uimm16shifted(
                                    ctx, pattern3_0, expr0_0, pattern8_0,
                                )?;
                                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                        &Opcode::Bor => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::uimm16shifted_from_value(ctx, pattern7_1) {
                                // Rule at src/isa/s390x/lower.isle line 1034.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = constructor_or_uimm16shifted(
                                    ctx, pattern3_0, expr0_0, pattern8_0,
                                )?;
                                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::IntAddTrap {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    code: ref pattern5_2,
                } => {
                    if let &Opcode::UaddOverflowTrap = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::sinkable_inst(ctx, pattern7_0) {
                            let pattern9_0 = C::inst_data(ctx, pattern8_0);
                            if let &InstructionData::Load {
                                opcode: ref pattern10_0,
                                arg: pattern10_1,
                                flags: pattern10_2,
                                offset: pattern10_3,
                            } = &pattern9_0
                            {
                                if let &Opcode::Uload32 = pattern10_0 {
                                    if let Some(()) = C::bigendian(ctx, pattern10_2) {
                                        // Rule at src/isa/s390x/lower.isle line 3916.
                                        let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                        let expr1_0 = constructor_sink_uload32(ctx, pattern8_0)?;
                                        let expr2_0 =
                                            constructor_add_logical_mem_zext32_with_flags_paired(
                                                ctx, pattern3_0, expr0_0, &expr1_0,
                                            )?;
                                        let expr3_0: u8 = 3i128 as u8;
                                        let expr4_0 = C::mask_as_cond(ctx, expr3_0);
                                        let expr5_0 =
                                            constructor_trap_if_impl(ctx, &expr4_0, pattern5_2)?;
                                        let expr6_0 =
                                            constructor_with_flags(ctx, &expr2_0, &expr5_0)?;
                                        let expr7_0 = C::output(ctx, expr6_0);
                                        return Some(expr7_0);
                                    }
                                }
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::ty_vec128(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Rotl => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::i64_from_value(ctx, pattern7_1) {
                            // Rule at src/isa/s390x/lower.isle line 819.
                            let expr0_0 = C::mask_amt_imm(ctx, pattern3_0, pattern8_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 =
                                constructor_vec_rot_imm(ctx, pattern3_0, expr1_0, expr0_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                    &Opcode::Rotr => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::i64_from_negated_value(ctx, pattern7_1) {
                            // Rule at src/isa/s390x/lower.isle line 879.
                            let expr0_0 = C::mask_amt_imm(ctx, pattern3_0, pattern8_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 =
                                constructor_vec_rot_imm(ctx, pattern3_0, expr1_0, expr0_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                    _ => {}
                }
            }
        }
        let pattern3_0 = C::inst_data(ctx, pattern0_0);
        if let &InstructionData::Unary {
            opcode: ref pattern4_0,
            arg: pattern4_1,
        } = &pattern3_0
        {
            match pattern4_0 {
                &Opcode::Splat => {
                    if let Some(pattern6_0) = C::sinkable_inst(ctx, pattern4_1) {
                        let pattern7_0 = C::inst_data(ctx, pattern6_0);
                        if let &InstructionData::Load {
                            opcode: ref pattern8_0,
                            arg: pattern8_1,
                            flags: pattern8_2,
                            offset: pattern8_3,
                        } = &pattern7_0
                        {
                            if let &Opcode::Load = pattern8_0 {
                                if let Some(()) = C::littleendian(ctx, pattern8_2) {
                                    // Rule at src/isa/s390x/lower.isle line 1983.
                                    let expr0_0 = constructor_sink_load(ctx, pattern6_0)?;
                                    let expr1_0 = constructor_vec_load_replicate_little(
                                        ctx, pattern2_0, &expr0_0,
                                    )?;
                                    let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                    return Some(expr2_0);
                                }
                            }
                        }
                    }
                }
                &Opcode::ScalarToVector => {
                    if let Some(pattern6_0) = C::sinkable_inst(ctx, pattern4_1) {
                        let pattern7_0 = C::inst_data(ctx, pattern6_0);
                        if let &InstructionData::Load {
                            opcode: ref pattern8_0,
                            arg: pattern8_1,
                            flags: pattern8_2,
                            offset: pattern8_3,
                        } = &pattern7_0
                        {
                            if let &Opcode::Load = pattern8_0 {
                                if let Some(()) = C::littleendian(ctx, pattern8_2) {
                                    // Rule at src/isa/s390x/lower.isle line 2044.
                                    let expr0_0: u128 = 0i128 as u128;
                                    let expr1_0 = constructor_vec_imm(ctx, pattern2_0, expr0_0)?;
                                    let expr2_0 = constructor_sink_load(ctx, pattern6_0)?;
                                    let expr3_0: u8 = 0i128 as u8;
                                    let expr4_0 = C::be_lane_idx(ctx, pattern2_0, expr3_0);
                                    let expr5_0 = constructor_vec_load_lane_little(
                                        ctx, pattern2_0, expr1_0, &expr2_0, expr4_0,
                                    )?;
                                    let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                                    return Some(expr6_0);
                                }
                            }
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    match &pattern1_0 {
        &InstructionData::Store {
            opcode: ref pattern2_0,
            args: ref pattern2_1,
            flags: pattern2_2,
            offset: pattern2_3,
        } => {
            if let &Opcode::Store = pattern2_0 {
                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                if let Some(pattern5_0) = C::def_inst(ctx, pattern4_0) {
                    let pattern6_0 = C::inst_data(ctx, pattern5_0);
                    if let &InstructionData::BinaryImm8 {
                        opcode: ref pattern7_0,
                        arg: pattern7_1,
                        imm: pattern7_2,
                    } = &pattern6_0
                    {
                        if let &Opcode::Extractlane = pattern7_0 {
                            let pattern9_0 = C::value_type(ctx, pattern7_1);
                            let pattern10_0 = C::u8_from_uimm8(ctx, pattern7_2);
                            if let Some(()) = C::littleendian(ctx, pattern2_2) {
                                // Rule at src/isa/s390x/lower.isle line 1921.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = constructor_lower_address(
                                    ctx, pattern2_2, pattern4_1, pattern2_3,
                                )?;
                                let expr2_0 = C::be_lane_idx(ctx, pattern9_0, pattern10_0);
                                let expr3_0 = constructor_vec_store_lane_little(
                                    ctx, pattern9_0, expr0_0, &expr1_0, expr2_0,
                                )?;
                                let expr4_0 = constructor_side_effect(ctx, &expr3_0)?;
                                return Some(expr4_0);
                            }
                        }
                    }
                }
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref pattern2_0,
            args: ref pattern2_1,
            imm: pattern2_2,
        } => {
            if let &Opcode::Insertlane = pattern2_0 {
                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                let pattern5_0 = C::value_type(ctx, pattern4_0);
                if let Some(pattern6_0) = C::sinkable_inst(ctx, pattern4_1) {
                    let pattern7_0 = C::inst_data(ctx, pattern6_0);
                    if let &InstructionData::Load {
                        opcode: ref pattern8_0,
                        arg: pattern8_1,
                        flags: pattern8_2,
                        offset: pattern8_3,
                    } = &pattern7_0
                    {
                        if let &Opcode::Load = pattern8_0 {
                            if let Some(()) = C::littleendian(ctx, pattern8_2) {
                                let pattern11_0 = C::u8_from_uimm8(ctx, pattern2_2);
                                // Rule at src/isa/s390x/lower.isle line 1816.
                                let expr0_0 = C::put_in_reg(ctx, pattern4_0);
                                let expr1_0 = constructor_sink_load(ctx, pattern6_0)?;
                                let expr2_0 = C::be_lane_idx(ctx, pattern5_0, pattern11_0);
                                let expr3_0 = constructor_vec_load_lane_little(
                                    ctx, pattern5_0, expr0_0, &expr1_0, expr2_0,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                        }
                    }
                }
            }
        }
        _ => {}
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if pattern2_0 == I128 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Ishl => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 713.
                        let expr0_0 = constructor_amt_vr(ctx, pattern7_1)?;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 = constructor_vec_lshl_by_byte(ctx, expr1_0, expr0_0)?;
                        let expr3_0 = constructor_vec_lshl_by_bit(ctx, expr2_0, expr0_0)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                    &Opcode::Ushr => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 744.
                        let expr0_0 = constructor_amt_vr(ctx, pattern7_1)?;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 = constructor_vec_lshr_by_byte(ctx, expr1_0, expr0_0)?;
                        let expr3_0 = constructor_vec_lshr_by_bit(ctx, expr2_0, expr0_0)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                    &Opcode::Sshr => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 775.
                        let expr0_0 = constructor_amt_vr(ctx, pattern7_1)?;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 = constructor_vec_ashr_by_byte(ctx, expr1_0, expr0_0)?;
                        let expr3_0 = constructor_vec_ashr_by_bit(ctx, expr2_0, expr0_0)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                    _ => {}
                }
            }
        }
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Iadd => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            let pattern8_0 = C::value_type(ctx, pattern7_1);
                            if pattern8_0 == I16 {
                                if let Some(pattern10_0) = C::sinkable_inst(ctx, pattern7_1) {
                                    let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                    if let &InstructionData::Load {
                                        opcode: ref pattern12_0,
                                        arg: pattern12_1,
                                        flags: pattern12_2,
                                        offset: pattern12_3,
                                    } = &pattern11_0
                                    {
                                        if let &Opcode::Load = pattern12_0 {
                                            if let Some(()) = C::bigendian(ctx, pattern12_2) {
                                                // Rule at src/isa/s390x/lower.isle line 93.
                                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                                let expr1_0 =
                                                    constructor_sink_load(ctx, pattern10_0)?;
                                                let expr2_0 = constructor_add_mem_sext16(
                                                    ctx, pattern3_0, expr0_0, &expr1_0,
                                                )?;
                                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                                return Some(expr3_0);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Isub => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            let pattern8_0 = C::value_type(ctx, pattern7_1);
                            if pattern8_0 == I16 {
                                if let Some(pattern10_0) = C::sinkable_inst(ctx, pattern7_1) {
                                    let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                    if let &InstructionData::Load {
                                        opcode: ref pattern12_0,
                                        arg: pattern12_1,
                                        flags: pattern12_2,
                                        offset: pattern12_3,
                                    } = &pattern11_0
                                    {
                                        if let &Opcode::Load = pattern12_0 {
                                            if let Some(()) = C::bigendian(ctx, pattern12_2) {
                                                // Rule at src/isa/s390x/lower.isle line 163.
                                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                                let expr1_0 =
                                                    constructor_sink_load(ctx, pattern10_0)?;
                                                let expr2_0 = constructor_sub_mem_sext16(
                                                    ctx, pattern3_0, expr0_0, &expr1_0,
                                                )?;
                                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                                return Some(expr3_0);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Imul => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            let pattern8_0 = C::value_type(ctx, pattern7_1);
                            if pattern8_0 == I16 {
                                if let Some(pattern10_0) = C::sinkable_inst(ctx, pattern7_1) {
                                    let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                    if let &InstructionData::Load {
                                        opcode: ref pattern12_0,
                                        arg: pattern12_1,
                                        flags: pattern12_2,
                                        offset: pattern12_3,
                                    } = &pattern11_0
                                    {
                                        if let &Opcode::Load = pattern12_0 {
                                            if let Some(()) = C::bigendian(ctx, pattern12_2) {
                                                // Rule at src/isa/s390x/lower.isle line 344.
                                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                                let expr1_0 =
                                                    constructor_sink_load(ctx, pattern10_0)?;
                                                let expr2_0 = constructor_mul_mem_sext16(
                                                    ctx, pattern3_0, expr0_0, &expr1_0,
                                                )?;
                                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                                return Some(expr3_0);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::IaddIfcout => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::def_inst(ctx, pattern7_1) {
                                let pattern9_0 = C::inst_data(ctx, pattern8_0);
                                if let &InstructionData::Unary {
                                    opcode: ref pattern10_0,
                                    arg: pattern10_1,
                                } = &pattern9_0
                                {
                                    if let &Opcode::Uextend = pattern10_0 {
                                        let pattern12_0 = C::value_type(ctx, pattern10_1);
                                        if pattern12_0 == I32 {
                                            // Rule at src/isa/s390x/lower.isle line 212.
                                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                            let expr1_0 = C::put_in_reg(ctx, pattern10_1);
                                            let expr2_0 = constructor_add_logical_reg_zext32(
                                                ctx, pattern3_0, expr0_0, expr1_0,
                                            )?;
                                            let expr3_0 = constructor_output_ifcout(ctx, expr2_0)?;
                                            return Some(expr3_0);
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Band => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) =
                                C::uimm32shifted_from_inverted_value(ctx, pattern7_0)
                            {
                                // Rule at src/isa/s390x/lower.isle line 1014.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = constructor_and_uimm32shifted(
                                    ctx, pattern3_0, expr0_0, pattern8_0,
                                )?;
                                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                        &Opcode::Bor => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::uimm32shifted_from_value(ctx, pattern7_0) {
                                // Rule at src/isa/s390x/lower.isle line 1040.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = constructor_or_uimm32shifted(
                                    ctx, pattern3_0, expr0_0, pattern8_0,
                                )?;
                                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                        &Opcode::Bxor => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::uimm32shifted_from_value(ctx, pattern7_0) {
                                // Rule at src/isa/s390x/lower.isle line 1063.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = constructor_xor_uimm32shifted(
                                    ctx, pattern3_0, expr0_0, pattern8_0,
                                )?;
                                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::IntAddTrap {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    code: ref pattern5_2,
                } => {
                    if let &Opcode::UaddOverflowTrap = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::def_inst(ctx, pattern7_1) {
                            let pattern9_0 = C::inst_data(ctx, pattern8_0);
                            if let &InstructionData::Unary {
                                opcode: ref pattern10_0,
                                arg: pattern10_1,
                            } = &pattern9_0
                            {
                                if let &Opcode::Uextend = pattern10_0 {
                                    let pattern12_0 = C::value_type(ctx, pattern10_1);
                                    if pattern12_0 == I32 {
                                        // Rule at src/isa/s390x/lower.isle line 3875.
                                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                        let expr1_0 = C::put_in_reg(ctx, pattern10_1);
                                        let expr2_0 =
                                            constructor_add_logical_reg_zext32_with_flags_paired(
                                                ctx, pattern3_0, expr0_0, expr1_0,
                                            )?;
                                        let expr3_0: u8 = 3i128 as u8;
                                        let expr4_0 = C::mask_as_cond(ctx, expr3_0);
                                        let expr5_0 =
                                            constructor_trap_if_impl(ctx, &expr4_0, pattern5_2)?;
                                        let expr6_0 =
                                            constructor_with_flags(ctx, &expr2_0, &expr5_0)?;
                                        let expr7_0 = C::output(ctx, expr6_0);
                                        return Some(expr7_0);
                                    }
                                }
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::ty_vec128(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Rotl => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 815.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = constructor_amt_reg(ctx, pattern7_1)?;
                        let expr2_0 = constructor_vec_rot_reg(ctx, pattern3_0, expr0_0, expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                    &Opcode::Rotr => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 873.
                        let expr0_0: Type = I32;
                        let expr1_0 = constructor_amt_reg(ctx, pattern7_1)?;
                        let expr2_0 = constructor_neg_reg(ctx, expr0_0, expr1_0)?;
                        let expr3_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr4_0 = constructor_vec_rot_reg(ctx, pattern3_0, expr3_0, expr2_0)?;
                        let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                        return Some(expr5_0);
                    }
                    _ => {}
                }
            }
        }
        if let Some(pattern3_0) = C::gpr64_ty(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::Uload16 = pattern5_0 {
                    if let Some(()) = C::bigendian(ctx, pattern5_2) {
                        // Rule at src/isa/s390x/lower.isle line 2508.
                        let expr0_0: Type = I16;
                        let expr1_0 =
                            constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                        let expr2_0 = constructor_zext64_mem(ctx, expr0_0, &expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                }
            }
        }
        if let Some(pattern3_0) = C::vr128_ty(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::LoadNoOffset {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                } => {
                    if let &Opcode::Bitcast = pattern5_0 {
                        let pattern7_0 = C::value_type(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::vr128_ty(ctx, pattern7_0) {
                            // Rule at src/isa/s390x/lower.isle line 1777.
                            let expr0_0 = constructor_lane_order_from_memflags(ctx, pattern5_2)?;
                            let expr1_0 = constructor_lane_order_from_memflags(ctx, pattern5_2)?;
                            let expr2_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr3_0 =
                                constructor_abi_vec_elt_rev(ctx, &expr1_0, pattern8_0, expr2_0)?;
                            let expr4_0 =
                                constructor_abi_vec_elt_rev(ctx, &expr0_0, pattern3_0, expr3_0)?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                    }
                }
                &InstructionData::Load {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                    offset: pattern5_3,
                } => {
                    if let &Opcode::Load = pattern5_0 {
                        if let Some(()) = C::bigendian(ctx, pattern5_2) {
                            let mut closure8 = || {
                                let expr0_0 = C::lane_order(ctx)?;
                                return Some(expr0_0);
                            };
                            if let Some(pattern8_0) = closure8() {
                                if let &LaneOrder::BigEndian = &pattern8_0 {
                                    // Rule at src/isa/s390x/lower.isle line 2367.
                                    let expr0_0 = constructor_lower_address(
                                        ctx, pattern5_2, pattern5_1, pattern5_3,
                                    )?;
                                    let expr1_0 = constructor_vec_load(ctx, pattern3_0, &expr0_0)?;
                                    let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                    return Some(expr2_0);
                                }
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        let pattern3_0 = C::inst_data(ctx, pattern0_0);
        if let &InstructionData::Unary {
            opcode: ref pattern4_0,
            arg: pattern4_1,
        } = &pattern3_0
        {
            match pattern4_0 {
                &Opcode::Splat => {
                    if let Some(pattern6_0) = C::sinkable_inst(ctx, pattern4_1) {
                        let pattern7_0 = C::inst_data(ctx, pattern6_0);
                        if let &InstructionData::Load {
                            opcode: ref pattern8_0,
                            arg: pattern8_1,
                            flags: pattern8_2,
                            offset: pattern8_3,
                        } = &pattern7_0
                        {
                            if let &Opcode::Load = pattern8_0 {
                                if let Some(()) = C::bigendian(ctx, pattern8_2) {
                                    // Rule at src/isa/s390x/lower.isle line 1979.
                                    let expr0_0 = constructor_sink_load(ctx, pattern6_0)?;
                                    let expr1_0 =
                                        constructor_vec_load_replicate(ctx, pattern2_0, &expr0_0)?;
                                    let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                    return Some(expr2_0);
                                }
                            }
                        }
                    }
                }
                &Opcode::ScalarToVector => {
                    if let Some(pattern6_0) = C::sinkable_inst(ctx, pattern4_1) {
                        let pattern7_0 = C::inst_data(ctx, pattern6_0);
                        if let &InstructionData::Load {
                            opcode: ref pattern8_0,
                            arg: pattern8_1,
                            flags: pattern8_2,
                            offset: pattern8_3,
                        } = &pattern7_0
                        {
                            if let &Opcode::Load = pattern8_0 {
                                if let Some(()) = C::bigendian(ctx, pattern8_2) {
                                    // Rule at src/isa/s390x/lower.isle line 2040.
                                    let expr0_0: u128 = 0i128 as u128;
                                    let expr1_0 = constructor_vec_imm(ctx, pattern2_0, expr0_0)?;
                                    let expr2_0 = constructor_sink_load(ctx, pattern6_0)?;
                                    let expr3_0: u8 = 0i128 as u8;
                                    let expr4_0 = C::be_lane_idx(ctx, pattern2_0, expr3_0);
                                    let expr5_0 = constructor_vec_load_lane(
                                        ctx, pattern2_0, expr1_0, &expr2_0, expr4_0,
                                    )?;
                                    let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                                    return Some(expr6_0);
                                }
                            }
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    match &pattern1_0 {
        &InstructionData::Store {
            opcode: ref pattern2_0,
            args: ref pattern2_1,
            flags: pattern2_2,
            offset: pattern2_3,
        } => {
            if let &Opcode::Store = pattern2_0 {
                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                let pattern5_0 = C::value_type(ctx, pattern4_0);
                if let Some(pattern6_0) = C::vr128_ty(ctx, pattern5_0) {
                    if let Some(()) = C::bigendian(ctx, pattern2_2) {
                        let mut closure8 = || {
                            let expr0_0 = C::lane_order(ctx)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern8_0) = closure8() {
                            if let &LaneOrder::BigEndian = &pattern8_0 {
                                // Rule at src/isa/s390x/lower.isle line 2697.
                                let expr0_0 = C::put_in_reg(ctx, pattern4_0);
                                let expr1_0 = constructor_lower_address(
                                    ctx, pattern2_2, pattern4_1, pattern2_3,
                                )?;
                                let expr2_0 = constructor_vec_store(ctx, expr0_0, &expr1_0)?;
                                let expr3_0 = constructor_side_effect(ctx, &expr2_0)?;
                                return Some(expr3_0);
                            }
                        }
                    }
                }
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref pattern2_0,
            args: ref pattern2_1,
            imm: pattern2_2,
        } => {
            if let &Opcode::Insertlane = pattern2_0 {
                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                let pattern5_0 = C::value_type(ctx, pattern4_0);
                if let Some(pattern6_0) = C::sinkable_inst(ctx, pattern4_1) {
                    let pattern7_0 = C::inst_data(ctx, pattern6_0);
                    if let &InstructionData::Load {
                        opcode: ref pattern8_0,
                        arg: pattern8_1,
                        flags: pattern8_2,
                        offset: pattern8_3,
                    } = &pattern7_0
                    {
                        if let &Opcode::Load = pattern8_0 {
                            if let Some(()) = C::bigendian(ctx, pattern8_2) {
                                let pattern11_0 = C::u8_from_uimm8(ctx, pattern2_2);
                                // Rule at src/isa/s390x/lower.isle line 1811.
                                let expr0_0 = C::put_in_reg(ctx, pattern4_0);
                                let expr1_0 = constructor_sink_load(ctx, pattern6_0)?;
                                let expr2_0 = C::be_lane_idx(ctx, pattern5_0, pattern11_0);
                                let expr3_0 = constructor_vec_load_lane(
                                    ctx, pattern5_0, expr0_0, &expr1_0, expr2_0,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                        }
                    }
                }
            }
        }
        _ => {}
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Ineg => {
                            if let Some(pattern7_0) = C::def_inst(ctx, pattern5_1) {
                                let pattern8_0 = C::inst_data(ctx, pattern7_0);
                                if let &InstructionData::Unary {
                                    opcode: ref pattern9_0,
                                    arg: pattern9_1,
                                } = &pattern8_0
                                {
                                    if let &Opcode::Sextend = pattern9_0 {
                                        let pattern11_0 = C::value_type(ctx, pattern9_1);
                                        if pattern11_0 == I32 {
                                            // Rule at src/isa/s390x/lower.isle line 268.
                                            let expr0_0 = C::put_in_reg(ctx, pattern9_1);
                                            let expr1_0 = constructor_neg_reg_sext32(
                                                ctx, pattern3_0, expr0_0,
                                            )?;
                                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                            return Some(expr2_0);
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Iabs => {
                            if let Some(pattern7_0) = C::def_inst(ctx, pattern5_1) {
                                let pattern8_0 = C::inst_data(ctx, pattern7_0);
                                if let &InstructionData::Unary {
                                    opcode: ref pattern9_0,
                                    arg: pattern9_1,
                                } = &pattern8_0
                                {
                                    if let &Opcode::Sextend = pattern9_0 {
                                        let pattern11_0 = C::value_type(ctx, pattern9_1);
                                        if pattern11_0 == I32 {
                                            // Rule at src/isa/s390x/lower.isle line 244.
                                            let expr0_0 = C::put_in_reg(ctx, pattern9_1);
                                            let expr1_0 = constructor_abs_reg_sext32(
                                                ctx, pattern3_0, expr0_0,
                                            )?;
                                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                            return Some(expr2_0);
                                        }
                                    }
                                }
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Iadd => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::sinkable_inst(ctx, pattern7_1) {
                                let pattern9_0 = C::inst_data(ctx, pattern8_0);
                                if let &InstructionData::Load {
                                    opcode: ref pattern10_0,
                                    arg: pattern10_1,
                                    flags: pattern10_2,
                                    offset: pattern10_3,
                                } = &pattern9_0
                                {
                                    if let &Opcode::Sload16 = pattern10_0 {
                                        if let Some(()) = C::bigendian(ctx, pattern10_2) {
                                            // Rule at src/isa/s390x/lower.isle line 99.
                                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                            let expr1_0 =
                                                constructor_sink_sload16(ctx, pattern8_0)?;
                                            let expr2_0 = constructor_add_mem_sext16(
                                                ctx, pattern3_0, expr0_0, &expr1_0,
                                            )?;
                                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                            return Some(expr3_0);
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Isub => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::sinkable_inst(ctx, pattern7_1) {
                                let pattern9_0 = C::inst_data(ctx, pattern8_0);
                                if let &InstructionData::Load {
                                    opcode: ref pattern10_0,
                                    arg: pattern10_1,
                                    flags: pattern10_2,
                                    offset: pattern10_3,
                                } = &pattern9_0
                                {
                                    if let &Opcode::Sload16 = pattern10_0 {
                                        if let Some(()) = C::bigendian(ctx, pattern10_2) {
                                            // Rule at src/isa/s390x/lower.isle line 167.
                                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                            let expr1_0 =
                                                constructor_sink_sload16(ctx, pattern8_0)?;
                                            let expr2_0 = constructor_sub_mem_sext16(
                                                ctx, pattern3_0, expr0_0, &expr1_0,
                                            )?;
                                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                            return Some(expr3_0);
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Imul => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::sinkable_inst(ctx, pattern7_1) {
                                let pattern9_0 = C::inst_data(ctx, pattern8_0);
                                if let &InstructionData::Load {
                                    opcode: ref pattern10_0,
                                    arg: pattern10_1,
                                    flags: pattern10_2,
                                    offset: pattern10_3,
                                } = &pattern9_0
                                {
                                    if let &Opcode::Sload16 = pattern10_0 {
                                        if let Some(()) = C::bigendian(ctx, pattern10_2) {
                                            // Rule at src/isa/s390x/lower.isle line 350.
                                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                            let expr1_0 =
                                                constructor_sink_sload16(ctx, pattern8_0)?;
                                            let expr2_0 = constructor_mul_mem_sext16(
                                                ctx, pattern3_0, expr0_0, &expr1_0,
                                            )?;
                                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                            return Some(expr3_0);
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::IaddIfcout => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::u32_from_value(ctx, pattern7_1) {
                                // Rule at src/isa/s390x/lower.isle line 218.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = constructor_add_logical_zimm32(
                                    ctx, pattern3_0, expr0_0, pattern8_0,
                                )?;
                                let expr2_0 = constructor_output_ifcout(ctx, expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                        &Opcode::Band => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) =
                                C::uimm32shifted_from_inverted_value(ctx, pattern7_1)
                            {
                                // Rule at src/isa/s390x/lower.isle line 1012.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = constructor_and_uimm32shifted(
                                    ctx, pattern3_0, expr0_0, pattern8_0,
                                )?;
                                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                        &Opcode::Bor => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::uimm32shifted_from_value(ctx, pattern7_1) {
                                // Rule at src/isa/s390x/lower.isle line 1038.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = constructor_or_uimm32shifted(
                                    ctx, pattern3_0, expr0_0, pattern8_0,
                                )?;
                                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                        &Opcode::Bxor => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::uimm32shifted_from_value(ctx, pattern7_1) {
                                // Rule at src/isa/s390x/lower.isle line 1061.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = constructor_xor_uimm32shifted(
                                    ctx, pattern3_0, expr0_0, pattern8_0,
                                )?;
                                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::IntAddTrap {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    code: ref pattern5_2,
                } => {
                    if let &Opcode::UaddOverflowTrap = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::u32_from_value(ctx, pattern7_1) {
                            // Rule at src/isa/s390x/lower.isle line 3887.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = constructor_add_logical_zimm32_with_flags_paired(
                                ctx, pattern3_0, expr0_0, pattern8_0,
                            )?;
                            let expr2_0: u8 = 3i128 as u8;
                            let expr3_0 = C::mask_as_cond(ctx, expr2_0);
                            let expr4_0 = constructor_trap_if_impl(ctx, &expr3_0, pattern5_2)?;
                            let expr5_0 = constructor_with_flags(ctx, &expr1_0, &expr4_0)?;
                            let expr6_0 = C::output(ctx, expr5_0);
                            return Some(expr6_0);
                        }
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::ty_8_or_16(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Rotl => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::i64_from_value(ctx, pattern7_1) {
                            if let Some(pattern9_0) = C::i64_from_negated_value(ctx, pattern7_1) {
                                // Rule at src/isa/s390x/lower.isle line 805.
                                let expr0_0 = constructor_put_in_reg_zext32(ctx, pattern7_0)?;
                                let expr1_0 = constructor_ty_ext32(ctx, pattern3_0)?;
                                let expr2_0 = C::mask_amt_imm(ctx, pattern3_0, pattern8_0);
                                let expr3_0 = C::mask_amt_imm(ctx, pattern3_0, pattern9_0);
                                let expr4_0 = constructor_lshl_imm(ctx, expr1_0, expr0_0, expr2_0)?;
                                let expr5_0 = constructor_lshr_imm(ctx, expr1_0, expr0_0, expr3_0)?;
                                let expr6_0 =
                                    constructor_or_reg(ctx, pattern3_0, expr4_0, expr5_0)?;
                                let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                                return Some(expr7_0);
                            }
                        }
                    }
                    &Opcode::Rotr => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::i64_from_value(ctx, pattern7_1) {
                            if let Some(pattern9_0) = C::i64_from_negated_value(ctx, pattern7_1) {
                                // Rule at src/isa/s390x/lower.isle line 862.
                                let expr0_0 = constructor_put_in_reg_zext32(ctx, pattern7_0)?;
                                let expr1_0 = constructor_ty_ext32(ctx, pattern3_0)?;
                                let expr2_0 = C::mask_amt_imm(ctx, pattern3_0, pattern8_0);
                                let expr3_0 = C::mask_amt_imm(ctx, pattern3_0, pattern9_0);
                                let expr4_0 = constructor_lshl_imm(ctx, expr1_0, expr0_0, expr3_0)?;
                                let expr5_0 = constructor_lshr_imm(ctx, expr1_0, expr0_0, expr2_0)?;
                                let expr6_0 =
                                    constructor_or_reg(ctx, pattern3_0, expr4_0, expr5_0)?;
                                let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                                return Some(expr7_0);
                            }
                        }
                    }
                    _ => {}
                }
            }
        }
        if let Some(pattern3_0) = C::ty_scalar_float(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::LoadNoOffset {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
            } = &pattern4_0
            {
                if let &Opcode::Bitcast = pattern5_0 {
                    let pattern7_0 = C::value_type(ctx, pattern5_1);
                    if let Some(pattern8_0) = C::ty_scalar_float(ctx, pattern7_0) {
                        // Rule at src/isa/s390x/lower.isle line 1763.
                        let expr0_0 = constructor_output_value(ctx, pattern5_1)?;
                        return Some(expr0_0);
                    }
                }
            }
        }
        if let Some(pattern3_0) = C::ty_vec128(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Ishl => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::i64_from_value(ctx, pattern7_1) {
                            // Rule at src/isa/s390x/lower.isle line 708.
                            let expr0_0 = C::mask_amt_imm(ctx, pattern3_0, pattern8_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 =
                                constructor_vec_lshl_imm(ctx, pattern3_0, expr1_0, expr0_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                    &Opcode::Ushr => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::i64_from_value(ctx, pattern7_1) {
                            // Rule at src/isa/s390x/lower.isle line 739.
                            let expr0_0 = C::mask_amt_imm(ctx, pattern3_0, pattern8_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 =
                                constructor_vec_lshr_imm(ctx, pattern3_0, expr1_0, expr0_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                    &Opcode::Sshr => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::i64_from_value(ctx, pattern7_1) {
                            // Rule at src/isa/s390x/lower.isle line 770.
                            let expr0_0 = C::mask_amt_imm(ctx, pattern3_0, pattern8_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 =
                                constructor_vec_ashr_imm(ctx, pattern3_0, expr1_0, expr0_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                    _ => {}
                }
            }
        }
        if let Some(pattern3_0) = C::gpr32_ty(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::Uload16 = pattern5_0 {
                    if let Some(()) = C::bigendian(ctx, pattern5_2) {
                        // Rule at src/isa/s390x/lower.isle line 2497.
                        let expr0_0: Type = I16;
                        let expr1_0 =
                            constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                        let expr2_0 = constructor_zext32_mem(ctx, expr0_0, &expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                }
            }
        }
        if let Some(pattern3_0) = C::gpr64_ty(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::Sload16 = pattern5_0 {
                    if let Some(()) = C::bigendian(ctx, pattern5_2) {
                        // Rule at src/isa/s390x/lower.isle line 2533.
                        let expr0_0: Type = I16;
                        let expr1_0 =
                            constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                        let expr2_0 = constructor_sext64_mem(ctx, expr0_0, &expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                }
            }
        }
        if let Some(pattern3_0) = C::vr128_ty(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::Load = pattern5_0 {
                    if let Some(()) = C::littleendian(ctx, pattern5_2) {
                        let mut closure8 = || {
                            let expr0_0 = C::lane_order(ctx)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern8_0) = closure8() {
                            if let &LaneOrder::BigEndian = &pattern8_0 {
                                // Rule at src/isa/s390x/lower.isle line 2372.
                                let expr0_0 = constructor_vec_load_byte_rev(
                                    ctx, pattern3_0, pattern5_2, pattern5_1, pattern5_3,
                                )?;
                                let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
                                return Some(expr1_0);
                            }
                        }
                    }
                }
            }
        }
        let pattern3_0 = C::inst_data(ctx, pattern0_0);
        if let &InstructionData::Unary {
            opcode: ref pattern4_0,
            arg: pattern4_1,
        } = &pattern3_0
        {
            match pattern4_0 {
                &Opcode::Splat => {
                    if let Some(pattern6_0) = C::i16_from_value(ctx, pattern4_1) {
                        // Rule at src/isa/s390x/lower.isle line 1975.
                        let expr0_0 = constructor_vec_imm_replicate(ctx, pattern2_0, pattern6_0)?;
                        let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
                        return Some(expr1_0);
                    }
                }
                &Opcode::ScalarToVector => {
                    if let Some(pattern6_0) = C::i16_from_value(ctx, pattern4_1) {
                        // Rule at src/isa/s390x/lower.isle line 2036.
                        let expr0_0: u128 = 0i128 as u128;
                        let expr1_0 = constructor_vec_imm(ctx, pattern2_0, expr0_0)?;
                        let expr2_0: u8 = 0i128 as u8;
                        let expr3_0 = C::be_lane_idx(ctx, pattern2_0, expr2_0);
                        let expr4_0 = constructor_vec_insert_lane_imm(
                            ctx, pattern2_0, expr1_0, pattern6_0, expr3_0,
                        )?;
                        let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                        return Some(expr5_0);
                    }
                }
                _ => {}
            }
        }
    }
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    match &pattern1_0 {
        &InstructionData::Store {
            opcode: ref pattern2_0,
            args: ref pattern2_1,
            flags: pattern2_2,
            offset: pattern2_3,
        } => {
            if let &Opcode::Store = pattern2_0 {
                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                let pattern5_0 = C::value_type(ctx, pattern4_0);
                if let Some(pattern6_0) = C::vr128_ty(ctx, pattern5_0) {
                    if let Some(()) = C::littleendian(ctx, pattern2_2) {
                        let mut closure8 = || {
                            let expr0_0 = C::lane_order(ctx)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern8_0) = closure8() {
                            if let &LaneOrder::BigEndian = &pattern8_0 {
                                // Rule at src/isa/s390x/lower.isle line 2703.
                                let expr0_0 = C::put_in_reg(ctx, pattern4_0);
                                let expr1_0 = constructor_vec_store_byte_rev(
                                    ctx, pattern6_0, expr0_0, pattern2_2, pattern4_1, pattern2_3,
                                )?;
                                let expr2_0 = constructor_side_effect(ctx, &expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                    }
                }
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref pattern2_0,
            args: ref pattern2_1,
            imm: pattern2_2,
        } => {
            if let &Opcode::Insertlane = pattern2_0 {
                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                let pattern5_0 = C::value_type(ctx, pattern4_0);
                if let Some(pattern6_0) = C::i16_from_value(ctx, pattern4_1) {
                    let pattern7_0 = C::u8_from_uimm8(ctx, pattern2_2);
                    // Rule at src/isa/s390x/lower.isle line 1806.
                    let expr0_0 = C::put_in_reg(ctx, pattern4_0);
                    let expr1_0 = C::be_lane_idx(ctx, pattern5_0, pattern7_0);
                    let expr2_0 = constructor_vec_insert_lane_imm(
                        ctx, pattern5_0, expr0_0, pattern6_0, expr1_0,
                    )?;
                    let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                    return Some(expr3_0);
                }
            }
        }
        _ => {}
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if let Some(()) = C::mie2_enabled(ctx, pattern2_0) {
            if let Some(pattern4_0) = C::fits_in_64(ctx, pattern2_0) {
                let pattern5_0 = C::inst_data(ctx, pattern0_0);
                match &pattern5_0 {
                    &InstructionData::Unary {
                        opcode: ref pattern6_0,
                        arg: pattern6_1,
                    } => {
                        if let &Opcode::Bnot = pattern6_0 {
                            // Rule at src/isa/s390x/lower.isle line 988.
                            let expr0_0 = C::put_in_reg(ctx, pattern6_1);
                            let expr1_0 =
                                constructor_not_or_reg(ctx, pattern4_0, expr0_0, expr0_0)?;
                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                            return Some(expr2_0);
                        }
                    }
                    &InstructionData::Binary {
                        opcode: ref pattern6_0,
                        args: ref pattern6_1,
                    } => {
                        match pattern6_0 {
                            &Opcode::BandNot => {
                                let (pattern8_0, pattern8_1) =
                                    C::unpack_value_array_2(ctx, pattern6_1);
                                // Rule at src/isa/s390x/lower.isle line 1080.
                                let expr0_0 = C::put_in_reg(ctx, pattern8_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern8_1);
                                let expr2_0 =
                                    constructor_and_not_reg(ctx, pattern4_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                            &Opcode::BorNot => {
                                let (pattern8_0, pattern8_1) =
                                    C::unpack_value_array_2(ctx, pattern6_1);
                                // Rule at src/isa/s390x/lower.isle line 1095.
                                let expr0_0 = C::put_in_reg(ctx, pattern8_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern8_1);
                                let expr2_0 =
                                    constructor_or_not_reg(ctx, pattern4_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                            &Opcode::BxorNot => {
                                let (pattern8_0, pattern8_1) =
                                    C::unpack_value_array_2(ctx, pattern6_1);
                                // Rule at src/isa/s390x/lower.isle line 1110.
                                let expr0_0 = C::put_in_reg(ctx, pattern8_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern8_1);
                                let expr2_0 =
                                    constructor_not_xor_reg(ctx, pattern4_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                            _ => {}
                        }
                    }
                    &InstructionData::Ternary {
                        opcode: ref pattern6_0,
                        args: ref pattern6_1,
                    } => {
                        if let &Opcode::Bitselect = pattern6_0 {
                            let (pattern8_0, pattern8_1, pattern8_2) =
                                C::unpack_value_array_3(ctx, pattern6_1);
                            // Rule at src/isa/s390x/lower.isle line 1125.
                            let expr0_0 = C::put_in_reg(ctx, pattern8_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern8_1);
                            let expr2_0 = constructor_and_reg(ctx, pattern4_0, expr1_0, expr0_0)?;
                            let expr3_0 = C::put_in_reg(ctx, pattern8_2);
                            let expr4_0 =
                                constructor_and_not_reg(ctx, pattern4_0, expr3_0, expr0_0)?;
                            let expr5_0 = constructor_or_reg(ctx, pattern4_0, expr4_0, expr2_0)?;
                            let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                            return Some(expr6_0);
                        }
                    }
                    _ => {}
                }
            }
        }
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Ineg => {
                            // Rule at src/isa/s390x/lower.isle line 264.
                            let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr1_0 = constructor_neg_reg(ctx, pattern3_0, expr0_0)?;
                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                            return Some(expr2_0);
                        }
                        &Opcode::Iabs => {
                            // Rule at src/isa/s390x/lower.isle line 240.
                            let expr0_0 = constructor_ty_ext32(ctx, pattern3_0)?;
                            let expr1_0 = constructor_put_in_reg_sext32(ctx, pattern5_1)?;
                            let expr2_0 = constructor_abs_reg(ctx, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Iadd => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::sinkable_inst(ctx, pattern7_1) {
                                let pattern9_0 = C::inst_data(ctx, pattern8_0);
                                if let &InstructionData::Load {
                                    opcode: ref pattern10_0,
                                    arg: pattern10_1,
                                    flags: pattern10_2,
                                    offset: pattern10_3,
                                } = &pattern9_0
                                {
                                    if let &Opcode::Sload32 = pattern10_0 {
                                        if let Some(()) = C::bigendian(ctx, pattern10_2) {
                                            // Rule at src/isa/s390x/lower.isle line 103.
                                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                            let expr1_0 =
                                                constructor_sink_sload32(ctx, pattern8_0)?;
                                            let expr2_0 = constructor_add_mem_sext32(
                                                ctx, pattern3_0, expr0_0, &expr1_0,
                                            )?;
                                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                            return Some(expr3_0);
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Isub => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::sinkable_inst(ctx, pattern7_1) {
                                let pattern9_0 = C::inst_data(ctx, pattern8_0);
                                if let &InstructionData::Load {
                                    opcode: ref pattern10_0,
                                    arg: pattern10_1,
                                    flags: pattern10_2,
                                    offset: pattern10_3,
                                } = &pattern9_0
                                {
                                    if let &Opcode::Sload32 = pattern10_0 {
                                        if let Some(()) = C::bigendian(ctx, pattern10_2) {
                                            // Rule at src/isa/s390x/lower.isle line 169.
                                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                            let expr1_0 =
                                                constructor_sink_sload32(ctx, pattern8_0)?;
                                            let expr2_0 = constructor_sub_mem_sext32(
                                                ctx, pattern3_0, expr0_0, &expr1_0,
                                            )?;
                                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                            return Some(expr3_0);
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Imul => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::sinkable_inst(ctx, pattern7_1) {
                                let pattern9_0 = C::inst_data(ctx, pattern8_0);
                                if let &InstructionData::Load {
                                    opcode: ref pattern10_0,
                                    arg: pattern10_1,
                                    flags: pattern10_2,
                                    offset: pattern10_3,
                                } = &pattern9_0
                                {
                                    if let &Opcode::Sload32 = pattern10_0 {
                                        if let Some(()) = C::bigendian(ctx, pattern10_2) {
                                            // Rule at src/isa/s390x/lower.isle line 354.
                                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                            let expr1_0 =
                                                constructor_sink_sload32(ctx, pattern8_0)?;
                                            let expr2_0 = constructor_mul_mem_sext32(
                                                ctx, pattern3_0, expr0_0, &expr1_0,
                                            )?;
                                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                            return Some(expr3_0);
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::IaddIfcout => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            let pattern8_0 = C::value_type(ctx, pattern7_1);
                            if let Some(pattern9_0) = C::ty_32_or_64(ctx, pattern8_0) {
                                if let Some(pattern10_0) = C::sinkable_inst(ctx, pattern7_1) {
                                    let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                    if let &InstructionData::Load {
                                        opcode: ref pattern12_0,
                                        arg: pattern12_1,
                                        flags: pattern12_2,
                                        offset: pattern12_3,
                                    } = &pattern11_0
                                    {
                                        if let &Opcode::Load = pattern12_0 {
                                            if let Some(()) = C::bigendian(ctx, pattern12_2) {
                                                // Rule at src/isa/s390x/lower.isle line 224.
                                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                                let expr1_0 =
                                                    constructor_sink_load(ctx, pattern10_0)?;
                                                let expr2_0 = constructor_add_logical_mem(
                                                    ctx, pattern3_0, expr0_0, &expr1_0,
                                                )?;
                                                let expr3_0 =
                                                    constructor_output_ifcout(ctx, expr2_0)?;
                                                return Some(expr3_0);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Band => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            let pattern8_0 = C::value_type(ctx, pattern7_0);
                            if let Some(pattern9_0) = C::ty_32_or_64(ctx, pattern8_0) {
                                if let Some(pattern10_0) = C::sinkable_inst(ctx, pattern7_0) {
                                    let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                    if let &InstructionData::Load {
                                        opcode: ref pattern12_0,
                                        arg: pattern12_1,
                                        flags: pattern12_2,
                                        offset: pattern12_3,
                                    } = &pattern11_0
                                    {
                                        if let &Opcode::Load = pattern12_0 {
                                            if let Some(()) = C::bigendian(ctx, pattern12_2) {
                                                // Rule at src/isa/s390x/lower.isle line 1020.
                                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                                let expr1_0 =
                                                    constructor_sink_load(ctx, pattern10_0)?;
                                                let expr2_0 = constructor_and_mem(
                                                    ctx, pattern3_0, expr0_0, &expr1_0,
                                                )?;
                                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                                return Some(expr3_0);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Bor => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            let pattern8_0 = C::value_type(ctx, pattern7_0);
                            if let Some(pattern9_0) = C::ty_32_or_64(ctx, pattern8_0) {
                                if let Some(pattern10_0) = C::sinkable_inst(ctx, pattern7_0) {
                                    let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                    if let &InstructionData::Load {
                                        opcode: ref pattern12_0,
                                        arg: pattern12_1,
                                        flags: pattern12_2,
                                        offset: pattern12_3,
                                    } = &pattern11_0
                                    {
                                        if let &Opcode::Load = pattern12_0 {
                                            if let Some(()) = C::bigendian(ctx, pattern12_2) {
                                                // Rule at src/isa/s390x/lower.isle line 1046.
                                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                                let expr1_0 =
                                                    constructor_sink_load(ctx, pattern10_0)?;
                                                let expr2_0 = constructor_or_mem(
                                                    ctx, pattern3_0, expr0_0, &expr1_0,
                                                )?;
                                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                                return Some(expr3_0);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Bxor => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            let pattern8_0 = C::value_type(ctx, pattern7_0);
                            if let Some(pattern9_0) = C::ty_32_or_64(ctx, pattern8_0) {
                                if let Some(pattern10_0) = C::sinkable_inst(ctx, pattern7_0) {
                                    let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                    if let &InstructionData::Load {
                                        opcode: ref pattern12_0,
                                        arg: pattern12_1,
                                        flags: pattern12_2,
                                        offset: pattern12_3,
                                    } = &pattern11_0
                                    {
                                        if let &Opcode::Load = pattern12_0 {
                                            if let Some(()) = C::bigendian(ctx, pattern12_2) {
                                                // Rule at src/isa/s390x/lower.isle line 1069.
                                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                                let expr1_0 =
                                                    constructor_sink_load(ctx, pattern10_0)?;
                                                let expr2_0 = constructor_xor_mem(
                                                    ctx, pattern3_0, expr0_0, &expr1_0,
                                                )?;
                                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                                return Some(expr3_0);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::IntAddTrap {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    code: ref pattern5_2,
                } => {
                    if let &Opcode::UaddOverflowTrap = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        let pattern8_0 = C::value_type(ctx, pattern7_1);
                        if let Some(pattern9_0) = C::ty_32_or_64(ctx, pattern8_0) {
                            if let Some(pattern10_0) = C::sinkable_inst(ctx, pattern7_1) {
                                let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                if let &InstructionData::Load {
                                    opcode: ref pattern12_0,
                                    arg: pattern12_1,
                                    flags: pattern12_2,
                                    offset: pattern12_3,
                                } = &pattern11_0
                                {
                                    if let &Opcode::Load = pattern12_0 {
                                        if let Some(()) = C::bigendian(ctx, pattern12_2) {
                                            // Rule at src/isa/s390x/lower.isle line 3899.
                                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                            let expr1_0 = constructor_sink_load(ctx, pattern10_0)?;
                                            let expr2_0 =
                                                constructor_add_logical_mem_with_flags_paired(
                                                    ctx, pattern3_0, expr0_0, &expr1_0,
                                                )?;
                                            let expr3_0: u8 = 3i128 as u8;
                                            let expr4_0 = C::mask_as_cond(ctx, expr3_0);
                                            let expr5_0 = constructor_trap_if_impl(
                                                ctx, &expr4_0, pattern5_2,
                                            )?;
                                            let expr6_0 =
                                                constructor_with_flags(ctx, &expr2_0, &expr5_0)?;
                                            let expr7_0 = C::output(ctx, expr6_0);
                                            return Some(expr7_0);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::ty_32_or_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::AtomicCas {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
                flags: pattern5_2,
            } = &pattern4_0
            {
                if let &Opcode::AtomicCas = pattern5_0 {
                    let (pattern7_0, pattern7_1, pattern7_2) =
                        C::unpack_value_array_3(ctx, pattern5_1);
                    if let Some(()) = C::bigendian(ctx, pattern5_2) {
                        // Rule at src/isa/s390x/lower.isle line 3151.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr1_0 = C::put_in_reg(ctx, pattern7_2);
                        let expr2_0 = C::zero_offset(ctx);
                        let expr3_0 =
                            constructor_lower_address(ctx, pattern5_2, pattern7_0, expr2_0)?;
                        let expr4_0 = constructor_atomic_cas_impl(
                            ctx, pattern3_0, expr0_0, expr1_0, &expr3_0,
                        )?;
                        let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                        return Some(expr5_0);
                    }
                }
            }
        }
        if let Some(pattern3_0) = C::ty_8_or_16(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Rotl => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 793.
                        let expr0_0 = constructor_put_in_reg_zext32(ctx, pattern7_0)?;
                        let expr1_0 = constructor_ty_ext32(ctx, pattern3_0)?;
                        let expr2_0 = constructor_amt_reg(ctx, pattern7_1)?;
                        let expr3_0: Type = I32;
                        let expr4_0 = constructor_neg_reg(ctx, expr3_0, expr2_0)?;
                        let expr5_0 = constructor_mask_amt_reg(ctx, pattern3_0, expr2_0)?;
                        let expr6_0 = constructor_mask_amt_reg(ctx, pattern3_0, expr4_0)?;
                        let expr7_0 = constructor_lshl_reg(ctx, expr1_0, expr0_0, expr5_0)?;
                        let expr8_0 = constructor_lshr_reg(ctx, expr1_0, expr0_0, expr6_0)?;
                        let expr9_0 = constructor_or_reg(ctx, pattern3_0, expr7_0, expr8_0)?;
                        let expr10_0 = constructor_output_reg(ctx, expr9_0)?;
                        return Some(expr10_0);
                    }
                    &Opcode::Rotr => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 850.
                        let expr0_0 = constructor_put_in_reg_zext32(ctx, pattern7_0)?;
                        let expr1_0 = constructor_ty_ext32(ctx, pattern3_0)?;
                        let expr2_0 = constructor_amt_reg(ctx, pattern7_1)?;
                        let expr3_0: Type = I32;
                        let expr4_0 = constructor_neg_reg(ctx, expr3_0, expr2_0)?;
                        let expr5_0 = constructor_mask_amt_reg(ctx, pattern3_0, expr2_0)?;
                        let expr6_0 = constructor_mask_amt_reg(ctx, pattern3_0, expr4_0)?;
                        let expr7_0 = constructor_lshl_reg(ctx, expr1_0, expr0_0, expr6_0)?;
                        let expr8_0 = constructor_lshr_reg(ctx, expr1_0, expr0_0, expr5_0)?;
                        let expr9_0 = constructor_or_reg(ctx, pattern3_0, expr7_0, expr8_0)?;
                        let expr10_0 = constructor_output_reg(ctx, expr9_0)?;
                        return Some(expr10_0);
                    }
                    _ => {}
                }
            }
        }
        if let Some(pattern3_0) = C::ty_vec128(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Ishl => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 704.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = constructor_amt_reg(ctx, pattern7_1)?;
                        let expr2_0 = constructor_vec_lshl_reg(ctx, pattern3_0, expr0_0, expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                    &Opcode::Ushr => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 735.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = constructor_amt_reg(ctx, pattern7_1)?;
                        let expr2_0 = constructor_vec_lshr_reg(ctx, pattern3_0, expr0_0, expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                    &Opcode::Sshr => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 766.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = constructor_amt_reg(ctx, pattern7_1)?;
                        let expr2_0 = constructor_vec_ashr_reg(ctx, pattern3_0, expr0_0, expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                    _ => {}
                }
            }
        }
        if let Some(pattern3_0) = C::gpr32_ty(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    if let &Opcode::Ctz = pattern5_0 {
                        // Rule at src/isa/s390x/lower.isle line 1280.
                        let expr0_0: Type = I64;
                        let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                        let expr2_0 = constructor_ctz_guardbit(ctx, pattern3_0)?;
                        let expr3_0 = constructor_or_uimm16shifted(ctx, expr0_0, expr1_0, expr2_0)?;
                        let expr4_0: Type = I64;
                        let expr5_0: Type = I64;
                        let expr6_0 = constructor_neg_reg(ctx, expr5_0, expr3_0)?;
                        let expr7_0 = constructor_and_reg(ctx, expr4_0, expr3_0, expr6_0)?;
                        let expr8_0: i16 = 64i128 as i16;
                        let expr9_0 = constructor_clz_reg(ctx, expr8_0, expr7_0)?;
                        let expr10_0: u64 = 63i128 as u64;
                        let expr11_0 = constructor_imm(ctx, pattern3_0, expr10_0)?;
                        let expr12_0 = constructor_sub_reg(ctx, pattern3_0, expr11_0, expr9_0)?;
                        let expr13_0 = constructor_output_reg(ctx, expr12_0)?;
                        return Some(expr13_0);
                    }
                }
                &InstructionData::Load {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                    offset: pattern5_3,
                } => {
                    if let &Opcode::Sload16 = pattern5_0 {
                        if let Some(()) = C::bigendian(ctx, pattern5_2) {
                            // Rule at src/isa/s390x/lower.isle line 2522.
                            let expr0_0: Type = I16;
                            let expr1_0 =
                                constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                            let expr2_0 = constructor_sext32_mem(ctx, expr0_0, &expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::gpr64_ty(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Uextend => {
                            // Rule at src/isa/s390x/lower.isle line 912.
                            let expr0_0 = constructor_put_in_reg_zext64(ctx, pattern5_1)?;
                            let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
                            return Some(expr1_0);
                        }
                        &Opcode::Sextend => {
                            // Rule at src/isa/s390x/lower.isle line 933.
                            let expr0_0 = constructor_put_in_reg_sext64(ctx, pattern5_1)?;
                            let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
                            return Some(expr1_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::LoadNoOffset {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                } => {
                    if let &Opcode::Bitcast = pattern5_0 {
                        let pattern7_0 = C::value_type(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::gpr64_ty(ctx, pattern7_0) {
                            // Rule at src/isa/s390x/lower.isle line 1759.
                            let expr0_0 = constructor_output_value(ctx, pattern5_1)?;
                            return Some(expr0_0);
                        }
                    }
                }
                &InstructionData::Load {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                    offset: pattern5_3,
                } => {
                    if let &Opcode::Uload16 = pattern5_0 {
                        if let Some(()) = C::littleendian(ctx, pattern5_2) {
                            // Rule at src/isa/s390x/lower.isle line 2513.
                            let expr0_0 =
                                constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                            let expr1_0 = constructor_loadrev16(ctx, &expr0_0)?;
                            let expr2_0: Type = I16;
                            let expr3_0 = constructor_zext64_reg(ctx, expr2_0, expr1_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::vr128_ty(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::Load = pattern5_0 {
                    if let Some(()) = C::bigendian(ctx, pattern5_2) {
                        let mut closure8 = || {
                            let expr0_0 = C::lane_order(ctx)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern8_0) = closure8() {
                            if let &LaneOrder::LittleEndian = &pattern8_0 {
                                // Rule at src/isa/s390x/lower.isle line 2377.
                                let expr0_0 = constructor_vec_load_elt_rev(
                                    ctx, pattern3_0, pattern5_2, pattern5_1, pattern5_3,
                                )?;
                                let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
                                return Some(expr1_0);
                            }
                        }
                    }
                }
            }
        }
        let pattern3_0 = C::inst_data(ctx, pattern0_0);
        if let &InstructionData::Unary {
            opcode: ref pattern4_0,
            arg: pattern4_1,
        } = &pattern3_0
        {
            match pattern4_0 {
                &Opcode::Splat => {
                    if let Some(pattern6_0) = C::def_inst(ctx, pattern4_1) {
                        let pattern7_0 = C::inst_data(ctx, pattern6_0);
                        if let &InstructionData::BinaryImm8 {
                            opcode: ref pattern8_0,
                            arg: pattern8_1,
                            imm: pattern8_2,
                        } = &pattern7_0
                        {
                            if let &Opcode::Extractlane = pattern8_0 {
                                let pattern10_0 = C::u8_from_uimm8(ctx, pattern8_2);
                                // Rule at src/isa/s390x/lower.isle line 1971.
                                let expr0_0 = C::put_in_reg(ctx, pattern8_1);
                                let expr1_0 = C::be_lane_idx(ctx, pattern2_0, pattern10_0);
                                let expr2_0 = constructor_vec_replicate_lane(
                                    ctx, pattern2_0, expr0_0, expr1_0,
                                )?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                        }
                    }
                }
                &Opcode::ScalarToVector => {
                    if let Some(pattern6_0) = C::def_inst(ctx, pattern4_1) {
                        let pattern7_0 = C::inst_data(ctx, pattern6_0);
                        if let &InstructionData::BinaryImm8 {
                            opcode: ref pattern8_0,
                            arg: pattern8_1,
                            imm: pattern8_2,
                        } = &pattern7_0
                        {
                            if let &Opcode::Extractlane = pattern8_0 {
                                let pattern10_0 = C::u8_from_uimm8(ctx, pattern8_2);
                                // Rule at src/isa/s390x/lower.isle line 2031.
                                let expr0_0: u8 = 0i128 as u8;
                                let expr1_0 = C::be_lane_idx(ctx, pattern2_0, expr0_0);
                                let expr2_0 = C::put_in_reg(ctx, pattern8_1);
                                let expr3_0 = C::be_lane_idx(ctx, pattern2_0, pattern10_0);
                                let expr4_0 = constructor_vec_move_lane_and_zero(
                                    ctx, pattern2_0, expr1_0, expr2_0, expr3_0,
                                )?;
                                let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                                return Some(expr5_0);
                            }
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    match &pattern1_0 {
        &InstructionData::Store {
            opcode: ref pattern2_0,
            args: ref pattern2_1,
            flags: pattern2_2,
            offset: pattern2_3,
        } => {
            if let &Opcode::Store = pattern2_0 {
                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                let pattern5_0 = C::value_type(ctx, pattern4_0);
                if let Some(pattern6_0) = C::vr128_ty(ctx, pattern5_0) {
                    if let Some(()) = C::bigendian(ctx, pattern2_2) {
                        let mut closure8 = || {
                            let expr0_0 = C::lane_order(ctx)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern8_0) = closure8() {
                            if let &LaneOrder::LittleEndian = &pattern8_0 {
                                // Rule at src/isa/s390x/lower.isle line 2709.
                                let expr0_0 = C::put_in_reg(ctx, pattern4_0);
                                let expr1_0 = constructor_vec_store_elt_rev(
                                    ctx, pattern6_0, expr0_0, pattern2_2, pattern4_1, pattern2_3,
                                )?;
                                let expr2_0 = constructor_side_effect(ctx, &expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                    }
                }
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref pattern2_0,
            args: ref pattern2_1,
            imm: pattern2_2,
        } => {
            if let &Opcode::Insertlane = pattern2_0 {
                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                let pattern5_0 = C::value_type(ctx, pattern4_0);
                if let Some(pattern6_0) = C::def_inst(ctx, pattern4_1) {
                    let pattern7_0 = C::inst_data(ctx, pattern6_0);
                    if let &InstructionData::BinaryImm8 {
                        opcode: ref pattern8_0,
                        arg: pattern8_1,
                        imm: pattern8_2,
                    } = &pattern7_0
                    {
                        if let &Opcode::Extractlane = pattern8_0 {
                            let pattern10_0 = C::u8_from_uimm8(ctx, pattern8_2);
                            let pattern11_0 = C::u8_from_uimm8(ctx, pattern2_2);
                            // Rule at src/isa/s390x/lower.isle line 1799.
                            let expr0_0 = C::put_in_reg(ctx, pattern4_0);
                            let expr1_0 = C::be_lane_idx(ctx, pattern5_0, pattern11_0);
                            let expr2_0 = C::put_in_reg(ctx, pattern8_1);
                            let expr3_0 = C::be_lane_idx(ctx, pattern5_0, pattern10_0);
                            let expr4_0 = constructor_vec_move_lane_and_insert(
                                ctx, pattern5_0, expr0_0, expr1_0, expr2_0, expr3_0,
                            )?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                    }
                }
            }
        }
        _ => {}
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if pattern2_0 == I16 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::LoadNoOffset {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
            } = &pattern4_0
            {
                if let &Opcode::AtomicLoad = pattern5_0 {
                    if let Some(()) = C::bigendian(ctx, pattern5_2) {
                        // Rule at src/isa/s390x/lower.isle line 3226.
                        let expr0_0: Type = I16;
                        let expr1_0 = C::zero_offset(ctx);
                        let expr2_0 =
                            constructor_lower_address(ctx, pattern5_2, pattern5_1, expr1_0)?;
                        let expr3_0 = constructor_zext32_mem(ctx, expr0_0, &expr2_0)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                }
            }
        }
        if pattern2_0 == I32 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::LoadNoOffset {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
            } = &pattern4_0
            {
                if let &Opcode::AtomicLoad = pattern5_0 {
                    if let Some(()) = C::bigendian(ctx, pattern5_2) {
                        // Rule at src/isa/s390x/lower.isle line 3234.
                        let expr0_0 = C::zero_offset(ctx);
                        let expr1_0 =
                            constructor_lower_address(ctx, pattern5_2, pattern5_1, expr0_0)?;
                        let expr2_0 = constructor_load32(ctx, &expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                }
            }
        }
        if pattern2_0 == I64 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::LoadNoOffset {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
            } = &pattern4_0
            {
                if let &Opcode::AtomicLoad = pattern5_0 {
                    if let Some(()) = C::bigendian(ctx, pattern5_2) {
                        // Rule at src/isa/s390x/lower.isle line 3242.
                        let expr0_0 = C::zero_offset(ctx);
                        let expr1_0 =
                            constructor_lower_address(ctx, pattern5_2, pattern5_1, expr0_0)?;
                        let expr2_0 = constructor_load64(ctx, &expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                }
            }
        }
        if pattern2_0 == F32 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Unary {
                opcode: ref pattern5_0,
                arg: pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::FcvtFromUint => {
                        let pattern7_0 = C::value_type(ctx, pattern5_1);
                        if let Some(()) = C::vxrs_ext2_enabled(ctx, pattern7_0) {
                            if let Some(pattern9_0) = C::fits_in_32(ctx, pattern7_0) {
                                // Rule at src/isa/s390x/lower.isle line 1520.
                                let expr0_0: Type = F32;
                                let expr1_0 = FpuRoundMode::ToNearestTiesToEven;
                                let expr2_0 = constructor_put_in_reg_zext32(ctx, pattern5_1)?;
                                let expr3_0 = constructor_fcvt_from_uint_reg(
                                    ctx, expr0_0, &expr1_0, expr2_0,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                        }
                    }
                    &Opcode::FcvtFromSint => {
                        let pattern7_0 = C::value_type(ctx, pattern5_1);
                        if let Some(()) = C::vxrs_ext2_enabled(ctx, pattern7_0) {
                            if let Some(pattern9_0) = C::fits_in_32(ctx, pattern7_0) {
                                // Rule at src/isa/s390x/lower.isle line 1561.
                                let expr0_0: Type = F32;
                                let expr1_0 = FpuRoundMode::ToNearestTiesToEven;
                                let expr2_0 = constructor_put_in_reg_sext32(ctx, pattern5_1)?;
                                let expr3_0 = constructor_fcvt_from_sint_reg(
                                    ctx, expr0_0, &expr1_0, expr2_0,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                        }
                    }
                    _ => {}
                }
            }
        }
        if let Some(()) = C::mie2_disabled(ctx, pattern2_0) {
            if let Some(pattern4_0) = C::fits_in_64(ctx, pattern2_0) {
                let pattern5_0 = C::inst_data(ctx, pattern0_0);
                match &pattern5_0 {
                    &InstructionData::Unary {
                        opcode: ref pattern6_0,
                        arg: pattern6_1,
                    } => {
                        if let &Opcode::Bnot = pattern6_0 {
                            // Rule at src/isa/s390x/lower.isle line 993.
                            let expr0_0 = C::put_in_reg(ctx, pattern6_1);
                            let expr1_0 = constructor_not_reg(ctx, pattern4_0, expr0_0)?;
                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                            return Some(expr2_0);
                        }
                    }
                    &InstructionData::Binary {
                        opcode: ref pattern6_0,
                        args: ref pattern6_1,
                    } => {
                        match pattern6_0 {
                            &Opcode::BandNot => {
                                let (pattern8_0, pattern8_1) =
                                    C::unpack_value_array_2(ctx, pattern6_1);
                                // Rule at src/isa/s390x/lower.isle line 1084.
                                let expr0_0 = C::put_in_reg(ctx, pattern8_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern8_1);
                                let expr2_0 = constructor_not_reg(ctx, pattern4_0, expr1_0)?;
                                let expr3_0 =
                                    constructor_and_reg(ctx, pattern4_0, expr0_0, expr2_0)?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            &Opcode::BorNot => {
                                let (pattern8_0, pattern8_1) =
                                    C::unpack_value_array_2(ctx, pattern6_1);
                                // Rule at src/isa/s390x/lower.isle line 1099.
                                let expr0_0 = C::put_in_reg(ctx, pattern8_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern8_1);
                                let expr2_0 = constructor_not_reg(ctx, pattern4_0, expr1_0)?;
                                let expr3_0 =
                                    constructor_or_reg(ctx, pattern4_0, expr0_0, expr2_0)?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            &Opcode::BxorNot => {
                                let (pattern8_0, pattern8_1) =
                                    C::unpack_value_array_2(ctx, pattern6_1);
                                // Rule at src/isa/s390x/lower.isle line 1114.
                                let expr0_0 = C::put_in_reg(ctx, pattern8_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern8_1);
                                let expr2_0 =
                                    constructor_xor_reg(ctx, pattern4_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_not_reg(ctx, pattern4_0, expr2_0)?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            _ => {}
                        }
                    }
                    &InstructionData::Ternary {
                        opcode: ref pattern6_0,
                        args: ref pattern6_1,
                    } => {
                        if let &Opcode::Bitselect = pattern6_0 {
                            let (pattern8_0, pattern8_1, pattern8_2) =
                                C::unpack_value_array_3(ctx, pattern6_1);
                            // Rule at src/isa/s390x/lower.isle line 1132.
                            let expr0_0 = C::put_in_reg(ctx, pattern8_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern8_1);
                            let expr2_0 = constructor_and_reg(ctx, pattern4_0, expr1_0, expr0_0)?;
                            let expr3_0 = C::put_in_reg(ctx, pattern8_2);
                            let expr4_0 = constructor_not_reg(ctx, pattern4_0, expr0_0)?;
                            let expr5_0 = constructor_and_reg(ctx, pattern4_0, expr3_0, expr4_0)?;
                            let expr6_0 = constructor_or_reg(ctx, pattern4_0, expr5_0, expr2_0)?;
                            let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                            return Some(expr7_0);
                        }
                    }
                    _ => {}
                }
            }
        }
        if let Some(()) = C::vxrs_ext2_enabled(ctx, pattern2_0) {
            if pattern2_0 == I32X4 {
                let pattern5_0 = C::inst_data(ctx, pattern0_0);
                if let &InstructionData::Unary {
                    opcode: ref pattern6_0,
                    arg: pattern6_1,
                } = &pattern5_0
                {
                    match pattern6_0 {
                        &Opcode::FcvtToUintSat => {
                            let pattern8_0 = C::value_type(ctx, pattern6_1);
                            if pattern8_0 == F32X4 {
                                // Rule at src/isa/s390x/lower.isle line 1671.
                                let expr0_0: Type = F32X4;
                                let expr1_0 = FpuRoundMode::ToZero;
                                let expr2_0 = C::put_in_reg(ctx, pattern6_1);
                                let expr3_0 =
                                    constructor_fcvt_to_uint_reg(ctx, expr0_0, &expr1_0, expr2_0)?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                        }
                        &Opcode::FcvtToSintSat => {
                            let pattern8_0 = C::value_type(ctx, pattern6_1);
                            if pattern8_0 == F32X4 {
                                // Rule at src/isa/s390x/lower.isle line 1711.
                                let expr0_0: Type = I32X4;
                                let expr1_0: Type = F32X4;
                                let expr2_0 = FpuRoundMode::ToZero;
                                let expr3_0 = C::put_in_reg(ctx, pattern6_1);
                                let expr4_0 =
                                    constructor_fcvt_to_sint_reg(ctx, expr1_0, &expr2_0, expr3_0)?;
                                let expr5_0: Type = I32X4;
                                let expr6_0: u128 = 0i128 as u128;
                                let expr7_0 = constructor_vec_imm(ctx, expr5_0, expr6_0)?;
                                let expr8_0: Type = F32X4;
                                let expr9_0 = C::put_in_reg(ctx, pattern6_1);
                                let expr10_0 = C::put_in_reg(ctx, pattern6_1);
                                let expr11_0 =
                                    constructor_vec_fcmpeq(ctx, expr8_0, expr9_0, expr10_0)?;
                                let expr12_0 = constructor_vec_select(
                                    ctx, expr0_0, expr4_0, expr7_0, expr11_0,
                                )?;
                                let expr13_0 = constructor_output_reg(ctx, expr12_0)?;
                                return Some(expr13_0);
                            }
                        }
                        _ => {}
                    }
                }
            }
            if pattern2_0 == F32X4 {
                let pattern5_0 = C::inst_data(ctx, pattern0_0);
                if let &InstructionData::Unary {
                    opcode: ref pattern6_0,
                    arg: pattern6_1,
                } = &pattern5_0
                {
                    match pattern6_0 {
                        &Opcode::FcvtFromUint => {
                            let pattern8_0 = C::value_type(ctx, pattern6_1);
                            if pattern8_0 == I32X4 {
                                // Rule at src/isa/s390x/lower.isle line 1537.
                                let expr0_0: Type = F32X4;
                                let expr1_0 = FpuRoundMode::ToNearestTiesToEven;
                                let expr2_0 = C::put_in_reg(ctx, pattern6_1);
                                let expr3_0 = constructor_fcvt_from_uint_reg(
                                    ctx, expr0_0, &expr1_0, expr2_0,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                        }
                        &Opcode::FcvtFromSint => {
                            let pattern8_0 = C::value_type(ctx, pattern6_1);
                            if pattern8_0 == I32X4 {
                                // Rule at src/isa/s390x/lower.isle line 1578.
                                let expr0_0: Type = F32X4;
                                let expr1_0 = FpuRoundMode::ToNearestTiesToEven;
                                let expr2_0 = C::put_in_reg(ctx, pattern6_1);
                                let expr3_0 = constructor_fcvt_from_sint_reg(
                                    ctx, expr0_0, &expr1_0, expr2_0,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                        }
                        _ => {}
                    }
                }
            }
        }
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Clz => {
                            // Rule at src/isa/s390x/lower.isle line 1209.
                            let expr0_0 = constructor_put_in_reg_zext64(ctx, pattern5_1)?;
                            let expr1_0: i16 = 64i128 as i16;
                            let expr2_0 = constructor_clz_reg(ctx, expr1_0, expr0_0)?;
                            let expr3_0 = constructor_clz_offset(ctx, pattern3_0, expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::Cls => {
                            // Rule at src/isa/s390x/lower.isle line 1243.
                            let expr0_0 = constructor_put_in_reg_sext64(ctx, pattern5_1)?;
                            let expr1_0: Type = I64;
                            let expr2_0: u8 = 63i128 as u8;
                            let expr3_0 = constructor_ashr_imm(ctx, expr1_0, expr0_0, expr2_0)?;
                            let expr4_0: Type = I64;
                            let expr5_0 = constructor_xor_reg(ctx, expr4_0, expr0_0, expr3_0)?;
                            let expr6_0: i16 = 64i128 as i16;
                            let expr7_0 = constructor_clz_reg(ctx, expr6_0, expr5_0)?;
                            let expr8_0 = constructor_cls_offset(ctx, pattern3_0, expr7_0)?;
                            let expr9_0 = constructor_output_reg(ctx, expr8_0)?;
                            return Some(expr9_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::IaddIfcout => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::sinkable_inst(ctx, pattern7_1) {
                                let pattern9_0 = C::inst_data(ctx, pattern8_0);
                                if let &InstructionData::Load {
                                    opcode: ref pattern10_0,
                                    arg: pattern10_1,
                                    flags: pattern10_2,
                                    offset: pattern10_3,
                                } = &pattern9_0
                                {
                                    if let &Opcode::Uload32 = pattern10_0 {
                                        if let Some(()) = C::bigendian(ctx, pattern10_2) {
                                            // Rule at src/isa/s390x/lower.isle line 230.
                                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                            let expr1_0 =
                                                constructor_sink_uload32(ctx, pattern8_0)?;
                                            let expr2_0 = constructor_add_logical_mem_zext32(
                                                ctx, pattern3_0, expr0_0, &expr1_0,
                                            )?;
                                            let expr3_0 = constructor_output_ifcout(ctx, expr2_0)?;
                                            return Some(expr3_0);
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Band => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            let pattern8_0 = C::value_type(ctx, pattern7_1);
                            if let Some(pattern9_0) = C::ty_32_or_64(ctx, pattern8_0) {
                                if let Some(pattern10_0) = C::sinkable_inst(ctx, pattern7_1) {
                                    let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                    if let &InstructionData::Load {
                                        opcode: ref pattern12_0,
                                        arg: pattern12_1,
                                        flags: pattern12_2,
                                        offset: pattern12_3,
                                    } = &pattern11_0
                                    {
                                        if let &Opcode::Load = pattern12_0 {
                                            if let Some(()) = C::bigendian(ctx, pattern12_2) {
                                                // Rule at src/isa/s390x/lower.isle line 1018.
                                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                                let expr1_0 =
                                                    constructor_sink_load(ctx, pattern10_0)?;
                                                let expr2_0 = constructor_and_mem(
                                                    ctx, pattern3_0, expr0_0, &expr1_0,
                                                )?;
                                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                                return Some(expr3_0);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Bor => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            let pattern8_0 = C::value_type(ctx, pattern7_1);
                            if let Some(pattern9_0) = C::ty_32_or_64(ctx, pattern8_0) {
                                if let Some(pattern10_0) = C::sinkable_inst(ctx, pattern7_1) {
                                    let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                    if let &InstructionData::Load {
                                        opcode: ref pattern12_0,
                                        arg: pattern12_1,
                                        flags: pattern12_2,
                                        offset: pattern12_3,
                                    } = &pattern11_0
                                    {
                                        if let &Opcode::Load = pattern12_0 {
                                            if let Some(()) = C::bigendian(ctx, pattern12_2) {
                                                // Rule at src/isa/s390x/lower.isle line 1044.
                                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                                let expr1_0 =
                                                    constructor_sink_load(ctx, pattern10_0)?;
                                                let expr2_0 = constructor_or_mem(
                                                    ctx, pattern3_0, expr0_0, &expr1_0,
                                                )?;
                                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                                return Some(expr3_0);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Bxor => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            let pattern8_0 = C::value_type(ctx, pattern7_1);
                            if let Some(pattern9_0) = C::ty_32_or_64(ctx, pattern8_0) {
                                if let Some(pattern10_0) = C::sinkable_inst(ctx, pattern7_1) {
                                    let pattern11_0 = C::inst_data(ctx, pattern10_0);
                                    if let &InstructionData::Load {
                                        opcode: ref pattern12_0,
                                        arg: pattern12_1,
                                        flags: pattern12_2,
                                        offset: pattern12_3,
                                    } = &pattern11_0
                                    {
                                        if let &Opcode::Load = pattern12_0 {
                                            if let Some(()) = C::bigendian(ctx, pattern12_2) {
                                                // Rule at src/isa/s390x/lower.isle line 1067.
                                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                                let expr1_0 =
                                                    constructor_sink_load(ctx, pattern10_0)?;
                                                let expr2_0 = constructor_xor_mem(
                                                    ctx, pattern3_0, expr0_0, &expr1_0,
                                                )?;
                                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                                return Some(expr3_0);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &Opcode::Ishl => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::i64_from_value(ctx, pattern7_1) {
                                // Rule at src/isa/s390x/lower.isle line 699.
                                let expr0_0 = C::mask_amt_imm(ctx, pattern3_0, pattern8_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_lshl_imm(ctx, pattern3_0, expr1_0, expr0_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                        }
                        &Opcode::Ushr => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::i64_from_value(ctx, pattern7_1) {
                                // Rule at src/isa/s390x/lower.isle line 729.
                                let expr0_0 = constructor_put_in_reg_zext32(ctx, pattern7_0)?;
                                let expr1_0 = C::mask_amt_imm(ctx, pattern3_0, pattern8_0);
                                let expr2_0 = constructor_ty_ext32(ctx, pattern3_0)?;
                                let expr3_0 = constructor_lshr_imm(ctx, expr2_0, expr0_0, expr1_0)?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                        }
                        &Opcode::Sshr => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::i64_from_value(ctx, pattern7_1) {
                                // Rule at src/isa/s390x/lower.isle line 760.
                                let expr0_0 = constructor_put_in_reg_sext32(ctx, pattern7_0)?;
                                let expr1_0 = C::mask_amt_imm(ctx, pattern3_0, pattern8_0);
                                let expr2_0 = constructor_ty_ext32(ctx, pattern3_0)?;
                                let expr3_0 = constructor_ashr_imm(ctx, expr2_0, expr0_0, expr1_0)?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::IntAddTrap {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    code: ref pattern5_2,
                } => {
                    if let &Opcode::UaddOverflowTrap = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::sinkable_inst(ctx, pattern7_1) {
                            let pattern9_0 = C::inst_data(ctx, pattern8_0);
                            if let &InstructionData::Load {
                                opcode: ref pattern10_0,
                                arg: pattern10_1,
                                flags: pattern10_2,
                                offset: pattern10_3,
                            } = &pattern9_0
                            {
                                if let &Opcode::Uload32 = pattern10_0 {
                                    if let Some(()) = C::bigendian(ctx, pattern10_2) {
                                        // Rule at src/isa/s390x/lower.isle line 3911.
                                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                        let expr1_0 = constructor_sink_uload32(ctx, pattern8_0)?;
                                        let expr2_0 =
                                            constructor_add_logical_mem_zext32_with_flags_paired(
                                                ctx, pattern3_0, expr0_0, &expr1_0,
                                            )?;
                                        let expr3_0: u8 = 3i128 as u8;
                                        let expr4_0 = C::mask_as_cond(ctx, expr3_0);
                                        let expr5_0 =
                                            constructor_trap_if_impl(ctx, &expr4_0, pattern5_2)?;
                                        let expr6_0 =
                                            constructor_with_flags(ctx, &expr2_0, &expr5_0)?;
                                        let expr7_0 = C::output(ctx, expr6_0);
                                        return Some(expr7_0);
                                    }
                                }
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::ty_32_or_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Rotl => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::i64_from_value(ctx, pattern7_1) {
                                // Rule at src/isa/s390x/lower.isle line 787.
                                let expr0_0 = C::mask_amt_imm(ctx, pattern3_0, pattern8_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_rot_imm(ctx, pattern3_0, expr1_0, expr0_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                        }
                        &Opcode::Rotr => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::i64_from_negated_value(ctx, pattern7_1) {
                                // Rule at src/isa/s390x/lower.isle line 844.
                                let expr0_0 = C::mask_amt_imm(ctx, pattern3_0, pattern8_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_rot_imm(ctx, pattern3_0, expr1_0, expr0_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::AtomicRmw {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    flags: pattern5_2,
                    op: ref pattern5_3,
                } => {
                    if let &Opcode::AtomicRmw = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(()) = C::bigendian(ctx, pattern5_2) {
                            match pattern5_3 {
                                &AtomicRmwOp::And => {
                                    // Rule at src/isa/s390x/lower.isle line 2895.
                                    let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                    let expr1_0 = C::zero_offset(ctx);
                                    let expr2_0 = constructor_lower_address(
                                        ctx, pattern5_2, pattern7_0, expr1_0,
                                    )?;
                                    let expr3_0 = constructor_atomic_rmw_and(
                                        ctx, pattern3_0, expr0_0, &expr2_0,
                                    )?;
                                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                    return Some(expr4_0);
                                }
                                &AtomicRmwOp::Or => {
                                    // Rule at src/isa/s390x/lower.isle line 2907.
                                    let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                    let expr1_0 = C::zero_offset(ctx);
                                    let expr2_0 = constructor_lower_address(
                                        ctx, pattern5_2, pattern7_0, expr1_0,
                                    )?;
                                    let expr3_0 = constructor_atomic_rmw_or(
                                        ctx, pattern3_0, expr0_0, &expr2_0,
                                    )?;
                                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                    return Some(expr4_0);
                                }
                                &AtomicRmwOp::Xor => {
                                    // Rule at src/isa/s390x/lower.isle line 2919.
                                    let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                    let expr1_0 = C::zero_offset(ctx);
                                    let expr2_0 = constructor_lower_address(
                                        ctx, pattern5_2, pattern7_0, expr1_0,
                                    )?;
                                    let expr3_0 = constructor_atomic_rmw_xor(
                                        ctx, pattern3_0, expr0_0, &expr2_0,
                                    )?;
                                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                    return Some(expr4_0);
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &InstructionData::AtomicCas {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    flags: pattern5_2,
                } => {
                    if let &Opcode::AtomicCas = pattern5_0 {
                        let (pattern7_0, pattern7_1, pattern7_2) =
                            C::unpack_value_array_3(ctx, pattern5_1);
                        if let Some(()) = C::littleendian(ctx, pattern5_2) {
                            // Rule at src/isa/s390x/lower.isle line 3158.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr1_0 = constructor_bswap_reg(ctx, pattern3_0, expr0_0)?;
                            let expr2_0 = C::put_in_reg(ctx, pattern7_2);
                            let expr3_0 = constructor_bswap_reg(ctx, pattern3_0, expr2_0)?;
                            let expr4_0 = C::zero_offset(ctx);
                            let expr5_0 =
                                constructor_lower_address(ctx, pattern5_2, pattern7_0, expr4_0)?;
                            let expr6_0 = constructor_atomic_cas_impl(
                                ctx, pattern3_0, expr1_0, expr3_0, &expr5_0,
                            )?;
                            let expr7_0 = constructor_bswap_reg(ctx, pattern3_0, expr6_0)?;
                            let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                            return Some(expr8_0);
                        }
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::ty_vec128(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Ineg => {
                            // Rule at src/isa/s390x/lower.isle line 272.
                            let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr1_0 = constructor_vec_neg(ctx, pattern3_0, expr0_0)?;
                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                            return Some(expr2_0);
                        }
                        &Opcode::Iabs => {
                            // Rule at src/isa/s390x/lower.isle line 248.
                            let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr1_0 = constructor_vec_abs(ctx, pattern3_0, expr0_0)?;
                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                            return Some(expr2_0);
                        }
                        &Opcode::Popcnt => {
                            // Rule at src/isa/s390x/lower.isle line 1350.
                            let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr1_0 = constructor_vec_popcnt(ctx, pattern3_0, expr0_0)?;
                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                            return Some(expr2_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    if let &Opcode::Swizzle = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        let mut closure8 = || {
                            let expr0_0 = C::lane_order(ctx)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern8_0) = closure8() {
                            if let &LaneOrder::BigEndian = &pattern8_0 {
                                // Rule at src/isa/s390x/lower.isle line 2229.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0: u128 = 0i128 as u128;
                                let expr2_0 = constructor_vec_imm(ctx, pattern3_0, expr1_0)?;
                                let expr3_0: Type = I8X16;
                                let expr4_0: Type = I8X16;
                                let expr5_0: u64 = 16i128 as u64;
                                let expr6_0 = constructor_vec_imm_splat(ctx, expr4_0, expr5_0)?;
                                let expr7_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr8_0 = constructor_vec_umin(ctx, expr3_0, expr6_0, expr7_0)?;
                                let expr9_0 = constructor_vec_permute(
                                    ctx, pattern3_0, expr0_0, expr2_0, expr8_0,
                                )?;
                                let expr10_0 = constructor_output_reg(ctx, expr9_0)?;
                                return Some(expr10_0);
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::gpr32_ty(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Uextend => {
                            // Rule at src/isa/s390x/lower.isle line 908.
                            let expr0_0 = constructor_put_in_reg_zext32(ctx, pattern5_1)?;
                            let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
                            return Some(expr1_0);
                        }
                        &Opcode::Sextend => {
                            // Rule at src/isa/s390x/lower.isle line 929.
                            let expr0_0 = constructor_put_in_reg_sext32(ctx, pattern5_1)?;
                            let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
                            return Some(expr1_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::LoadNoOffset {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                } => {
                    if let &Opcode::Bitcast = pattern5_0 {
                        let pattern7_0 = C::value_type(ctx, pattern5_1);
                        if let Some(pattern8_0) = C::gpr32_ty(ctx, pattern7_0) {
                            // Rule at src/isa/s390x/lower.isle line 1757.
                            let expr0_0 = constructor_output_value(ctx, pattern5_1)?;
                            return Some(expr0_0);
                        }
                    }
                }
                &InstructionData::Load {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                    offset: pattern5_3,
                } => {
                    if let &Opcode::Uload16 = pattern5_0 {
                        if let Some(()) = C::littleendian(ctx, pattern5_2) {
                            // Rule at src/isa/s390x/lower.isle line 2502.
                            let expr0_0 =
                                constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                            let expr1_0 = constructor_loadrev16(ctx, &expr0_0)?;
                            let expr2_0: Type = I16;
                            let expr3_0 = constructor_zext32_reg(ctx, expr2_0, expr1_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::gpr64_ty(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    if let &Opcode::Ctz = pattern5_0 {
                        // Rule at src/isa/s390x/lower.isle line 1295.
                        let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                        let expr1_0: Type = I64;
                        let expr2_0: Type = I64;
                        let expr3_0 = constructor_neg_reg(ctx, expr2_0, expr0_0)?;
                        let expr4_0 = constructor_and_reg(ctx, expr1_0, expr0_0, expr3_0)?;
                        let expr5_0: i16 = -1i128 as i16;
                        let expr6_0 = constructor_clz_reg(ctx, expr5_0, expr4_0)?;
                        let expr7_0: Type = I64;
                        let expr8_0: Type = I64;
                        let expr9_0: u64 = 63i128 as u64;
                        let expr10_0 = constructor_imm(ctx, expr8_0, expr9_0)?;
                        let expr11_0 = constructor_sub_reg(ctx, expr7_0, expr10_0, expr6_0)?;
                        let expr12_0 = constructor_output_reg(ctx, expr11_0)?;
                        return Some(expr12_0);
                    }
                }
                &InstructionData::Load {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                    offset: pattern5_3,
                } => {
                    match pattern5_0 {
                        &Opcode::Uload8 => {
                            // Rule at src/isa/s390x/lower.isle line 2479.
                            let expr0_0: Type = I8;
                            let expr1_0 =
                                constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                            let expr2_0 = constructor_zext64_mem(ctx, expr0_0, &expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Sload8 => {
                            // Rule at src/isa/s390x/lower.isle line 2490.
                            let expr0_0: Type = I8;
                            let expr1_0 =
                                constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                            let expr2_0 = constructor_sext64_mem(ctx, expr0_0, &expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Sload16 => {
                            if let Some(()) = C::littleendian(ctx, pattern5_2) {
                                // Rule at src/isa/s390x/lower.isle line 2538.
                                let expr0_0 = constructor_lower_address(
                                    ctx, pattern5_2, pattern5_1, pattern5_3,
                                )?;
                                let expr1_0 = constructor_loadrev16(ctx, &expr0_0)?;
                                let expr2_0: Type = I16;
                                let expr3_0 = constructor_sext64_reg(ctx, expr2_0, expr1_0)?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                        }
                        &Opcode::Uload32 => {
                            if let Some(()) = C::bigendian(ctx, pattern5_2) {
                                // Rule at src/isa/s390x/lower.isle line 2547.
                                let expr0_0: Type = I32;
                                let expr1_0 = constructor_lower_address(
                                    ctx, pattern5_2, pattern5_1, pattern5_3,
                                )?;
                                let expr2_0 = constructor_zext64_mem(ctx, expr0_0, &expr1_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                        }
                        &Opcode::Sload32 => {
                            if let Some(()) = C::bigendian(ctx, pattern5_2) {
                                // Rule at src/isa/s390x/lower.isle line 2561.
                                let expr0_0: Type = I32;
                                let expr1_0 = constructor_lower_address(
                                    ctx, pattern5_2, pattern5_1, pattern5_3,
                                )?;
                                let expr2_0 = constructor_sext64_mem(ctx, expr0_0, &expr1_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::vr128_ty(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Load {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                    offset: pattern5_3,
                } => {
                    if let &Opcode::Load = pattern5_0 {
                        if let Some(()) = C::littleendian(ctx, pattern5_2) {
                            let mut closure8 = || {
                                let expr0_0 = C::lane_order(ctx)?;
                                return Some(expr0_0);
                            };
                            if let Some(pattern8_0) = closure8() {
                                if let &LaneOrder::LittleEndian = &pattern8_0 {
                                    // Rule at src/isa/s390x/lower.isle line 2382.
                                    let expr0_0 = constructor_vec_load_full_rev(
                                        ctx, pattern3_0, pattern5_2, pattern5_1, pattern5_3,
                                    )?;
                                    let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
                                    return Some(expr1_0);
                                }
                            }
                        }
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Iadd => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 109.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_vec_add(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Isub => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 173.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_vec_sub(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Imul => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 361.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 =
                                constructor_vec_mul_impl(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        let pattern3_0 = C::inst_data(ctx, pattern0_0);
        match &pattern3_0 {
            &InstructionData::Unary {
                opcode: ref pattern4_0,
                arg: pattern4_1,
            } => {
                match pattern4_0 {
                    &Opcode::Splat => {
                        let pattern6_0 = C::value_type(ctx, pattern4_1);
                        let mut closure7 = || {
                            let expr0_0 = C::ty_int_ref_scalar_64(ctx, pattern6_0)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern7_0) = closure7() {
                            // Rule at src/isa/s390x/lower.isle line 1961.
                            let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                            let expr1_0: u8 = 0i128 as u8;
                            let expr2_0 = C::zero_reg(ctx);
                            let expr3_0 = constructor_vec_insert_lane_undef(
                                ctx, pattern2_0, expr0_0, expr1_0, expr2_0,
                            )?;
                            let expr4_0: u8 = 0i128 as u8;
                            let expr5_0 =
                                constructor_vec_replicate_lane(ctx, pattern2_0, expr3_0, expr4_0)?;
                            let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                            return Some(expr6_0);
                        }
                    }
                    &Opcode::ScalarToVector => {
                        let pattern6_0 = C::value_type(ctx, pattern4_1);
                        let mut closure7 = || {
                            let expr0_0 = C::ty_int_ref_scalar_64(ctx, pattern6_0)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern7_0) = closure7() {
                            // Rule at src/isa/s390x/lower.isle line 2020.
                            let expr0_0: u128 = 0i128 as u128;
                            let expr1_0 = constructor_vec_imm(ctx, pattern2_0, expr0_0)?;
                            let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                            let expr3_0: u8 = 0i128 as u8;
                            let expr4_0 = C::be_lane_idx(ctx, pattern2_0, expr3_0);
                            let expr5_0 = C::zero_reg(ctx);
                            let expr6_0 = constructor_vec_insert_lane(
                                ctx, pattern2_0, expr1_0, expr2_0, expr4_0, expr5_0,
                            )?;
                            let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                            return Some(expr7_0);
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::BinaryImm8 {
                opcode: ref pattern4_0,
                arg: pattern4_1,
                imm: pattern4_2,
            } => {
                if let &Opcode::Extractlane = pattern4_0 {
                    let pattern6_0 = C::value_type(ctx, pattern4_1);
                    let pattern7_0 = C::u8_from_uimm8(ctx, pattern4_2);
                    let mut closure8 = || {
                        let expr0_0 = C::ty_int_ref_scalar_64(ctx, pattern2_0)?;
                        return Some(expr0_0);
                    };
                    if let Some(pattern8_0) = closure8() {
                        // Rule at src/isa/s390x/lower.isle line 1903.
                        let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr1_0 = C::be_lane_idx(ctx, pattern6_0, pattern7_0);
                        let expr2_0 = C::zero_reg(ctx);
                        let expr3_0 = constructor_vec_extract_lane(
                            ctx, pattern6_0, expr0_0, expr1_0, expr2_0,
                        )?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                }
            }
            _ => {}
        }
    }
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    match &pattern1_0 {
        &InstructionData::Unary {
            opcode: ref pattern2_0,
            arg: pattern2_1,
        } => {
            match pattern2_0 {
                &Opcode::VhighBits => {
                    let pattern4_0 = C::value_type(ctx, pattern2_1);
                    if let Some((pattern5_0, pattern5_1)) = C::multi_lane(ctx, pattern4_0) {
                        if pattern5_0 == 8i128 as u32 {
                            if pattern5_1 == 16i128 as u32 {
                                let mut closure8 = || {
                                    let expr0_0 = C::lane_order(ctx)?;
                                    return Some(expr0_0);
                                };
                                if let Some(pattern8_0) = closure8() {
                                    if let &LaneOrder::BigEndian = &pattern8_0 {
                                        // Rule at src/isa/s390x/lower.isle line 3664.
                                        let expr0_0: Type = I8X16;
                                        let expr1_0: u8 = 120i128 as u8;
                                        let expr2_0: u8 = 112i128 as u8;
                                        let expr3_0: u8 = 104i128 as u8;
                                        let expr4_0: u8 = 96i128 as u8;
                                        let expr5_0: u8 = 88i128 as u8;
                                        let expr6_0: u8 = 80i128 as u8;
                                        let expr7_0: u8 = 72i128 as u8;
                                        let expr8_0: u8 = 64i128 as u8;
                                        let expr9_0: u8 = 56i128 as u8;
                                        let expr10_0: u8 = 48i128 as u8;
                                        let expr11_0: u8 = 40i128 as u8;
                                        let expr12_0: u8 = 32i128 as u8;
                                        let expr13_0: u8 = 24i128 as u8;
                                        let expr14_0: u8 = 16i128 as u8;
                                        let expr15_0: u8 = 8i128 as u8;
                                        let expr16_0: u8 = 0i128 as u8;
                                        let expr17_0 = constructor_imm8x16(
                                            ctx, expr1_0, expr2_0, expr3_0, expr4_0, expr5_0,
                                            expr6_0, expr7_0, expr8_0, expr9_0, expr10_0, expr11_0,
                                            expr12_0, expr13_0, expr14_0, expr15_0, expr16_0,
                                        )?;
                                        let expr18_0 = constructor_vec_imm(ctx, expr0_0, expr17_0)?;
                                        let expr19_0: Type = I64X2;
                                        let expr20_0 = C::put_in_reg(ctx, pattern2_1);
                                        let expr21_0 =
                                            constructor_vec_bitpermute(ctx, expr20_0, expr18_0)?;
                                        let expr22_0: u8 = 0i128 as u8;
                                        let expr23_0 = C::zero_reg(ctx);
                                        let expr24_0 = constructor_vec_extract_lane(
                                            ctx, expr19_0, expr21_0, expr22_0, expr23_0,
                                        )?;
                                        let expr25_0 = constructor_output_reg(ctx, expr24_0)?;
                                        return Some(expr25_0);
                                    }
                                }
                            }
                        }
                        if pattern5_0 == 16i128 as u32 {
                            if pattern5_1 == 8i128 as u32 {
                                let mut closure8 = || {
                                    let expr0_0 = C::lane_order(ctx)?;
                                    return Some(expr0_0);
                                };
                                if let Some(pattern8_0) = closure8() {
                                    if let &LaneOrder::BigEndian = &pattern8_0 {
                                        // Rule at src/isa/s390x/lower.isle line 3675.
                                        let expr0_0: Type = I8X16;
                                        let expr1_0: u8 = 128i128 as u8;
                                        let expr2_0: u8 = 128i128 as u8;
                                        let expr3_0: u8 = 128i128 as u8;
                                        let expr4_0: u8 = 128i128 as u8;
                                        let expr5_0: u8 = 128i128 as u8;
                                        let expr6_0: u8 = 128i128 as u8;
                                        let expr7_0: u8 = 128i128 as u8;
                                        let expr8_0: u8 = 128i128 as u8;
                                        let expr9_0: u8 = 112i128 as u8;
                                        let expr10_0: u8 = 96i128 as u8;
                                        let expr11_0: u8 = 80i128 as u8;
                                        let expr12_0: u8 = 64i128 as u8;
                                        let expr13_0: u8 = 48i128 as u8;
                                        let expr14_0: u8 = 32i128 as u8;
                                        let expr15_0: u8 = 16i128 as u8;
                                        let expr16_0: u8 = 0i128 as u8;
                                        let expr17_0 = constructor_imm8x16(
                                            ctx, expr1_0, expr2_0, expr3_0, expr4_0, expr5_0,
                                            expr6_0, expr7_0, expr8_0, expr9_0, expr10_0, expr11_0,
                                            expr12_0, expr13_0, expr14_0, expr15_0, expr16_0,
                                        )?;
                                        let expr18_0 = constructor_vec_imm(ctx, expr0_0, expr17_0)?;
                                        let expr19_0: Type = I64X2;
                                        let expr20_0 = C::put_in_reg(ctx, pattern2_1);
                                        let expr21_0 =
                                            constructor_vec_bitpermute(ctx, expr20_0, expr18_0)?;
                                        let expr22_0: u8 = 0i128 as u8;
                                        let expr23_0 = C::zero_reg(ctx);
                                        let expr24_0 = constructor_vec_extract_lane(
                                            ctx, expr19_0, expr21_0, expr22_0, expr23_0,
                                        )?;
                                        let expr25_0 = constructor_output_reg(ctx, expr24_0)?;
                                        return Some(expr25_0);
                                    }
                                }
                            }
                        }
                        if pattern5_0 == 32i128 as u32 {
                            if pattern5_1 == 4i128 as u32 {
                                let mut closure8 = || {
                                    let expr0_0 = C::lane_order(ctx)?;
                                    return Some(expr0_0);
                                };
                                if let Some(pattern8_0) = closure8() {
                                    if let &LaneOrder::BigEndian = &pattern8_0 {
                                        // Rule at src/isa/s390x/lower.isle line 3686.
                                        let expr0_0: Type = I8X16;
                                        let expr1_0: u8 = 128i128 as u8;
                                        let expr2_0: u8 = 128i128 as u8;
                                        let expr3_0: u8 = 128i128 as u8;
                                        let expr4_0: u8 = 128i128 as u8;
                                        let expr5_0: u8 = 128i128 as u8;
                                        let expr6_0: u8 = 128i128 as u8;
                                        let expr7_0: u8 = 128i128 as u8;
                                        let expr8_0: u8 = 128i128 as u8;
                                        let expr9_0: u8 = 128i128 as u8;
                                        let expr10_0: u8 = 128i128 as u8;
                                        let expr11_0: u8 = 128i128 as u8;
                                        let expr12_0: u8 = 128i128 as u8;
                                        let expr13_0: u8 = 96i128 as u8;
                                        let expr14_0: u8 = 64i128 as u8;
                                        let expr15_0: u8 = 32i128 as u8;
                                        let expr16_0: u8 = 0i128 as u8;
                                        let expr17_0 = constructor_imm8x16(
                                            ctx, expr1_0, expr2_0, expr3_0, expr4_0, expr5_0,
                                            expr6_0, expr7_0, expr8_0, expr9_0, expr10_0, expr11_0,
                                            expr12_0, expr13_0, expr14_0, expr15_0, expr16_0,
                                        )?;
                                        let expr18_0 = constructor_vec_imm(ctx, expr0_0, expr17_0)?;
                                        let expr19_0: Type = I64X2;
                                        let expr20_0 = C::put_in_reg(ctx, pattern2_1);
                                        let expr21_0 =
                                            constructor_vec_bitpermute(ctx, expr20_0, expr18_0)?;
                                        let expr22_0: u8 = 0i128 as u8;
                                        let expr23_0 = C::zero_reg(ctx);
                                        let expr24_0 = constructor_vec_extract_lane(
                                            ctx, expr19_0, expr21_0, expr22_0, expr23_0,
                                        )?;
                                        let expr25_0 = constructor_output_reg(ctx, expr24_0)?;
                                        return Some(expr25_0);
                                    }
                                }
                            }
                        }
                        if pattern5_0 == 64i128 as u32 {
                            if pattern5_1 == 2i128 as u32 {
                                let mut closure8 = || {
                                    let expr0_0 = C::lane_order(ctx)?;
                                    return Some(expr0_0);
                                };
                                if let Some(pattern8_0) = closure8() {
                                    if let &LaneOrder::BigEndian = &pattern8_0 {
                                        // Rule at src/isa/s390x/lower.isle line 3697.
                                        let expr0_0: Type = I8X16;
                                        let expr1_0: u8 = 128i128 as u8;
                                        let expr2_0: u8 = 128i128 as u8;
                                        let expr3_0: u8 = 128i128 as u8;
                                        let expr4_0: u8 = 128i128 as u8;
                                        let expr5_0: u8 = 128i128 as u8;
                                        let expr6_0: u8 = 128i128 as u8;
                                        let expr7_0: u8 = 128i128 as u8;
                                        let expr8_0: u8 = 128i128 as u8;
                                        let expr9_0: u8 = 128i128 as u8;
                                        let expr10_0: u8 = 128i128 as u8;
                                        let expr11_0: u8 = 128i128 as u8;
                                        let expr12_0: u8 = 128i128 as u8;
                                        let expr13_0: u8 = 128i128 as u8;
                                        let expr14_0: u8 = 128i128 as u8;
                                        let expr15_0: u8 = 64i128 as u8;
                                        let expr16_0: u8 = 0i128 as u8;
                                        let expr17_0 = constructor_imm8x16(
                                            ctx, expr1_0, expr2_0, expr3_0, expr4_0, expr5_0,
                                            expr6_0, expr7_0, expr8_0, expr9_0, expr10_0, expr11_0,
                                            expr12_0, expr13_0, expr14_0, expr15_0, expr16_0,
                                        )?;
                                        let expr18_0 = constructor_vec_imm(ctx, expr0_0, expr17_0)?;
                                        let expr19_0: Type = I64X2;
                                        let expr20_0 = C::put_in_reg(ctx, pattern2_1);
                                        let expr21_0 =
                                            constructor_vec_bitpermute(ctx, expr20_0, expr18_0)?;
                                        let expr22_0: u8 = 0i128 as u8;
                                        let expr23_0 = C::zero_reg(ctx);
                                        let expr24_0 = constructor_vec_extract_lane(
                                            ctx, expr19_0, expr21_0, expr22_0, expr23_0,
                                        )?;
                                        let expr25_0 = constructor_output_reg(ctx, expr24_0)?;
                                        return Some(expr25_0);
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::Ireduce => {
                    let pattern4_0 = C::value_type(ctx, pattern2_1);
                    if let Some(pattern5_0) = C::fits_in_64(ctx, pattern4_0) {
                        // Rule at src/isa/s390x/lower.isle line 897.
                        let expr0_0 = constructor_output_value(ctx, pattern2_1)?;
                        return Some(expr0_0);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::Call {
            opcode: ref pattern2_0,
            args: pattern2_1,
            func_ref: pattern2_2,
        } => {
            if let &Opcode::Call = pattern2_0 {
                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
                let (pattern5_0, pattern5_1, pattern5_2) = C::func_ref_data(ctx, pattern2_2);
                if let Some(()) = C::reloc_distance_near(ctx, pattern5_2) {
                    // Rule at src/isa/s390x/lower.isle line 3931.
                    let expr0_0 = C::abi_sig(ctx, pattern5_0);
                    let expr1_0 = C::abi_accumulate_outgoing_args_size(ctx, &expr0_0);
                    let expr2_0: usize = 0i128 as usize;
                    let expr3_0 = C::abi_num_args(ctx, &expr0_0);
                    let expr4_0 = C::range(ctx, expr2_0, expr3_0);
                    let expr5_0 = constructor_lower_call_args(ctx, &expr0_0, expr4_0, pattern4_0)?;
                    let expr6_0 = C::defs_init(ctx, &expr0_0);
                    let expr7_0 = Opcode::Call;
                    let expr8_0 = constructor_abi_call(
                        ctx, &expr0_0, pattern5_1, &expr5_0, &expr6_0, &expr7_0,
                    )?;
                    let expr9_0 = constructor_side_effect(ctx, &expr8_0)?;
                    let expr10_0 = C::abi_first_ret(ctx, pattern5_0, &expr0_0);
                    let expr11_0 = C::abi_num_rets(ctx, &expr0_0);
                    let expr12_0 = C::range(ctx, expr10_0, expr11_0);
                    let expr13_0 = C::output_builder_new(ctx);
                    let expr14_0 =
                        constructor_lower_call_rets(ctx, &expr0_0, &expr6_0, expr12_0, &expr13_0)?;
                    return Some(expr14_0);
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref pattern2_0,
            func_ref: pattern2_1,
        } => {
            if let &Opcode::FuncAddr = pattern2_0 {
                let (pattern4_0, pattern4_1, pattern4_2) = C::func_ref_data(ctx, pattern2_1);
                if let Some(()) = C::reloc_distance_near(ctx, pattern4_2) {
                    // Rule at src/isa/s390x/lower.isle line 2265.
                    let expr0_0: i32 = 0i128 as i32;
                    let expr1_0 = C::memflags_trusted(ctx);
                    let expr2_0 = C::memarg_symbol(ctx, pattern4_1, expr0_0, expr1_0);
                    let expr3_0 = constructor_load_addr(ctx, &expr2_0)?;
                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                    return Some(expr4_0);
                }
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref pattern2_0,
            global_value: pattern2_1,
        } => {
            if let &Opcode::SymbolValue = pattern2_0 {
                if let Some((pattern4_0, pattern4_1, pattern4_2)) =
                    C::symbol_value_data(ctx, pattern2_1)
                {
                    if let Some(()) = C::reloc_distance_near(ctx, pattern4_1) {
                        let mut closure6 = || {
                            let expr0_0 = constructor_memarg_symbol_offset(ctx, pattern4_2)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern6_0) = closure6() {
                            // Rule at src/isa/s390x/lower.isle line 2276.
                            let expr0_0 = C::memflags_trusted(ctx);
                            let expr1_0 = C::memarg_symbol(ctx, pattern4_0, pattern6_0, expr0_0);
                            let expr2_0 = constructor_load_addr(ctx, &expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                }
            }
        }
        &InstructionData::Store {
            opcode: ref pattern2_0,
            args: ref pattern2_1,
            flags: pattern2_2,
            offset: pattern2_3,
        } => {
            if let &Opcode::Store = pattern2_0 {
                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                let pattern5_0 = C::value_type(ctx, pattern4_0);
                if let Some(pattern6_0) = C::vr128_ty(ctx, pattern5_0) {
                    if let Some(()) = C::littleendian(ctx, pattern2_2) {
                        let mut closure8 = || {
                            let expr0_0 = C::lane_order(ctx)?;
                            return Some(expr0_0);
                        };
                        if let Some(pattern8_0) = closure8() {
                            if let &LaneOrder::LittleEndian = &pattern8_0 {
                                // Rule at src/isa/s390x/lower.isle line 2715.
                                let expr0_0 = C::put_in_reg(ctx, pattern4_0);
                                let expr1_0 = constructor_vec_store_full_rev(
                                    ctx, pattern6_0, expr0_0, pattern2_2, pattern4_1, pattern2_3,
                                )?;
                                let expr2_0 = constructor_side_effect(ctx, &expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                    }
                }
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref pattern2_0,
            args: ref pattern2_1,
            imm: pattern2_2,
        } => {
            if let &Opcode::Insertlane = pattern2_0 {
                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                let pattern5_0 = C::value_type(ctx, pattern4_0);
                let pattern6_0 = C::value_type(ctx, pattern4_1);
                let pattern7_0 = C::u8_from_uimm8(ctx, pattern2_2);
                let mut closure8 = || {
                    let expr0_0 = C::ty_int_ref_scalar_64(ctx, pattern6_0)?;
                    return Some(expr0_0);
                };
                if let Some(pattern8_0) = closure8() {
                    // Rule at src/isa/s390x/lower.isle line 1786.
                    let expr0_0 = C::put_in_reg(ctx, pattern4_0);
                    let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                    let expr2_0 = C::be_lane_idx(ctx, pattern5_0, pattern7_0);
                    let expr3_0 = C::zero_reg(ctx);
                    let expr4_0 = constructor_vec_insert_lane(
                        ctx, pattern5_0, expr0_0, expr1_0, expr2_0, expr3_0,
                    )?;
                    let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                    return Some(expr5_0);
                }
            }
        }
        _ => {}
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if pattern2_0 == I8 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Popcnt => {
                            // Rule at src/isa/s390x/lower.isle line 1315.
                            let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr1_0 = constructor_popcnt_byte(ctx, expr0_0)?;
                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                            return Some(expr2_0);
                        }
                        &Opcode::IsNull => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if pattern7_0 == R64 {
                                // Rule at src/isa/s390x/lower.isle line 3707.
                                let expr0_0: Type = I8;
                                let expr1_0: Type = I64;
                                let expr2_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr3_0: i16 = 0i128 as i16;
                                let expr4_0 =
                                    constructor_icmps_simm16(ctx, expr1_0, expr2_0, expr3_0)?;
                                let expr5_0 = IntCC::Equal;
                                let expr6_0 = C::intcc_as_cond(ctx, &expr5_0);
                                let expr7_0 = constructor_bool(ctx, &expr4_0, &expr6_0)?;
                                let expr8_0 = constructor_lower_bool(ctx, expr0_0, &expr7_0)?;
                                let expr9_0 = constructor_output_reg(ctx, expr8_0)?;
                                return Some(expr9_0);
                            }
                        }
                        &Opcode::IsInvalid => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if pattern7_0 == R64 {
                                // Rule at src/isa/s390x/lower.isle line 3713.
                                let expr0_0: Type = I8;
                                let expr1_0: Type = I64;
                                let expr2_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr3_0: i16 = -1i128 as i16;
                                let expr4_0 =
                                    constructor_icmps_simm16(ctx, expr1_0, expr2_0, expr3_0)?;
                                let expr5_0 = IntCC::Equal;
                                let expr6_0 = C::intcc_as_cond(ctx, &expr5_0);
                                let expr7_0 = constructor_bool(ctx, &expr4_0, &expr6_0)?;
                                let expr8_0 = constructor_lower_bool(ctx, expr0_0, &expr7_0)?;
                                let expr9_0 = constructor_output_reg(ctx, expr8_0)?;
                                return Some(expr9_0);
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::LoadNoOffset {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                } => {
                    if let &Opcode::AtomicLoad = pattern5_0 {
                        // Rule at src/isa/s390x/lower.isle line 3222.
                        let expr0_0: Type = I8;
                        let expr1_0 = C::zero_offset(ctx);
                        let expr2_0 =
                            constructor_lower_address(ctx, pattern5_2, pattern5_1, expr1_0)?;
                        let expr3_0 = constructor_zext32_mem(ctx, expr0_0, &expr2_0)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                }
                &InstructionData::Load {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                    offset: pattern5_3,
                } => {
                    if let &Opcode::Load = pattern5_0 {
                        // Rule at src/isa/s390x/lower.isle line 2315.
                        let expr0_0: Type = I8;
                        let expr1_0 =
                            constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                        let expr2_0 = constructor_zext32_mem(ctx, expr0_0, &expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                }
                _ => {}
            }
        }
        if pattern2_0 == I16 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::LoadNoOffset {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                } => {
                    if let &Opcode::AtomicLoad = pattern5_0 {
                        if let Some(()) = C::littleendian(ctx, pattern5_2) {
                            // Rule at src/isa/s390x/lower.isle line 3230.
                            let expr0_0 = C::zero_offset(ctx);
                            let expr1_0 =
                                constructor_lower_address(ctx, pattern5_2, pattern5_1, expr0_0)?;
                            let expr2_0 = constructor_loadrev16(ctx, &expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                }
                &InstructionData::Load {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                    offset: pattern5_3,
                } => {
                    if let &Opcode::Load = pattern5_0 {
                        if let Some(()) = C::bigendian(ctx, pattern5_2) {
                            // Rule at src/isa/s390x/lower.isle line 2319.
                            let expr0_0: Type = I16;
                            let expr1_0 =
                                constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                            let expr2_0 = constructor_zext32_mem(ctx, expr0_0, &expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                }
                _ => {}
            }
        }
        if pattern2_0 == I32 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::LoadNoOffset {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                } => {
                    match pattern5_0 {
                        &Opcode::Bitcast => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if pattern7_0 == F32 {
                                // Rule at src/isa/s390x/lower.isle line 1753.
                                let expr0_0: Type = F32X4;
                                let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr2_0: u8 = 0i128 as u8;
                                let expr3_0 = C::zero_reg(ctx);
                                let expr4_0 = constructor_vec_extract_lane(
                                    ctx, expr0_0, expr1_0, expr2_0, expr3_0,
                                )?;
                                let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                                return Some(expr5_0);
                            }
                        }
                        &Opcode::AtomicLoad => {
                            if let Some(()) = C::littleendian(ctx, pattern5_2) {
                                // Rule at src/isa/s390x/lower.isle line 3238.
                                let expr0_0 = C::zero_offset(ctx);
                                let expr1_0 = constructor_lower_address(
                                    ctx, pattern5_2, pattern5_1, expr0_0,
                                )?;
                                let expr2_0 = constructor_loadrev32(ctx, &expr1_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::Load {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                    offset: pattern5_3,
                } => {
                    if let &Opcode::Load = pattern5_0 {
                        if let Some(()) = C::bigendian(ctx, pattern5_2) {
                            // Rule at src/isa/s390x/lower.isle line 2327.
                            let expr0_0 =
                                constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                            let expr1_0 = constructor_load32(ctx, &expr0_0)?;
                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                            return Some(expr2_0);
                        }
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Umulhi => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 402.
                            let expr0_0 = constructor_put_in_reg_zext64(ctx, pattern7_0)?;
                            let expr1_0 = constructor_put_in_reg_zext64(ctx, pattern7_1)?;
                            let expr2_0: Type = I64;
                            let expr3_0 = constructor_mul_reg(ctx, expr2_0, expr0_0, expr1_0)?;
                            let expr4_0: Type = I64;
                            let expr5_0: u8 = 32i128 as u8;
                            let expr6_0 = constructor_lshr_imm(ctx, expr4_0, expr3_0, expr5_0)?;
                            let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                            return Some(expr7_0);
                        }
                        &Opcode::Smulhi => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 440.
                            let expr0_0 = constructor_put_in_reg_sext64(ctx, pattern7_0)?;
                            let expr1_0 = constructor_put_in_reg_sext64(ctx, pattern7_1)?;
                            let expr2_0: Type = I64;
                            let expr3_0 = constructor_mul_reg(ctx, expr2_0, expr0_0, expr1_0)?;
                            let expr4_0: Type = I64;
                            let expr5_0: u8 = 32i128 as u8;
                            let expr6_0 = constructor_ashr_imm(ctx, expr4_0, expr3_0, expr5_0)?;
                            let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                            return Some(expr7_0);
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        if pattern2_0 == I64 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::LoadNoOffset {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                } => {
                    match pattern5_0 {
                        &Opcode::Bitcast => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if pattern7_0 == F64 {
                                // Rule at src/isa/s390x/lower.isle line 1745.
                                let expr0_0: Type = F64X2;
                                let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr2_0: u8 = 0i128 as u8;
                                let expr3_0 = C::zero_reg(ctx);
                                let expr4_0 = constructor_vec_extract_lane(
                                    ctx, expr0_0, expr1_0, expr2_0, expr3_0,
                                )?;
                                let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                                return Some(expr5_0);
                            }
                        }
                        &Opcode::AtomicLoad => {
                            if let Some(()) = C::littleendian(ctx, pattern5_2) {
                                // Rule at src/isa/s390x/lower.isle line 3246.
                                let expr0_0 = C::zero_offset(ctx);
                                let expr1_0 = constructor_lower_address(
                                    ctx, pattern5_2, pattern5_1, expr0_0,
                                )?;
                                let expr2_0 = constructor_loadrev64(ctx, &expr1_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::Load {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                    offset: pattern5_3,
                } => {
                    if let &Opcode::Load = pattern5_0 {
                        if let Some(()) = C::bigendian(ctx, pattern5_2) {
                            // Rule at src/isa/s390x/lower.isle line 2335.
                            let expr0_0 =
                                constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                            let expr1_0 = constructor_load64(ctx, &expr0_0)?;
                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                            return Some(expr2_0);
                        }
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Umulhi => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 409.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_umul_wide(ctx, expr0_0, expr1_0)?;
                            let expr3_0: Type = I64;
                            let expr4_0 = C::regpair_hi(ctx, expr2_0);
                            let expr5_0 = constructor_copy_reg(ctx, expr3_0, expr4_0)?;
                            let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                            return Some(expr6_0);
                        }
                        &Opcode::Smulhi => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 447.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_smul_wide(ctx, expr0_0, expr1_0)?;
                            let expr3_0: Type = I64;
                            let expr4_0 = C::regpair_hi(ctx, expr2_0);
                            let expr5_0 = constructor_copy_reg(ctx, expr3_0, expr4_0)?;
                            let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                            return Some(expr6_0);
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        if pattern2_0 == I128 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Unary {
                opcode: ref pattern5_0,
                arg: pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Ineg => {
                        // Rule at src/isa/s390x/lower.isle line 276.
                        let expr0_0: Type = I128;
                        let expr1_0: Type = I128;
                        let expr2_0: u128 = 0i128 as u128;
                        let expr3_0 = constructor_vec_imm(ctx, expr1_0, expr2_0)?;
                        let expr4_0 = C::put_in_reg(ctx, pattern5_1);
                        let expr5_0 = constructor_vec_sub(ctx, expr0_0, expr3_0, expr4_0)?;
                        let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                        return Some(expr6_0);
                    }
                    &Opcode::Iabs => {
                        // Rule at src/isa/s390x/lower.isle line 252.
                        let expr0_0: Type = I128;
                        let expr1_0: u128 = 0i128 as u128;
                        let expr2_0 = constructor_vec_imm(ctx, expr0_0, expr1_0)?;
                        let expr3_0 = C::put_in_reg(ctx, pattern5_1);
                        let expr4_0: Type = I128;
                        let expr5_0 = constructor_vec_sub(ctx, expr4_0, expr2_0, expr3_0)?;
                        let expr6_0: Type = I64X2;
                        let expr7_0: u8 = 0i128 as u8;
                        let expr8_0 =
                            constructor_vec_replicate_lane(ctx, expr6_0, expr3_0, expr7_0)?;
                        let expr9_0: Type = I64X2;
                        let expr10_0 = constructor_vec_cmph(ctx, expr9_0, expr2_0, expr8_0)?;
                        let expr11_0: Type = I128;
                        let expr12_0 =
                            constructor_vec_select(ctx, expr11_0, expr5_0, expr3_0, expr10_0)?;
                        let expr13_0 = constructor_output_reg(ctx, expr12_0)?;
                        return Some(expr13_0);
                    }
                    &Opcode::Clz => {
                        // Rule at src/isa/s390x/lower.isle line 1217.
                        let expr0_0: Type = I64X2;
                        let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                        let expr2_0 = constructor_vec_clz(ctx, expr0_0, expr1_0)?;
                        let expr3_0: Type = I64X2;
                        let expr4_0: u128 = 0i128 as u128;
                        let expr5_0 = constructor_vec_imm(ctx, expr3_0, expr4_0)?;
                        let expr6_0: Type = I64X2;
                        let expr7_0: u8 = 0i128 as u8;
                        let expr8_0: u8 = 0i128 as u8;
                        let expr9_0 = constructor_vec_permute_dw_imm(
                            ctx, expr6_0, expr5_0, expr7_0, expr2_0, expr8_0,
                        )?;
                        let expr10_0: Type = I64X2;
                        let expr11_0: u8 = 0i128 as u8;
                        let expr12_0: u8 = 1i128 as u8;
                        let expr13_0 = constructor_vec_permute_dw_imm(
                            ctx, expr10_0, expr5_0, expr11_0, expr2_0, expr12_0,
                        )?;
                        let expr14_0: Type = I64X2;
                        let expr15_0 = constructor_vec_add(ctx, expr14_0, expr9_0, expr13_0)?;
                        let expr16_0: Type = I64X2;
                        let expr17_0: Type = I64X2;
                        let expr18_0: u64 = 64i128 as u64;
                        let expr19_0 = constructor_vec_imm_splat(ctx, expr17_0, expr18_0)?;
                        let expr20_0 = constructor_vec_cmpeq(ctx, expr16_0, expr9_0, expr19_0)?;
                        let expr21_0: Type = I128;
                        let expr22_0 =
                            constructor_vec_select(ctx, expr21_0, expr15_0, expr9_0, expr20_0)?;
                        let expr23_0 = constructor_output_reg(ctx, expr22_0)?;
                        return Some(expr23_0);
                    }
                    &Opcode::Cls => {
                        // Rule at src/isa/s390x/lower.isle line 1251.
                        let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                        let expr1_0: Type = I8X16;
                        let expr2_0: u64 = 255i128 as u64;
                        let expr3_0 = constructor_vec_imm_splat(ctx, expr1_0, expr2_0)?;
                        let expr4_0 = constructor_vec_ashr_by_byte(ctx, expr0_0, expr3_0)?;
                        let expr5_0 = constructor_vec_ashr_by_bit(ctx, expr4_0, expr3_0)?;
                        let expr6_0: Type = I128;
                        let expr7_0 = constructor_vec_xor(ctx, expr6_0, expr0_0, expr5_0)?;
                        let expr8_0: Type = I64X2;
                        let expr9_0 = constructor_vec_clz(ctx, expr8_0, expr7_0)?;
                        let expr10_0: Type = I64X2;
                        let expr11_0: u128 = 0i128 as u128;
                        let expr12_0 = constructor_vec_imm(ctx, expr10_0, expr11_0)?;
                        let expr13_0: Type = I64X2;
                        let expr14_0: u8 = 0i128 as u8;
                        let expr15_0: u8 = 0i128 as u8;
                        let expr16_0 = constructor_vec_permute_dw_imm(
                            ctx, expr13_0, expr12_0, expr14_0, expr9_0, expr15_0,
                        )?;
                        let expr17_0: Type = I64X2;
                        let expr18_0: u8 = 0i128 as u8;
                        let expr19_0: u8 = 1i128 as u8;
                        let expr20_0 = constructor_vec_permute_dw_imm(
                            ctx, expr17_0, expr12_0, expr18_0, expr9_0, expr19_0,
                        )?;
                        let expr21_0: Type = I64X2;
                        let expr22_0 = constructor_vec_add(ctx, expr21_0, expr16_0, expr20_0)?;
                        let expr23_0: Type = I64X2;
                        let expr24_0: Type = I64X2;
                        let expr25_0: u64 = 64i128 as u64;
                        let expr26_0 = constructor_vec_imm_splat(ctx, expr24_0, expr25_0)?;
                        let expr27_0 = constructor_vec_cmpeq(ctx, expr23_0, expr16_0, expr26_0)?;
                        let expr28_0: Type = I128;
                        let expr29_0: Type = I128;
                        let expr30_0 =
                            constructor_vec_select(ctx, expr29_0, expr22_0, expr16_0, expr27_0)?;
                        let expr31_0 = constructor_vec_add(ctx, expr28_0, expr30_0, expr3_0)?;
                        let expr32_0 = constructor_output_reg(ctx, expr31_0)?;
                        return Some(expr32_0);
                    }
                    &Opcode::Ctz => {
                        // Rule at src/isa/s390x/lower.isle line 1302.
                        let expr0_0: Type = I64X2;
                        let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                        let expr2_0 = constructor_vec_ctz(ctx, expr0_0, expr1_0)?;
                        let expr3_0: Type = I64X2;
                        let expr4_0: u128 = 0i128 as u128;
                        let expr5_0 = constructor_vec_imm(ctx, expr3_0, expr4_0)?;
                        let expr6_0: Type = I64X2;
                        let expr7_0: u8 = 0i128 as u8;
                        let expr8_0: u8 = 0i128 as u8;
                        let expr9_0 = constructor_vec_permute_dw_imm(
                            ctx, expr6_0, expr5_0, expr7_0, expr2_0, expr8_0,
                        )?;
                        let expr10_0: Type = I64X2;
                        let expr11_0: u8 = 0i128 as u8;
                        let expr12_0: u8 = 1i128 as u8;
                        let expr13_0 = constructor_vec_permute_dw_imm(
                            ctx, expr10_0, expr5_0, expr11_0, expr2_0, expr12_0,
                        )?;
                        let expr14_0: Type = I64X2;
                        let expr15_0 = constructor_vec_add(ctx, expr14_0, expr9_0, expr13_0)?;
                        let expr16_0: Type = I64X2;
                        let expr17_0: Type = I64X2;
                        let expr18_0: u64 = 64i128 as u64;
                        let expr19_0 = constructor_vec_imm_splat(ctx, expr17_0, expr18_0)?;
                        let expr20_0 = constructor_vec_cmpeq(ctx, expr16_0, expr13_0, expr19_0)?;
                        let expr21_0: Type = I128;
                        let expr22_0 =
                            constructor_vec_select(ctx, expr21_0, expr15_0, expr13_0, expr20_0)?;
                        let expr23_0 = constructor_output_reg(ctx, expr22_0)?;
                        return Some(expr23_0);
                    }
                    &Opcode::Popcnt => {
                        // Rule at src/isa/s390x/lower.isle line 1354.
                        let expr0_0: Type = I64X2;
                        let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                        let expr2_0 = constructor_vec_popcnt(ctx, expr0_0, expr1_0)?;
                        let expr3_0: Type = I64X2;
                        let expr4_0: u128 = 0i128 as u128;
                        let expr5_0 = constructor_vec_imm(ctx, expr3_0, expr4_0)?;
                        let expr6_0: Type = I64X2;
                        let expr7_0: u8 = 0i128 as u8;
                        let expr8_0: u8 = 0i128 as u8;
                        let expr9_0 = constructor_vec_permute_dw_imm(
                            ctx, expr6_0, expr5_0, expr7_0, expr2_0, expr8_0,
                        )?;
                        let expr10_0: Type = I64X2;
                        let expr11_0: u8 = 0i128 as u8;
                        let expr12_0: u8 = 1i128 as u8;
                        let expr13_0 = constructor_vec_permute_dw_imm(
                            ctx, expr10_0, expr5_0, expr11_0, expr2_0, expr12_0,
                        )?;
                        let expr14_0: Type = I64X2;
                        let expr15_0 = constructor_vec_add(ctx, expr14_0, expr9_0, expr13_0)?;
                        let expr16_0 = constructor_output_reg(ctx, expr15_0)?;
                        return Some(expr16_0);
                    }
                    _ => {}
                }
            }
        }
        if pattern2_0 == R64 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::Load = pattern5_0 {
                    if let Some(()) = C::bigendian(ctx, pattern5_2) {
                        // Rule at src/isa/s390x/lower.isle line 2343.
                        let expr0_0 =
                            constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                        let expr1_0 = constructor_load64(ctx, &expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                }
            }
        }
        if pattern2_0 == F32 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::FcvtFromUint => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::fits_in_64(ctx, pattern7_0) {
                                // Rule at src/isa/s390x/lower.isle line 1526.
                                let expr0_0: Type = F32;
                                let expr1_0: Type = F64;
                                let expr2_0 = FpuRoundMode::ToNearestTiesToEven;
                                let expr3_0: Type = F64;
                                let expr4_0 = FpuRoundMode::ShorterPrecision;
                                let expr5_0 = constructor_put_in_reg_zext64(ctx, pattern5_1)?;
                                let expr6_0 = constructor_fcvt_from_uint_reg(
                                    ctx, expr3_0, &expr4_0, expr5_0,
                                )?;
                                let expr7_0 = constructor_fdemote_reg(
                                    ctx, expr0_0, expr1_0, &expr2_0, expr6_0,
                                )?;
                                let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                                return Some(expr8_0);
                            }
                        }
                        &Opcode::FcvtFromSint => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::fits_in_64(ctx, pattern7_0) {
                                // Rule at src/isa/s390x/lower.isle line 1567.
                                let expr0_0: Type = F32;
                                let expr1_0: Type = F64;
                                let expr2_0 = FpuRoundMode::ToNearestTiesToEven;
                                let expr3_0: Type = F64;
                                let expr4_0 = FpuRoundMode::ShorterPrecision;
                                let expr5_0 = constructor_put_in_reg_sext64(ctx, pattern5_1)?;
                                let expr6_0 = constructor_fcvt_from_sint_reg(
                                    ctx, expr3_0, &expr4_0, expr5_0,
                                )?;
                                let expr7_0 = constructor_fdemote_reg(
                                    ctx, expr0_0, expr1_0, &expr2_0, expr6_0,
                                )?;
                                let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                                return Some(expr8_0);
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::LoadNoOffset {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                } => {
                    if let &Opcode::Bitcast = pattern5_0 {
                        let pattern7_0 = C::value_type(ctx, pattern5_1);
                        if pattern7_0 == I32 {
                            // Rule at src/isa/s390x/lower.isle line 1749.
                            let expr0_0: Type = F32X4;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0: u8 = 0i128 as u8;
                            let expr3_0 = C::zero_reg(ctx);
                            let expr4_0 = constructor_vec_insert_lane_undef(
                                ctx, expr0_0, expr1_0, expr2_0, expr3_0,
                            )?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                    }
                }
                &InstructionData::Load {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                    offset: pattern5_3,
                } => {
                    if let &Opcode::Load = pattern5_0 {
                        if let Some(()) = C::bigendian(ctx, pattern5_2) {
                            // Rule at src/isa/s390x/lower.isle line 2351.
                            let expr0_0: Type = F32X4;
                            let expr1_0 =
                                constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                            let expr2_0: u8 = 0i128 as u8;
                            let expr3_0 =
                                constructor_vec_load_lane_undef(ctx, expr0_0, &expr1_0, expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    if let &Opcode::Fcopysign = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 1421.
                        let expr0_0: Type = F32;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr3_0: Type = F32;
                        let expr4_0: u64 = 2147483647i128 as u64;
                        let expr5_0 = constructor_imm(ctx, expr3_0, expr4_0)?;
                        let expr6_0 =
                            constructor_vec_select(ctx, expr0_0, expr1_0, expr2_0, expr5_0)?;
                        let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                        return Some(expr7_0);
                    }
                }
                _ => {}
            }
        }
        if pattern2_0 == F64 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::FcvtFromUint => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::fits_in_64(ctx, pattern7_0) {
                                // Rule at src/isa/s390x/lower.isle line 1532.
                                let expr0_0: Type = F64;
                                let expr1_0 = FpuRoundMode::ToNearestTiesToEven;
                                let expr2_0 = constructor_put_in_reg_zext64(ctx, pattern5_1)?;
                                let expr3_0 = constructor_fcvt_from_uint_reg(
                                    ctx, expr0_0, &expr1_0, expr2_0,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                        }
                        &Opcode::FcvtFromSint => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if let Some(pattern8_0) = C::fits_in_64(ctx, pattern7_0) {
                                // Rule at src/isa/s390x/lower.isle line 1573.
                                let expr0_0: Type = F64;
                                let expr1_0 = FpuRoundMode::ToNearestTiesToEven;
                                let expr2_0 = constructor_put_in_reg_sext64(ctx, pattern5_1)?;
                                let expr3_0 = constructor_fcvt_from_sint_reg(
                                    ctx, expr0_0, &expr1_0, expr2_0,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::LoadNoOffset {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                } => {
                    if let &Opcode::Bitcast = pattern5_0 {
                        let pattern7_0 = C::value_type(ctx, pattern5_1);
                        if pattern7_0 == I64 {
                            // Rule at src/isa/s390x/lower.isle line 1741.
                            let expr0_0: Type = F64X2;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0: u8 = 0i128 as u8;
                            let expr3_0 = C::zero_reg(ctx);
                            let expr4_0 = constructor_vec_insert_lane_undef(
                                ctx, expr0_0, expr1_0, expr2_0, expr3_0,
                            )?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                    }
                }
                &InstructionData::Load {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                    offset: pattern5_3,
                } => {
                    if let &Opcode::Load = pattern5_0 {
                        if let Some(()) = C::bigendian(ctx, pattern5_2) {
                            // Rule at src/isa/s390x/lower.isle line 2359.
                            let expr0_0: Type = F64X2;
                            let expr1_0 =
                                constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                            let expr2_0: u8 = 0i128 as u8;
                            let expr3_0 =
                                constructor_vec_load_lane_undef(ctx, expr0_0, &expr1_0, expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    if let &Opcode::Fcopysign = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 1423.
                        let expr0_0: Type = F64;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr3_0: Type = F64;
                        let expr4_0: u64 = 9223372036854775807i128 as u64;
                        let expr5_0 = constructor_imm(ctx, expr3_0, expr4_0)?;
                        let expr6_0 =
                            constructor_vec_select(ctx, expr0_0, expr1_0, expr2_0, expr5_0)?;
                        let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                        return Some(expr7_0);
                    }
                }
                _ => {}
            }
        }
        if pattern2_0 == I8X16 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Umulhi => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 414.
                        let expr0_0: Type = I8X16;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr3_0 = constructor_vec_umulhi(ctx, expr0_0, expr1_0, expr2_0)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                    &Opcode::Smulhi => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 452.
                        let expr0_0: Type = I8X16;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr3_0 = constructor_vec_smulhi(ctx, expr0_0, expr1_0, expr2_0)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                    _ => {}
                }
            }
        }
        if pattern2_0 == I16X8 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Load {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                    offset: pattern5_3,
                } => {
                    match pattern5_0 {
                        &Opcode::Uload8x8 => {
                            // Rule at src/isa/s390x/lower.isle line 2575.
                            let expr0_0: Type = I8X16;
                            let expr1_0: Type = I8X16;
                            let expr2_0 = constructor_load_v64(
                                ctx, expr1_0, pattern5_2, pattern5_1, pattern5_3,
                            )?;
                            let expr3_0 = constructor_vec_unpacku_high(ctx, expr0_0, expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::Sload8x8 => {
                            // Rule at src/isa/s390x/lower.isle line 2579.
                            let expr0_0: Type = I8X16;
                            let expr1_0: Type = I8X16;
                            let expr2_0 = constructor_load_v64(
                                ctx, expr1_0, pattern5_2, pattern5_1, pattern5_3,
                            )?;
                            let expr3_0 = constructor_vec_unpacks_high(ctx, expr0_0, expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Umulhi => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 415.
                            let expr0_0: Type = I16X8;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr3_0 = constructor_vec_umulhi(ctx, expr0_0, expr1_0, expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::Smulhi => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 453.
                            let expr0_0: Type = I16X8;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr3_0 = constructor_vec_smulhi(ctx, expr0_0, expr1_0, expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        if pattern2_0 == I32X4 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Load {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                    offset: pattern5_3,
                } => {
                    match pattern5_0 {
                        &Opcode::Uload16x4 => {
                            // Rule at src/isa/s390x/lower.isle line 2583.
                            let expr0_0: Type = I16X8;
                            let expr1_0: Type = I16X8;
                            let expr2_0 = constructor_load_v64(
                                ctx, expr1_0, pattern5_2, pattern5_1, pattern5_3,
                            )?;
                            let expr3_0 = constructor_vec_unpacku_high(ctx, expr0_0, expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::Sload16x4 => {
                            // Rule at src/isa/s390x/lower.isle line 2587.
                            let expr0_0: Type = I16X8;
                            let expr1_0: Type = I16X8;
                            let expr2_0 = constructor_load_v64(
                                ctx, expr1_0, pattern5_2, pattern5_1, pattern5_3,
                            )?;
                            let expr3_0 = constructor_vec_unpacks_high(ctx, expr0_0, expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Umulhi => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 416.
                            let expr0_0: Type = I32X4;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr3_0 = constructor_vec_umulhi(ctx, expr0_0, expr1_0, expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::Smulhi => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 454.
                            let expr0_0: Type = I32X4;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr3_0 = constructor_vec_smulhi(ctx, expr0_0, expr1_0, expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        if pattern2_0 == I64X2 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::FcvtToUintSat => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if pattern7_0 == F64X2 {
                                // Rule at src/isa/s390x/lower.isle line 1685.
                                let expr0_0: Type = F64X2;
                                let expr1_0 = FpuRoundMode::ToZero;
                                let expr2_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr3_0 =
                                    constructor_fcvt_to_uint_reg(ctx, expr0_0, &expr1_0, expr2_0)?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                        }
                        &Opcode::FcvtToSintSat => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if pattern7_0 == F64X2 {
                                // Rule at src/isa/s390x/lower.isle line 1731.
                                let expr0_0: Type = I64X2;
                                let expr1_0: Type = F64X2;
                                let expr2_0 = FpuRoundMode::ToZero;
                                let expr3_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr4_0 =
                                    constructor_fcvt_to_sint_reg(ctx, expr1_0, &expr2_0, expr3_0)?;
                                let expr5_0: Type = I64X2;
                                let expr6_0: u128 = 0i128 as u128;
                                let expr7_0 = constructor_vec_imm(ctx, expr5_0, expr6_0)?;
                                let expr8_0: Type = F64X2;
                                let expr9_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr10_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr11_0 =
                                    constructor_vec_fcmpeq(ctx, expr8_0, expr9_0, expr10_0)?;
                                let expr12_0 = constructor_vec_select(
                                    ctx, expr0_0, expr4_0, expr7_0, expr11_0,
                                )?;
                                let expr13_0 = constructor_output_reg(ctx, expr12_0)?;
                                return Some(expr13_0);
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::Load {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                    flags: pattern5_2,
                    offset: pattern5_3,
                } => {
                    match pattern5_0 {
                        &Opcode::Uload32x2 => {
                            // Rule at src/isa/s390x/lower.isle line 2591.
                            let expr0_0: Type = I32X4;
                            let expr1_0: Type = I32X4;
                            let expr2_0 = constructor_load_v64(
                                ctx, expr1_0, pattern5_2, pattern5_1, pattern5_3,
                            )?;
                            let expr3_0 = constructor_vec_unpacku_high(ctx, expr0_0, expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::Sload32x2 => {
                            // Rule at src/isa/s390x/lower.isle line 2595.
                            let expr0_0: Type = I32X4;
                            let expr1_0: Type = I32X4;
                            let expr2_0 = constructor_load_v64(
                                ctx, expr1_0, pattern5_2, pattern5_1, pattern5_3,
                            )?;
                            let expr3_0 = constructor_vec_unpacks_high(ctx, expr0_0, expr2_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Umulhi => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 420.
                            let expr0_0: Type = I64X2;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0: u8 = 0i128 as u8;
                            let expr3_0 = C::zero_reg(ctx);
                            let expr4_0 = constructor_vec_extract_lane(
                                ctx, expr0_0, expr1_0, expr2_0, expr3_0,
                            )?;
                            let expr5_0: Type = I64X2;
                            let expr6_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr7_0: u8 = 0i128 as u8;
                            let expr8_0 = C::zero_reg(ctx);
                            let expr9_0 = constructor_vec_extract_lane(
                                ctx, expr5_0, expr6_0, expr7_0, expr8_0,
                            )?;
                            let expr10_0 = constructor_umul_wide(ctx, expr4_0, expr9_0)?;
                            let expr11_0: Type = I64;
                            let expr12_0 = C::regpair_hi(ctx, expr10_0);
                            let expr13_0 = constructor_copy_reg(ctx, expr11_0, expr12_0)?;
                            let expr14_0: Type = I64X2;
                            let expr15_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr16_0: u8 = 1i128 as u8;
                            let expr17_0 = C::zero_reg(ctx);
                            let expr18_0 = constructor_vec_extract_lane(
                                ctx, expr14_0, expr15_0, expr16_0, expr17_0,
                            )?;
                            let expr19_0: Type = I64X2;
                            let expr20_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr21_0: u8 = 1i128 as u8;
                            let expr22_0 = C::zero_reg(ctx);
                            let expr23_0 = constructor_vec_extract_lane(
                                ctx, expr19_0, expr20_0, expr21_0, expr22_0,
                            )?;
                            let expr24_0 = constructor_umul_wide(ctx, expr18_0, expr23_0)?;
                            let expr25_0: Type = I64;
                            let expr26_0 = C::regpair_hi(ctx, expr24_0);
                            let expr27_0 = constructor_copy_reg(ctx, expr25_0, expr26_0)?;
                            let expr28_0: Type = I64X2;
                            let expr29_0 =
                                constructor_mov_to_vec128(ctx, expr28_0, expr13_0, expr27_0)?;
                            let expr30_0 = constructor_output_reg(ctx, expr29_0)?;
                            return Some(expr30_0);
                        }
                        &Opcode::Smulhi => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 458.
                            let expr0_0: Type = I64X2;
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0: u8 = 0i128 as u8;
                            let expr3_0 = C::zero_reg(ctx);
                            let expr4_0 = constructor_vec_extract_lane(
                                ctx, expr0_0, expr1_0, expr2_0, expr3_0,
                            )?;
                            let expr5_0: Type = I64X2;
                            let expr6_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr7_0: u8 = 0i128 as u8;
                            let expr8_0 = C::zero_reg(ctx);
                            let expr9_0 = constructor_vec_extract_lane(
                                ctx, expr5_0, expr6_0, expr7_0, expr8_0,
                            )?;
                            let expr10_0 = constructor_smul_wide(ctx, expr4_0, expr9_0)?;
                            let expr11_0: Type = I64;
                            let expr12_0 = C::regpair_hi(ctx, expr10_0);
                            let expr13_0 = constructor_copy_reg(ctx, expr11_0, expr12_0)?;
                            let expr14_0: Type = I64X2;
                            let expr15_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr16_0: u8 = 1i128 as u8;
                            let expr17_0 = C::zero_reg(ctx);
                            let expr18_0 = constructor_vec_extract_lane(
                                ctx, expr14_0, expr15_0, expr16_0, expr17_0,
                            )?;
                            let expr19_0: Type = I64X2;
                            let expr20_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr21_0: u8 = 1i128 as u8;
                            let expr22_0 = C::zero_reg(ctx);
                            let expr23_0 = constructor_vec_extract_lane(
                                ctx, expr19_0, expr20_0, expr21_0, expr22_0,
                            )?;
                            let expr24_0 = constructor_smul_wide(ctx, expr18_0, expr23_0)?;
                            let expr25_0: Type = I64;
                            let expr26_0 = C::regpair_hi(ctx, expr24_0);
                            let expr27_0 = constructor_copy_reg(ctx, expr25_0, expr26_0)?;
                            let expr28_0: Type = I64X2;
                            let expr29_0 =
                                constructor_mov_to_vec128(ctx, expr28_0, expr13_0, expr27_0)?;
                            let expr30_0 = constructor_output_reg(ctx, expr29_0)?;
                            return Some(expr30_0);
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        if pattern2_0 == F32X4 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    if let &Opcode::Fvdemote = pattern5_0 {
                        let pattern7_0 = C::value_type(ctx, pattern5_1);
                        if pattern7_0 == F64X2 {
                            // Rule at src/isa/s390x/lower.isle line 1511.
                            let expr0_0: Type = F32X4;
                            let expr1_0: Type = F64X2;
                            let expr2_0 = FpuRoundMode::Current;
                            let expr3_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr4_0 =
                                constructor_fdemote_reg(ctx, expr0_0, expr1_0, &expr2_0, expr3_0)?;
                            let expr5_0: Type = I64X2;
                            let expr6_0: Type = I64X2;
                            let expr7_0: u8 = 32i128 as u8;
                            let expr8_0 = constructor_vec_lshr_imm(ctx, expr6_0, expr4_0, expr7_0)?;
                            let expr9_0: Type = I64X2;
                            let expr10_0: u128 = 0i128 as u128;
                            let expr11_0 = constructor_vec_imm(ctx, expr9_0, expr10_0)?;
                            let expr12_0 =
                                constructor_vec_pack_lane_order(ctx, expr5_0, expr8_0, expr11_0)?;
                            let expr13_0 = constructor_output_reg(ctx, expr12_0)?;
                            return Some(expr13_0);
                        }
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    if let &Opcode::Fcopysign = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 1425.
                        let expr0_0: Type = F32X4;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr3_0: Type = F32X4;
                        let expr4_0: u8 = 1i128 as u8;
                        let expr5_0: u8 = 31i128 as u8;
                        let expr6_0 = constructor_vec_imm_bit_mask(ctx, expr3_0, expr4_0, expr5_0)?;
                        let expr7_0 =
                            constructor_vec_select(ctx, expr0_0, expr1_0, expr2_0, expr6_0)?;
                        let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                        return Some(expr8_0);
                    }
                }
                _ => {}
            }
        }
        if pattern2_0 == F64X2 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::FvpromoteLow => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if pattern7_0 == F32X4 {
                                // Rule at src/isa/s390x/lower.isle line 1497.
                                let expr0_0: Type = F64X2;
                                let expr1_0: Type = F32X4;
                                let expr2_0: Type = I32X4;
                                let expr3_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr4_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr5_0 = constructor_vec_merge_low_lane_order(
                                    ctx, expr2_0, expr3_0, expr4_0,
                                )?;
                                let expr6_0 =
                                    constructor_fpromote_reg(ctx, expr0_0, expr1_0, expr5_0)?;
                                let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                                return Some(expr7_0);
                            }
                        }
                        &Opcode::FcvtFromUint => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if pattern7_0 == I64X2 {
                                // Rule at src/isa/s390x/lower.isle line 1554.
                                let expr0_0: Type = F64X2;
                                let expr1_0 = FpuRoundMode::ToNearestTiesToEven;
                                let expr2_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr3_0 = constructor_fcvt_from_uint_reg(
                                    ctx, expr0_0, &expr1_0, expr2_0,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                        }
                        &Opcode::FcvtFromSint => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if pattern7_0 == I64X2 {
                                // Rule at src/isa/s390x/lower.isle line 1595.
                                let expr0_0: Type = F64X2;
                                let expr1_0 = FpuRoundMode::ToNearestTiesToEven;
                                let expr2_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr3_0 = constructor_fcvt_from_sint_reg(
                                    ctx, expr0_0, &expr1_0, expr2_0,
                                )?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                        }
                        &Opcode::FcvtLowFromSint => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if pattern7_0 == I32X4 {
                                // Rule at src/isa/s390x/lower.isle line 1602.
                                let expr0_0: Type = F64X2;
                                let expr1_0 = FpuRoundMode::ToNearestTiesToEven;
                                let expr2_0: Type = I32X4;
                                let expr3_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr4_0 =
                                    constructor_vec_unpacks_low_lane_order(ctx, expr2_0, expr3_0)?;
                                let expr5_0 = constructor_fcvt_from_sint_reg(
                                    ctx, expr0_0, &expr1_0, expr4_0,
                                )?;
                                let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                                return Some(expr6_0);
                            }
                        }
                        _ => {}
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    if let &Opcode::Fcopysign = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 1427.
                        let expr0_0: Type = F64X2;
                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr3_0: Type = F64X2;
                        let expr4_0: u8 = 1i128 as u8;
                        let expr5_0: u8 = 63i128 as u8;
                        let expr6_0 = constructor_vec_imm_bit_mask(ctx, expr3_0, expr4_0, expr5_0)?;
                        let expr7_0 =
                            constructor_vec_select(ctx, expr0_0, expr1_0, expr2_0, expr6_0)?;
                        let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                        return Some(expr8_0);
                    }
                }
                _ => {}
            }
        }
        if let Some(()) = C::mie2_disabled(ctx, pattern2_0) {
            if pattern2_0 == I16 {
                let pattern5_0 = C::inst_data(ctx, pattern0_0);
                if let &InstructionData::Unary {
                    opcode: ref pattern6_0,
                    arg: pattern6_1,
                } = &pattern5_0
                {
                    if let &Opcode::Popcnt = pattern6_0 {
                        // Rule at src/isa/s390x/lower.isle line 1331.
                        let expr0_0 = C::put_in_reg(ctx, pattern6_1);
                        let expr1_0 = constructor_popcnt_byte(ctx, expr0_0)?;
                        let expr2_0: Type = I32;
                        let expr3_0: Type = I32;
                        let expr4_0: u8 = 8i128 as u8;
                        let expr5_0 = constructor_lshr_imm(ctx, expr3_0, expr1_0, expr4_0)?;
                        let expr6_0 = constructor_add_reg(ctx, expr2_0, expr1_0, expr5_0)?;
                        let expr7_0: Type = I32;
                        let expr8_0: u16 = 255i128 as u16;
                        let expr9_0: u8 = 0i128 as u8;
                        let expr10_0 = C::uimm16shifted(ctx, expr8_0, expr9_0);
                        let expr11_0 =
                            constructor_and_uimm16shifted(ctx, expr7_0, expr6_0, expr10_0)?;
                        let expr12_0 = constructor_output_reg(ctx, expr11_0)?;
                        return Some(expr12_0);
                    }
                }
            }
            if pattern2_0 == I32 {
                let pattern5_0 = C::inst_data(ctx, pattern0_0);
                if let &InstructionData::Unary {
                    opcode: ref pattern6_0,
                    arg: pattern6_1,
                } = &pattern5_0
                {
                    if let &Opcode::Popcnt = pattern6_0 {
                        // Rule at src/isa/s390x/lower.isle line 1336.
                        let expr0_0 = C::put_in_reg(ctx, pattern6_1);
                        let expr1_0 = constructor_popcnt_byte(ctx, expr0_0)?;
                        let expr2_0: Type = I32;
                        let expr3_0: Type = I32;
                        let expr4_0: u8 = 16i128 as u8;
                        let expr5_0 = constructor_lshl_imm(ctx, expr3_0, expr1_0, expr4_0)?;
                        let expr6_0 = constructor_add_reg(ctx, expr2_0, expr1_0, expr5_0)?;
                        let expr7_0: Type = I32;
                        let expr8_0: Type = I32;
                        let expr9_0: u8 = 8i128 as u8;
                        let expr10_0 = constructor_lshl_imm(ctx, expr8_0, expr6_0, expr9_0)?;
                        let expr11_0 = constructor_add_reg(ctx, expr7_0, expr6_0, expr10_0)?;
                        let expr12_0: Type = I32;
                        let expr13_0: u8 = 24i128 as u8;
                        let expr14_0 = constructor_lshr_imm(ctx, expr12_0, expr11_0, expr13_0)?;
                        let expr15_0 = constructor_output_reg(ctx, expr14_0)?;
                        return Some(expr15_0);
                    }
                }
            }
            if pattern2_0 == I64 {
                let pattern5_0 = C::inst_data(ctx, pattern0_0);
                if let &InstructionData::Unary {
                    opcode: ref pattern6_0,
                    arg: pattern6_1,
                } = &pattern5_0
                {
                    if let &Opcode::Popcnt = pattern6_0 {
                        // Rule at src/isa/s390x/lower.isle line 1342.
                        let expr0_0 = C::put_in_reg(ctx, pattern6_1);
                        let expr1_0 = constructor_popcnt_byte(ctx, expr0_0)?;
                        let expr2_0: Type = I64;
                        let expr3_0: Type = I64;
                        let expr4_0: u8 = 32i128 as u8;
                        let expr5_0 = constructor_lshl_imm(ctx, expr3_0, expr1_0, expr4_0)?;
                        let expr6_0 = constructor_add_reg(ctx, expr2_0, expr1_0, expr5_0)?;
                        let expr7_0: Type = I64;
                        let expr8_0: Type = I64;
                        let expr9_0: u8 = 16i128 as u8;
                        let expr10_0 = constructor_lshl_imm(ctx, expr8_0, expr6_0, expr9_0)?;
                        let expr11_0 = constructor_add_reg(ctx, expr7_0, expr6_0, expr10_0)?;
                        let expr12_0: Type = I64;
                        let expr13_0: Type = I64;
                        let expr14_0: u8 = 8i128 as u8;
                        let expr15_0 = constructor_lshl_imm(ctx, expr13_0, expr11_0, expr14_0)?;
                        let expr16_0 = constructor_add_reg(ctx, expr12_0, expr11_0, expr15_0)?;
                        let expr17_0: Type = I64;
                        let expr18_0: u8 = 56i128 as u8;
                        let expr19_0 = constructor_lshr_imm(ctx, expr17_0, expr16_0, expr18_0)?;
                        let expr20_0 = constructor_output_reg(ctx, expr19_0)?;
                        return Some(expr20_0);
                    }
                }
            }
        }
        if let Some(()) = C::vxrs_ext2_disabled(ctx, pattern2_0) {
            if pattern2_0 == I32X4 {
                let pattern5_0 = C::inst_data(ctx, pattern0_0);
                if let &InstructionData::Unary {
                    opcode: ref pattern6_0,
                    arg: pattern6_1,
                } = &pattern5_0
                {
                    match pattern6_0 {
                        &Opcode::FcvtToUintSat => {
                            let pattern8_0 = C::value_type(ctx, pattern6_1);
                            if pattern8_0 == F32X4 {
                                // Rule at src/isa/s390x/lower.isle line 1676.
                                let expr0_0: Type = I64X2;
                                let expr1_0: Type = F64X2;
                                let expr2_0 = FpuRoundMode::ToZero;
                                let expr3_0: Type = F64X2;
                                let expr4_0: Type = F32X4;
                                let expr5_0: Type = I32X4;
                                let expr6_0 = C::put_in_reg(ctx, pattern6_1);
                                let expr7_0 = C::put_in_reg(ctx, pattern6_1);
                                let expr8_0 =
                                    constructor_vec_merge_high(ctx, expr5_0, expr6_0, expr7_0)?;
                                let expr9_0 =
                                    constructor_fpromote_reg(ctx, expr3_0, expr4_0, expr8_0)?;
                                let expr10_0 =
                                    constructor_fcvt_to_uint_reg(ctx, expr1_0, &expr2_0, expr9_0)?;
                                let expr11_0: Type = F64X2;
                                let expr12_0 = FpuRoundMode::ToZero;
                                let expr13_0: Type = F64X2;
                                let expr14_0: Type = F32X4;
                                let expr15_0: Type = I32X4;
                                let expr16_0 = C::put_in_reg(ctx, pattern6_1);
                                let expr17_0 = C::put_in_reg(ctx, pattern6_1);
                                let expr18_0 =
                                    constructor_vec_merge_low(ctx, expr15_0, expr16_0, expr17_0)?;
                                let expr19_0 =
                                    constructor_fpromote_reg(ctx, expr13_0, expr14_0, expr18_0)?;
                                let expr20_0 = constructor_fcvt_to_uint_reg(
                                    ctx, expr11_0, &expr12_0, expr19_0,
                                )?;
                                let expr21_0 =
                                    constructor_vec_pack_usat(ctx, expr0_0, expr10_0, expr20_0)?;
                                let expr22_0 = constructor_output_reg(ctx, expr21_0)?;
                                return Some(expr22_0);
                            }
                        }
                        &Opcode::FcvtToSintSat => {
                            let pattern8_0 = C::value_type(ctx, pattern6_1);
                            if pattern8_0 == F32X4 {
                                // Rule at src/isa/s390x/lower.isle line 1719.
                                let expr0_0: Type = I32X4;
                                let expr1_0: Type = I64X2;
                                let expr2_0: Type = F64X2;
                                let expr3_0 = FpuRoundMode::ToZero;
                                let expr4_0: Type = F64X2;
                                let expr5_0: Type = F32X4;
                                let expr6_0: Type = I32X4;
                                let expr7_0 = C::put_in_reg(ctx, pattern6_1);
                                let expr8_0 = C::put_in_reg(ctx, pattern6_1);
                                let expr9_0 =
                                    constructor_vec_merge_high(ctx, expr6_0, expr7_0, expr8_0)?;
                                let expr10_0 =
                                    constructor_fpromote_reg(ctx, expr4_0, expr5_0, expr9_0)?;
                                let expr11_0 =
                                    constructor_fcvt_to_sint_reg(ctx, expr2_0, &expr3_0, expr10_0)?;
                                let expr12_0: Type = F64X2;
                                let expr13_0 = FpuRoundMode::ToZero;
                                let expr14_0: Type = F64X2;
                                let expr15_0: Type = F32X4;
                                let expr16_0: Type = I32X4;
                                let expr17_0 = C::put_in_reg(ctx, pattern6_1);
                                let expr18_0 = C::put_in_reg(ctx, pattern6_1);
                                let expr19_0 =
                                    constructor_vec_merge_low(ctx, expr16_0, expr17_0, expr18_0)?;
                                let expr20_0 =
                                    constructor_fpromote_reg(ctx, expr14_0, expr15_0, expr19_0)?;
                                let expr21_0 = constructor_fcvt_to_sint_reg(
                                    ctx, expr12_0, &expr13_0, expr20_0,
                                )?;
                                let expr22_0 =
                                    constructor_vec_pack_ssat(ctx, expr1_0, expr11_0, expr21_0)?;
                                let expr23_0: Type = I32X4;
                                let expr24_0: u128 = 0i128 as u128;
                                let expr25_0 = constructor_vec_imm(ctx, expr23_0, expr24_0)?;
                                let expr26_0: Type = F32X4;
                                let expr27_0 = C::put_in_reg(ctx, pattern6_1);
                                let expr28_0 = C::put_in_reg(ctx, pattern6_1);
                                let expr29_0 =
                                    constructor_vec_fcmpeq(ctx, expr26_0, expr27_0, expr28_0)?;
                                let expr30_0 = constructor_vec_select(
                                    ctx, expr0_0, expr22_0, expr25_0, expr29_0,
                                )?;
                                let expr31_0 = constructor_output_reg(ctx, expr30_0)?;
                                return Some(expr31_0);
                            }
                        }
                        _ => {}
                    }
                }
            }
            if pattern2_0 == F32X4 {
                let pattern5_0 = C::inst_data(ctx, pattern0_0);
                if let &InstructionData::Unary {
                    opcode: ref pattern6_0,
                    arg: pattern6_1,
                } = &pattern5_0
                {
                    match pattern6_0 {
                        &Opcode::FcvtFromUint => {
                            let pattern8_0 = C::value_type(ctx, pattern6_1);
                            if pattern8_0 == I32X4 {
                                // Rule at src/isa/s390x/lower.isle line 1542.
                                let expr0_0: Type = F32X4;
                                let expr1_0: Type = F32X4;
                                let expr2_0: Type = F64X2;
                                let expr3_0 = FpuRoundMode::ToNearestTiesToEven;
                                let expr4_0: Type = F64X2;
                                let expr5_0 = FpuRoundMode::ShorterPrecision;
                                let expr6_0: Type = I32X4;
                                let expr7_0 = C::put_in_reg(ctx, pattern6_1);
                                let expr8_0 = constructor_vec_unpacku_high(ctx, expr6_0, expr7_0)?;
                                let expr9_0 = constructor_fcvt_from_uint_reg(
                                    ctx, expr4_0, &expr5_0, expr8_0,
                                )?;
                                let expr10_0 = constructor_fdemote_reg(
                                    ctx, expr1_0, expr2_0, &expr3_0, expr9_0,
                                )?;
                                let expr11_0: Type = F32X4;
                                let expr12_0: Type = F64X2;
                                let expr13_0 = FpuRoundMode::ToNearestTiesToEven;
                                let expr14_0: Type = F64X2;
                                let expr15_0 = FpuRoundMode::ShorterPrecision;
                                let expr16_0: Type = I32X4;
                                let expr17_0 = C::put_in_reg(ctx, pattern6_1);
                                let expr18_0 =
                                    constructor_vec_unpacku_low(ctx, expr16_0, expr17_0)?;
                                let expr19_0 = constructor_fcvt_from_uint_reg(
                                    ctx, expr14_0, &expr15_0, expr18_0,
                                )?;
                                let expr20_0 = constructor_fdemote_reg(
                                    ctx, expr11_0, expr12_0, &expr13_0, expr19_0,
                                )?;
                                let expr21_0: Type = I8X16;
                                let expr22_0: u8 = 0i128 as u8;
                                let expr23_0: u8 = 1i128 as u8;
                                let expr24_0: u8 = 2i128 as u8;
                                let expr25_0: u8 = 3i128 as u8;
                                let expr26_0: u8 = 8i128 as u8;
                                let expr27_0: u8 = 9i128 as u8;
                                let expr28_0: u8 = 10i128 as u8;
                                let expr29_0: u8 = 11i128 as u8;
                                let expr30_0: u8 = 16i128 as u8;
                                let expr31_0: u8 = 17i128 as u8;
                                let expr32_0: u8 = 18i128 as u8;
                                let expr33_0: u8 = 19i128 as u8;
                                let expr34_0: u8 = 24i128 as u8;
                                let expr35_0: u8 = 25i128 as u8;
                                let expr36_0: u8 = 26i128 as u8;
                                let expr37_0: u8 = 27i128 as u8;
                                let expr38_0 = constructor_imm8x16(
                                    ctx, expr22_0, expr23_0, expr24_0, expr25_0, expr26_0,
                                    expr27_0, expr28_0, expr29_0, expr30_0, expr31_0, expr32_0,
                                    expr33_0, expr34_0, expr35_0, expr36_0, expr37_0,
                                )?;
                                let expr39_0 = constructor_vec_imm(ctx, expr21_0, expr38_0)?;
                                let expr40_0 = constructor_vec_permute(
                                    ctx, expr0_0, expr10_0, expr20_0, expr39_0,
                                )?;
                                let expr41_0 = constructor_output_reg(ctx, expr40_0)?;
                                return Some(expr41_0);
                            }
                        }
                        &Opcode::FcvtFromSint => {
                            let pattern8_0 = C::value_type(ctx, pattern6_1);
                            if pattern8_0 == I32X4 {
                                // Rule at src/isa/s390x/lower.isle line 1583.
                                let expr0_0: Type = F32X4;
                                let expr1_0: Type = F32X4;
                                let expr2_0: Type = F64X2;
                                let expr3_0 = FpuRoundMode::ToNearestTiesToEven;
                                let expr4_0: Type = F64X2;
                                let expr5_0 = FpuRoundMode::ShorterPrecision;
                                let expr6_0: Type = I32X4;
                                let expr7_0 = C::put_in_reg(ctx, pattern6_1);
                                let expr8_0 = constructor_vec_unpacks_high(ctx, expr6_0, expr7_0)?;
                                let expr9_0 = constructor_fcvt_from_sint_reg(
                                    ctx, expr4_0, &expr5_0, expr8_0,
                                )?;
                                let expr10_0 = constructor_fdemote_reg(
                                    ctx, expr1_0, expr2_0, &expr3_0, expr9_0,
                                )?;
                                let expr11_0: Type = F32X4;
                                let expr12_0: Type = F64X2;
                                let expr13_0 = FpuRoundMode::ToNearestTiesToEven;
                                let expr14_0: Type = F64X2;
                                let expr15_0 = FpuRoundMode::ShorterPrecision;
                                let expr16_0: Type = I32X4;
                                let expr17_0 = C::put_in_reg(ctx, pattern6_1);
                                let expr18_0 =
                                    constructor_vec_unpacks_low(ctx, expr16_0, expr17_0)?;
                                let expr19_0 = constructor_fcvt_from_sint_reg(
                                    ctx, expr14_0, &expr15_0, expr18_0,
                                )?;
                                let expr20_0 = constructor_fdemote_reg(
                                    ctx, expr11_0, expr12_0, &expr13_0, expr19_0,
                                )?;
                                let expr21_0: Type = I8X16;
                                let expr22_0: u8 = 0i128 as u8;
                                let expr23_0: u8 = 1i128 as u8;
                                let expr24_0: u8 = 2i128 as u8;
                                let expr25_0: u8 = 3i128 as u8;
                                let expr26_0: u8 = 8i128 as u8;
                                let expr27_0: u8 = 9i128 as u8;
                                let expr28_0: u8 = 10i128 as u8;
                                let expr29_0: u8 = 11i128 as u8;
                                let expr30_0: u8 = 16i128 as u8;
                                let expr31_0: u8 = 17i128 as u8;
                                let expr32_0: u8 = 18i128 as u8;
                                let expr33_0: u8 = 19i128 as u8;
                                let expr34_0: u8 = 24i128 as u8;
                                let expr35_0: u8 = 25i128 as u8;
                                let expr36_0: u8 = 26i128 as u8;
                                let expr37_0: u8 = 27i128 as u8;
                                let expr38_0 = constructor_imm8x16(
                                    ctx, expr22_0, expr23_0, expr24_0, expr25_0, expr26_0,
                                    expr27_0, expr28_0, expr29_0, expr30_0, expr31_0, expr32_0,
                                    expr33_0, expr34_0, expr35_0, expr36_0, expr37_0,
                                )?;
                                let expr39_0 = constructor_vec_imm(ctx, expr21_0, expr38_0)?;
                                let expr40_0 = constructor_vec_permute(
                                    ctx, expr0_0, expr10_0, expr20_0, expr39_0,
                                )?;
                                let expr41_0 = constructor_output_reg(ctx, expr40_0)?;
                                return Some(expr41_0);
                            }
                        }
                        _ => {}
                    }
                }
            }
        }
        if let Some((pattern3_0, pattern3_1)) = C::multi_lane(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                if let &Opcode::IaddPairwise = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    // Rule at src/isa/s390x/lower.isle line 135.
                    let expr0_0: Type = I8X16;
                    let expr1_0 = C::u32_as_u64(ctx, pattern3_0)?;
                    let expr2_0 = constructor_vec_imm_splat(ctx, expr0_0, expr1_0)?;
                    let expr3_0 = constructor_vec_widen_type(ctx, pattern2_0)?;
                    let expr4_0 = C::put_in_reg(ctx, pattern7_0);
                    let expr5_0 = C::put_in_reg(ctx, pattern7_0);
                    let expr6_0 = constructor_vec_lshr_by_byte(ctx, expr5_0, expr2_0)?;
                    let expr7_0 = constructor_vec_add(ctx, pattern2_0, expr4_0, expr6_0)?;
                    let expr8_0 = C::put_in_reg(ctx, pattern7_1);
                    let expr9_0 = C::put_in_reg(ctx, pattern7_1);
                    let expr10_0 = constructor_vec_lshr_by_byte(ctx, expr9_0, expr2_0)?;
                    let expr11_0 = constructor_vec_add(ctx, pattern2_0, expr8_0, expr10_0)?;
                    let expr12_0 =
                        constructor_vec_pack_lane_order(ctx, expr3_0, expr7_0, expr11_0)?;
                    let expr13_0 = constructor_output_reg(ctx, expr12_0)?;
                    return Some(expr13_0);
                }
            }
        }
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::VanyTrue => {
                            // Rule at src/isa/s390x/lower.isle line 3583.
                            let expr0_0 = constructor_vany_true_val(ctx, pattern5_1)?;
                            let expr1_0 = constructor_lower_bool(ctx, pattern3_0, &expr0_0)?;
                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                            return Some(expr2_0);
                        }
                        &Opcode::VallTrue => {
                            // Rule at src/isa/s390x/lower.isle line 3505.
                            let expr0_0 = constructor_vall_true_val(ctx, pattern5_1)?;
                            let expr1_0 = constructor_lower_bool(ctx, pattern3_0, &expr0_0)?;
                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                            return Some(expr2_0);
                        }
                        &Opcode::Fpromote => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 1490.
                            let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr1_0 =
                                constructor_fpromote_reg(ctx, pattern3_0, pattern7_0, expr0_0)?;
                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                            return Some(expr2_0);
                        }
                        &Opcode::Fdemote => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 1504.
                            let expr0_0 = FpuRoundMode::Current;
                            let expr1_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr2_0 = constructor_fdemote_reg(
                                ctx, pattern3_0, pattern7_0, &expr0_0, expr1_0,
                            )?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::FcvtToUint => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 1611.
                            let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr1_0 = constructor_fcmp_reg(ctx, pattern7_0, expr0_0, expr0_0)?;
                            let expr2_0 = FloatCC::Unordered;
                            let expr3_0 = C::floatcc_as_cond(ctx, &expr2_0);
                            let expr4_0 = C::trap_code_bad_conversion_to_integer(ctx);
                            let expr5_0 = constructor_trap_if(ctx, &expr1_0, &expr3_0, &expr4_0)?;
                            let expr6_0 = constructor_fcvt_to_uint_ub(ctx, pattern7_0, pattern3_0)?;
                            let expr7_0 = constructor_fcmp_reg(ctx, pattern7_0, expr0_0, expr6_0)?;
                            let expr8_0 = FloatCC::GreaterThanOrEqual;
                            let expr9_0 = C::floatcc_as_cond(ctx, &expr8_0);
                            let expr10_0 = C::trap_code_integer_overflow(ctx);
                            let expr11_0 = constructor_trap_if(ctx, &expr7_0, &expr9_0, &expr10_0)?;
                            let expr12_0 = constructor_fcvt_to_uint_lb(ctx, pattern7_0)?;
                            let expr13_0 =
                                constructor_fcmp_reg(ctx, pattern7_0, expr0_0, expr12_0)?;
                            let expr14_0 = FloatCC::LessThanOrEqual;
                            let expr15_0 = C::floatcc_as_cond(ctx, &expr14_0);
                            let expr16_0 = C::trap_code_integer_overflow(ctx);
                            let expr17_0 =
                                constructor_trap_if(ctx, &expr13_0, &expr15_0, &expr16_0)?;
                            let expr18_0 = constructor_fcvt_flt_ty(ctx, pattern3_0, pattern7_0)?;
                            let expr19_0 =
                                constructor_fpromote_reg(ctx, expr18_0, pattern7_0, expr0_0)?;
                            let expr20_0 = FpuRoundMode::ToZero;
                            let expr21_0 =
                                constructor_fcvt_to_uint_reg(ctx, expr18_0, &expr20_0, expr19_0)?;
                            let expr22_0 = constructor_output_reg(ctx, expr21_0)?;
                            return Some(expr22_0);
                        }
                        &Opcode::FcvtToSint => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 1635.
                            let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr1_0 = constructor_fcmp_reg(ctx, pattern7_0, expr0_0, expr0_0)?;
                            let expr2_0 = FloatCC::Unordered;
                            let expr3_0 = C::floatcc_as_cond(ctx, &expr2_0);
                            let expr4_0 = C::trap_code_bad_conversion_to_integer(ctx);
                            let expr5_0 = constructor_trap_if(ctx, &expr1_0, &expr3_0, &expr4_0)?;
                            let expr6_0 = constructor_fcvt_to_sint_ub(ctx, pattern7_0, pattern3_0)?;
                            let expr7_0 = constructor_fcmp_reg(ctx, pattern7_0, expr0_0, expr6_0)?;
                            let expr8_0 = FloatCC::GreaterThanOrEqual;
                            let expr9_0 = C::floatcc_as_cond(ctx, &expr8_0);
                            let expr10_0 = C::trap_code_integer_overflow(ctx);
                            let expr11_0 = constructor_trap_if(ctx, &expr7_0, &expr9_0, &expr10_0)?;
                            let expr12_0 =
                                constructor_fcvt_to_sint_lb(ctx, pattern7_0, pattern3_0)?;
                            let expr13_0 =
                                constructor_fcmp_reg(ctx, pattern7_0, expr0_0, expr12_0)?;
                            let expr14_0 = FloatCC::LessThanOrEqual;
                            let expr15_0 = C::floatcc_as_cond(ctx, &expr14_0);
                            let expr16_0 = C::trap_code_integer_overflow(ctx);
                            let expr17_0 =
                                constructor_trap_if(ctx, &expr13_0, &expr15_0, &expr16_0)?;
                            let expr18_0 = constructor_fcvt_flt_ty(ctx, pattern3_0, pattern7_0)?;
                            let expr19_0 =
                                constructor_fpromote_reg(ctx, expr18_0, pattern7_0, expr0_0)?;
                            let expr20_0 = FpuRoundMode::ToZero;
                            let expr21_0 =
                                constructor_fcvt_to_sint_reg(ctx, expr18_0, &expr20_0, expr19_0)?;
                            let expr22_0 = constructor_output_reg(ctx, expr21_0)?;
                            return Some(expr22_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Iadd => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 67.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_add_reg(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Isub => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 145.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_sub_reg(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Imul => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 318.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_mul_reg(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Udiv => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 518.
                            let expr0_0 = constructor_zero_divisor_check_needed(ctx, pattern7_1)?;
                            let expr1_0 = constructor_ty_ext32(ctx, pattern3_0)?;
                            let expr2_0: u64 = 0i128 as u64;
                            let expr3_0 = constructor_imm(ctx, expr1_0, expr2_0)?;
                            let expr4_0 = constructor_put_in_reg_zext32(ctx, pattern7_0)?;
                            let expr5_0 = C::regpair(ctx, expr3_0, expr4_0);
                            let expr6_0 = constructor_put_in_reg_zext32(ctx, pattern7_1)?;
                            let expr7_0 = constructor_ty_ext32(ctx, pattern3_0)?;
                            let expr8_0 = constructor_maybe_trap_if_zero_divisor(
                                ctx, expr0_0, expr7_0, expr6_0,
                            )?;
                            let expr9_0 = constructor_udivmod(ctx, expr7_0, expr5_0, expr6_0)?;
                            let expr10_0 = C::regpair_lo(ctx, expr9_0);
                            let expr11_0 = constructor_copy_reg(ctx, pattern3_0, expr10_0)?;
                            let expr12_0 = constructor_output_reg(ctx, expr11_0)?;
                            return Some(expr12_0);
                        }
                        &Opcode::Sdiv => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 592.
                            let expr0_0 = constructor_zero_divisor_check_needed(ctx, pattern7_1)?;
                            let expr1_0 = constructor_div_overflow_check_needed(ctx, pattern7_1)?;
                            let expr2_0 = constructor_put_in_reg_sext64(ctx, pattern7_0)?;
                            let expr3_0 = constructor_put_in_reg_sext32(ctx, pattern7_1)?;
                            let expr4_0 = constructor_ty_ext32(ctx, pattern3_0)?;
                            let expr5_0 = constructor_maybe_trap_if_zero_divisor(
                                ctx, expr0_0, expr4_0, expr3_0,
                            )?;
                            let expr6_0 = constructor_maybe_trap_if_sdiv_overflow(
                                ctx, expr1_0, expr4_0, pattern3_0, expr2_0, expr3_0,
                            )?;
                            let expr7_0 = constructor_sdivmod(ctx, expr4_0, expr2_0, expr3_0)?;
                            let expr8_0 = C::regpair_lo(ctx, expr7_0);
                            let expr9_0 = constructor_copy_reg(ctx, pattern3_0, expr8_0)?;
                            let expr10_0 = constructor_output_reg(ctx, expr9_0)?;
                            return Some(expr10_0);
                        }
                        &Opcode::Urem => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 541.
                            let expr0_0 = constructor_zero_divisor_check_needed(ctx, pattern7_1)?;
                            let expr1_0 = constructor_ty_ext32(ctx, pattern3_0)?;
                            let expr2_0: u64 = 0i128 as u64;
                            let expr3_0 = constructor_imm(ctx, expr1_0, expr2_0)?;
                            let expr4_0 = constructor_put_in_reg_zext32(ctx, pattern7_0)?;
                            let expr5_0 = C::regpair(ctx, expr3_0, expr4_0);
                            let expr6_0 = constructor_put_in_reg_zext32(ctx, pattern7_1)?;
                            let expr7_0 = constructor_ty_ext32(ctx, pattern3_0)?;
                            let expr8_0 = constructor_maybe_trap_if_zero_divisor(
                                ctx, expr0_0, expr7_0, expr6_0,
                            )?;
                            let expr9_0 = constructor_udivmod(ctx, expr7_0, expr5_0, expr6_0)?;
                            let expr10_0 = C::regpair_hi(ctx, expr9_0);
                            let expr11_0 = constructor_copy_reg(ctx, pattern3_0, expr10_0)?;
                            let expr12_0 = constructor_output_reg(ctx, expr11_0)?;
                            return Some(expr12_0);
                        }
                        &Opcode::Srem => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 614.
                            let expr0_0 = constructor_zero_divisor_check_needed(ctx, pattern7_1)?;
                            let expr1_0 = constructor_div_overflow_check_needed(ctx, pattern7_1)?;
                            let expr2_0 = constructor_put_in_reg_sext64(ctx, pattern7_0)?;
                            let expr3_0 = constructor_put_in_reg_sext32(ctx, pattern7_1)?;
                            let expr4_0 = constructor_ty_ext32(ctx, pattern3_0)?;
                            let expr5_0 = constructor_maybe_trap_if_zero_divisor(
                                ctx, expr0_0, expr4_0, expr3_0,
                            )?;
                            let expr6_0 = constructor_maybe_avoid_srem_overflow(
                                ctx, expr1_0, expr4_0, expr2_0, expr3_0,
                            )?;
                            let expr7_0 = constructor_sdivmod(ctx, expr4_0, expr6_0, expr3_0)?;
                            let expr8_0 = C::regpair_hi(ctx, expr7_0);
                            let expr9_0 = constructor_copy_reg(ctx, pattern3_0, expr8_0)?;
                            let expr10_0 = constructor_output_reg(ctx, expr9_0)?;
                            return Some(expr10_0);
                        }
                        &Opcode::IaddIfcout => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 208.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 =
                                constructor_add_logical_reg(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_ifcout(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Ishl => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 694.
                            let expr0_0 = constructor_amt_reg(ctx, pattern7_1)?;
                            let expr1_0 = constructor_mask_amt_reg(ctx, pattern3_0, expr0_0)?;
                            let expr2_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr3_0 = constructor_lshl_reg(ctx, pattern3_0, expr2_0, expr1_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                        &Opcode::Ushr => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 722.
                            let expr0_0 = constructor_put_in_reg_zext32(ctx, pattern7_0)?;
                            let expr1_0 = constructor_amt_reg(ctx, pattern7_1)?;
                            let expr2_0 = constructor_mask_amt_reg(ctx, pattern3_0, expr1_0)?;
                            let expr3_0 = constructor_ty_ext32(ctx, pattern3_0)?;
                            let expr4_0 = constructor_lshr_reg(ctx, expr3_0, expr0_0, expr2_0)?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                        &Opcode::Sshr => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 753.
                            let expr0_0 = constructor_put_in_reg_sext32(ctx, pattern7_0)?;
                            let expr1_0 = constructor_amt_reg(ctx, pattern7_1)?;
                            let expr2_0 = constructor_mask_amt_reg(ctx, pattern3_0, expr1_0)?;
                            let expr3_0 = constructor_ty_ext32(ctx, pattern3_0)?;
                            let expr4_0 = constructor_ashr_reg(ctx, expr3_0, expr0_0, expr2_0)?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::IntAddTrap {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    code: ref pattern5_2,
                } => {
                    if let &Opcode::UaddOverflowTrap = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 3869.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr2_0 = constructor_add_logical_reg_with_flags_paired(
                            ctx, pattern3_0, expr0_0, expr1_0,
                        )?;
                        let expr3_0: u8 = 3i128 as u8;
                        let expr4_0 = C::mask_as_cond(ctx, expr3_0);
                        let expr5_0 = constructor_trap_if_impl(ctx, &expr4_0, pattern5_2)?;
                        let expr6_0 = constructor_with_flags(ctx, &expr2_0, &expr5_0)?;
                        let expr7_0 = C::output(ctx, expr6_0);
                        return Some(expr7_0);
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::ty_32_or_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Rotl => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 783.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = constructor_amt_reg(ctx, pattern7_1)?;
                            let expr2_0 = constructor_rot_reg(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Rotr => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 838.
                            let expr0_0: Type = I32;
                            let expr1_0 = constructor_amt_reg(ctx, pattern7_1)?;
                            let expr2_0 = constructor_neg_reg(ctx, expr0_0, expr1_0)?;
                            let expr3_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr4_0 = constructor_rot_reg(ctx, pattern3_0, expr3_0, expr2_0)?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::AtomicRmw {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    flags: pattern5_2,
                    op: ref pattern5_3,
                } => {
                    if let &Opcode::AtomicRmw = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        if let Some(()) = C::littleendian(ctx, pattern5_2) {
                            match pattern5_3 {
                                &AtomicRmwOp::And => {
                                    // Rule at src/isa/s390x/lower.isle line 2901.
                                    let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                    let expr1_0 = constructor_bswap_reg(ctx, pattern3_0, expr0_0)?;
                                    let expr2_0 = C::zero_offset(ctx);
                                    let expr3_0 = constructor_lower_address(
                                        ctx, pattern5_2, pattern7_0, expr2_0,
                                    )?;
                                    let expr4_0 = constructor_atomic_rmw_and(
                                        ctx, pattern3_0, expr1_0, &expr3_0,
                                    )?;
                                    let expr5_0 = constructor_bswap_reg(ctx, pattern3_0, expr4_0)?;
                                    let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                                    return Some(expr6_0);
                                }
                                &AtomicRmwOp::Or => {
                                    // Rule at src/isa/s390x/lower.isle line 2913.
                                    let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                    let expr1_0 = constructor_bswap_reg(ctx, pattern3_0, expr0_0)?;
                                    let expr2_0 = C::zero_offset(ctx);
                                    let expr3_0 = constructor_lower_address(
                                        ctx, pattern5_2, pattern7_0, expr2_0,
                                    )?;
                                    let expr4_0 = constructor_atomic_rmw_or(
                                        ctx, pattern3_0, expr1_0, &expr3_0,
                                    )?;
                                    let expr5_0 = constructor_bswap_reg(ctx, pattern3_0, expr4_0)?;
                                    let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                                    return Some(expr6_0);
                                }
                                &AtomicRmwOp::Xor => {
                                    // Rule at src/isa/s390x/lower.isle line 2925.
                                    let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                    let expr1_0 = constructor_bswap_reg(ctx, pattern3_0, expr0_0)?;
                                    let expr2_0 = C::zero_offset(ctx);
                                    let expr3_0 = constructor_lower_address(
                                        ctx, pattern5_2, pattern7_0, expr2_0,
                                    )?;
                                    let expr4_0 = constructor_atomic_rmw_xor(
                                        ctx, pattern3_0, expr1_0, &expr3_0,
                                    )?;
                                    let expr5_0 = constructor_bswap_reg(ctx, pattern3_0, expr4_0)?;
                                    let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                                    return Some(expr6_0);
                                }
                                _ => {}
                            }
                        }
                        if let Some(()) = C::bigendian(ctx, pattern5_2) {
                            match pattern5_3 {
                                &AtomicRmwOp::Add => {
                                    // Rule at src/isa/s390x/lower.isle line 2931.
                                    let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                    let expr1_0 = C::zero_offset(ctx);
                                    let expr2_0 = constructor_lower_address(
                                        ctx, pattern5_2, pattern7_0, expr1_0,
                                    )?;
                                    let expr3_0 = constructor_atomic_rmw_add(
                                        ctx, pattern3_0, expr0_0, &expr2_0,
                                    )?;
                                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                    return Some(expr4_0);
                                }
                                &AtomicRmwOp::Sub => {
                                    // Rule at src/isa/s390x/lower.isle line 2937.
                                    let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                    let expr1_0 = constructor_neg_reg(ctx, pattern3_0, expr0_0)?;
                                    let expr2_0 = C::zero_offset(ctx);
                                    let expr3_0 = constructor_lower_address(
                                        ctx, pattern5_2, pattern7_0, expr2_0,
                                    )?;
                                    let expr4_0 = constructor_atomic_rmw_add(
                                        ctx, pattern3_0, expr1_0, &expr3_0,
                                    )?;
                                    let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                                    return Some(expr5_0);
                                }
                                _ => {}
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::ty_8_or_16(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::AtomicCas {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
                flags: pattern5_2,
            } = &pattern4_0
            {
                if let &Opcode::AtomicCas = pattern5_0 {
                    let (pattern7_0, pattern7_1, pattern7_2) =
                        C::unpack_value_array_3(ctx, pattern5_1);
                    // Rule at src/isa/s390x/lower.isle line 3165.
                    let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                    let expr1_0 = C::put_in_reg(ctx, pattern7_2);
                    let expr2_0 = C::put_in_reg(ctx, pattern7_0);
                    let expr3_0 = constructor_casloop_bitshift(ctx, expr2_0)?;
                    let expr4_0 = constructor_casloop_aligned_addr(ctx, expr2_0)?;
                    let expr5_0 = C::inst_builder_new(ctx);
                    let expr6_0 = constructor_casloop_val_reg(ctx)?;
                    let expr7_0 = C::writable_reg_to_reg(ctx, expr6_0);
                    let expr8_0 = constructor_casloop_rotate_in(
                        ctx, &expr5_0, pattern3_0, pattern5_2, expr3_0, expr7_0,
                    )?;
                    let expr9_0 = constructor_casloop_tmp_reg(ctx)?;
                    let expr10_0 = constructor_atomic_cas_body(
                        ctx, &expr5_0, pattern3_0, pattern5_2, expr9_0, expr8_0, expr0_0, expr1_0,
                    )?;
                    let expr11_0 = constructor_casloop_rotate_out(
                        ctx, &expr5_0, pattern3_0, pattern5_2, expr3_0, expr10_0,
                    )?;
                    let expr12_0 = constructor_casloop_subword(
                        ctx, &expr5_0, pattern3_0, pattern5_2, expr4_0, expr3_0, expr11_0,
                    )?;
                    let expr13_0 = constructor_output_reg(ctx, expr12_0)?;
                    return Some(expr13_0);
                }
            }
        }
        if let Some(pattern3_0) = C::ty_scalar_float(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::BinaryImm8 {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                imm: pattern5_2,
            } = &pattern4_0
            {
                if let &Opcode::Extractlane = pattern5_0 {
                    let pattern7_0 = C::value_type(ctx, pattern5_1);
                    let pattern8_0 = C::u8_from_uimm8(ctx, pattern5_2);
                    // Rule at src/isa/s390x/lower.isle line 1909.
                    let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                    let expr1_0 = C::be_lane_idx(ctx, pattern7_0, pattern8_0);
                    let expr2_0 =
                        constructor_vec_replicate_lane(ctx, pattern7_0, expr0_0, expr1_0)?;
                    let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                    return Some(expr3_0);
                }
            }
        }
        if let Some(pattern3_0) = C::ty_vec128(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Swizzle => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            let mut closure8 = || {
                                let expr0_0 = C::lane_order(ctx)?;
                                return Some(expr0_0);
                            };
                            if let Some(pattern8_0) = closure8() {
                                if let &LaneOrder::LittleEndian = &pattern8_0 {
                                    // Rule at src/isa/s390x/lower.isle line 2248.
                                    let expr0_0: u128 = 0i128 as u128;
                                    let expr1_0 = constructor_vec_imm(ctx, pattern3_0, expr0_0)?;
                                    let expr2_0 = C::put_in_reg(ctx, pattern7_0);
                                    let expr3_0: Type = I8X16;
                                    let expr4_0: Type = I8X16;
                                    let expr5_0: u64 = 239i128 as u64;
                                    let expr6_0 = constructor_vec_imm_splat(ctx, expr4_0, expr5_0)?;
                                    let expr7_0: Type = I8X16;
                                    let expr8_0 = C::put_in_reg(ctx, pattern7_1);
                                    let expr9_0 = constructor_vec_not(ctx, expr7_0, expr8_0)?;
                                    let expr10_0 =
                                        constructor_vec_umax(ctx, expr3_0, expr6_0, expr9_0)?;
                                    let expr11_0 = constructor_vec_permute(
                                        ctx, pattern3_0, expr1_0, expr2_0, expr10_0,
                                    )?;
                                    let expr12_0 = constructor_output_reg(ctx, expr11_0)?;
                                    return Some(expr12_0);
                                }
                            }
                        }
                        &Opcode::Smin => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 304.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_vec_smin(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Umin => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 290.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_vec_umin(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Smax => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 297.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_vec_smax(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Umax => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 283.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_vec_umax(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::AvgRound => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 311.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_vec_uavg(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::UaddSat => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 116.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_vec_add(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr4_0 = constructor_vec_cmphl(ctx, pattern3_0, expr3_0, expr2_0)?;
                            let expr5_0 = constructor_vec_or(ctx, pattern3_0, expr2_0, expr4_0)?;
                            let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                            return Some(expr6_0);
                        }
                        &Opcode::SaddSat => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 124.
                            let expr0_0 = constructor_vec_widen_type(ctx, pattern3_0)?;
                            let expr1_0 = constructor_vec_widen_type(ctx, pattern3_0)?;
                            let expr2_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr3_0 = constructor_vec_unpacks_high(ctx, pattern3_0, expr2_0)?;
                            let expr4_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr5_0 = constructor_vec_unpacks_high(ctx, pattern3_0, expr4_0)?;
                            let expr6_0 = constructor_vec_add(ctx, expr1_0, expr3_0, expr5_0)?;
                            let expr7_0 = constructor_vec_widen_type(ctx, pattern3_0)?;
                            let expr8_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr9_0 = constructor_vec_unpacks_low(ctx, pattern3_0, expr8_0)?;
                            let expr10_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr11_0 = constructor_vec_unpacks_low(ctx, pattern3_0, expr10_0)?;
                            let expr12_0 = constructor_vec_add(ctx, expr7_0, expr9_0, expr11_0)?;
                            let expr13_0 =
                                constructor_vec_pack_ssat(ctx, expr0_0, expr6_0, expr12_0)?;
                            let expr14_0 = constructor_output_reg(ctx, expr13_0)?;
                            return Some(expr14_0);
                        }
                        &Opcode::UsubSat => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 180.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_vec_sub(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr4_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr5_0 = constructor_vec_cmphl(ctx, pattern3_0, expr3_0, expr4_0)?;
                            let expr6_0 = constructor_vec_and(ctx, pattern3_0, expr2_0, expr5_0)?;
                            let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                            return Some(expr7_0);
                        }
                        &Opcode::SsubSat => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 187.
                            let expr0_0 = constructor_vec_widen_type(ctx, pattern3_0)?;
                            let expr1_0 = constructor_vec_widen_type(ctx, pattern3_0)?;
                            let expr2_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr3_0 = constructor_vec_unpacks_high(ctx, pattern3_0, expr2_0)?;
                            let expr4_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr5_0 = constructor_vec_unpacks_high(ctx, pattern3_0, expr4_0)?;
                            let expr6_0 = constructor_vec_sub(ctx, expr1_0, expr3_0, expr5_0)?;
                            let expr7_0 = constructor_vec_widen_type(ctx, pattern3_0)?;
                            let expr8_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr9_0 = constructor_vec_unpacks_low(ctx, pattern3_0, expr8_0)?;
                            let expr10_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr11_0 = constructor_vec_unpacks_low(ctx, pattern3_0, expr10_0)?;
                            let expr12_0 = constructor_vec_sub(ctx, expr7_0, expr9_0, expr11_0)?;
                            let expr13_0 =
                                constructor_vec_pack_ssat(ctx, expr0_0, expr6_0, expr12_0)?;
                            let expr14_0 = constructor_output_reg(ctx, expr13_0)?;
                            return Some(expr14_0);
                        }
                        &Opcode::SqmulRoundSat => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 480.
                            let expr0_0 = constructor_vec_widen_type(ctx, pattern3_0)?;
                            let expr1_0 = constructor_vec_widen_type(ctx, pattern3_0)?;
                            let expr2_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr3_0 = constructor_vec_unpacks_high(ctx, pattern3_0, expr2_0)?;
                            let expr4_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr5_0 = constructor_vec_unpacks_high(ctx, pattern3_0, expr4_0)?;
                            let expr6_0 = constructor_sqmul_impl(ctx, expr1_0, expr3_0, expr5_0)?;
                            let expr7_0 = constructor_vec_widen_type(ctx, pattern3_0)?;
                            let expr8_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr9_0 = constructor_vec_unpacks_low(ctx, pattern3_0, expr8_0)?;
                            let expr10_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr11_0 = constructor_vec_unpacks_low(ctx, pattern3_0, expr10_0)?;
                            let expr12_0 = constructor_sqmul_impl(ctx, expr7_0, expr9_0, expr11_0)?;
                            let expr13_0 =
                                constructor_vec_pack_ssat(ctx, expr0_0, expr6_0, expr12_0)?;
                            let expr14_0 = constructor_output_reg(ctx, expr13_0)?;
                            return Some(expr14_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::FloatCompare {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    cond: ref pattern5_2,
                } => {
                    if let &Opcode::Fcmp = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        match pattern5_2 {
                            &FloatCC::Equal => {
                                // Rule at src/isa/s390x/lower.isle line 3471.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_fcmpeq(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                            &FloatCC::GreaterThan => {
                                // Rule at src/isa/s390x/lower.isle line 3475.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_fcmph(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                            &FloatCC::GreaterThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3479.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_fcmphe(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                            &FloatCC::LessThan => {
                                // Rule at src/isa/s390x/lower.isle line 3483.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_fcmph(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                            &FloatCC::LessThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3487.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_fcmphe(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                            &FloatCC::NotEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3473.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_fcmpeq(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_vec_not(ctx, pattern3_0, expr2_0)?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            &FloatCC::Ordered => {
                                // Rule at src/isa/s390x/lower.isle line 3491.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_fcmphe(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr4_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr5_0 =
                                    constructor_vec_fcmphe(ctx, pattern3_0, expr3_0, expr4_0)?;
                                let expr6_0 =
                                    constructor_vec_or(ctx, pattern3_0, expr2_0, expr5_0)?;
                                let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                                return Some(expr7_0);
                            }
                            &FloatCC::OrderedNotEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3495.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_fcmph(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr4_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr5_0 =
                                    constructor_vec_fcmph(ctx, pattern3_0, expr3_0, expr4_0)?;
                                let expr6_0 =
                                    constructor_vec_or(ctx, pattern3_0, expr2_0, expr5_0)?;
                                let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                                return Some(expr7_0);
                            }
                            &FloatCC::Unordered => {
                                // Rule at src/isa/s390x/lower.isle line 3493.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_fcmphe(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr4_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr5_0 =
                                    constructor_vec_fcmphe(ctx, pattern3_0, expr3_0, expr4_0)?;
                                let expr6_0 =
                                    constructor_vec_not_or(ctx, pattern3_0, expr2_0, expr5_0)?;
                                let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                                return Some(expr7_0);
                            }
                            &FloatCC::UnorderedOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3497.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_fcmph(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr4_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr5_0 =
                                    constructor_vec_fcmph(ctx, pattern3_0, expr3_0, expr4_0)?;
                                let expr6_0 =
                                    constructor_vec_not_or(ctx, pattern3_0, expr2_0, expr5_0)?;
                                let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                                return Some(expr7_0);
                            }
                            &FloatCC::UnorderedOrGreaterThan => {
                                // Rule at src/isa/s390x/lower.isle line 3489.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_fcmphe(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_vec_not(ctx, pattern3_0, expr2_0)?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            &FloatCC::UnorderedOrGreaterThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3485.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_fcmph(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_vec_not(ctx, pattern3_0, expr2_0)?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            &FloatCC::UnorderedOrLessThan => {
                                // Rule at src/isa/s390x/lower.isle line 3481.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_fcmphe(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_vec_not(ctx, pattern3_0, expr2_0)?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            &FloatCC::UnorderedOrLessThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3477.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_fcmph(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_vec_not(ctx, pattern3_0, expr2_0)?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            _ => {}
                        }
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    cond: ref pattern5_2,
                } => {
                    if let &Opcode::Icmp = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        match pattern5_2 {
                            &IntCC::Equal => {
                                // Rule at src/isa/s390x/lower.isle line 3433.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_cmpeq(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                            &IntCC::NotEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3435.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_cmpeq(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_vec_not(ctx, pattern3_0, expr2_0)?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            &IntCC::SignedGreaterThan => {
                                // Rule at src/isa/s390x/lower.isle line 3437.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_cmph(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                            &IntCC::SignedGreaterThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3443.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_cmph(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_vec_not(ctx, pattern3_0, expr2_0)?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            &IntCC::SignedLessThan => {
                                // Rule at src/isa/s390x/lower.isle line 3441.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_cmph(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                            &IntCC::SignedLessThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3439.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_cmph(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_vec_not(ctx, pattern3_0, expr2_0)?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            &IntCC::UnsignedGreaterThan => {
                                // Rule at src/isa/s390x/lower.isle line 3445.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_cmphl(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                            &IntCC::UnsignedGreaterThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3451.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_cmphl(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_vec_not(ctx, pattern3_0, expr2_0)?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            &IntCC::UnsignedLessThan => {
                                // Rule at src/isa/s390x/lower.isle line 3449.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_cmphl(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                                return Some(expr3_0);
                            }
                            &IntCC::UnsignedLessThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3447.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_cmphl(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = constructor_vec_not(ctx, pattern3_0, expr2_0)?;
                                let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                return Some(expr4_0);
                            }
                            _ => {}
                        }
                    }
                }
                &InstructionData::Ternary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    if let &Opcode::Vselect = pattern5_0 {
                        let (pattern7_0, pattern7_1, pattern7_2) =
                            C::unpack_value_array_3(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 1146.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr1_0 = C::put_in_reg(ctx, pattern7_2);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr3_0 =
                            constructor_vec_select(ctx, pattern3_0, expr0_0, expr1_0, expr2_0)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::gpr32_ty(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Uload8 => {
                        // Rule at src/isa/s390x/lower.isle line 2475.
                        let expr0_0: Type = I8;
                        let expr1_0 =
                            constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                        let expr2_0 = constructor_zext32_mem(ctx, expr0_0, &expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                    &Opcode::Sload8 => {
                        // Rule at src/isa/s390x/lower.isle line 2486.
                        let expr0_0: Type = I8;
                        let expr1_0 =
                            constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                        let expr2_0 = constructor_sext32_mem(ctx, expr0_0, &expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                    &Opcode::Sload16 => {
                        if let Some(()) = C::littleendian(ctx, pattern5_2) {
                            // Rule at src/isa/s390x/lower.isle line 2527.
                            let expr0_0 =
                                constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                            let expr1_0 = constructor_loadrev16(ctx, &expr0_0)?;
                            let expr2_0: Type = I16;
                            let expr3_0 = constructor_sext32_reg(ctx, expr2_0, expr1_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                    }
                    _ => {}
                }
            }
        }
        if let Some(pattern3_0) = C::gpr64_ty(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Uload32 => {
                        if let Some(()) = C::littleendian(ctx, pattern5_2) {
                            // Rule at src/isa/s390x/lower.isle line 2552.
                            let expr0_0 =
                                constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                            let expr1_0 = constructor_loadrev32(ctx, &expr0_0)?;
                            let expr2_0: Type = I32;
                            let expr3_0 = constructor_zext64_reg(ctx, expr2_0, expr1_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                    }
                    &Opcode::Sload32 => {
                        if let Some(()) = C::littleendian(ctx, pattern5_2) {
                            // Rule at src/isa/s390x/lower.isle line 2566.
                            let expr0_0 =
                                constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                            let expr1_0 = constructor_loadrev32(ctx, &expr0_0)?;
                            let expr2_0: Type = I32;
                            let expr3_0 = constructor_sext64_reg(ctx, expr2_0, expr1_0)?;
                            let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                            return Some(expr4_0);
                        }
                    }
                    _ => {}
                }
            }
        }
        if let Some(pattern3_0) = C::vr128_ty(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Bnot => {
                            // Rule at src/isa/s390x/lower.isle line 997.
                            let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr1_0 = constructor_vec_not(ctx, pattern3_0, expr0_0)?;
                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                            return Some(expr2_0);
                        }
                        &Opcode::Uextend => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            if pattern7_0 == I8 {
                                // Rule at src/isa/s390x/lower.isle line 916.
                                let expr0_0: Type = I8X16;
                                let expr1_0: u128 = 0i128 as u128;
                                let expr2_0 = constructor_vec_imm(ctx, pattern3_0, expr1_0)?;
                                let expr3_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr4_0: u8 = 15i128 as u8;
                                let expr5_0 = C::zero_reg(ctx);
                                let expr6_0 = constructor_vec_insert_lane(
                                    ctx, expr0_0, expr2_0, expr3_0, expr4_0, expr5_0,
                                )?;
                                let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                                return Some(expr7_0);
                            }
                            if pattern7_0 == I16 {
                                // Rule at src/isa/s390x/lower.isle line 918.
                                let expr0_0: Type = I16X8;
                                let expr1_0: u128 = 0i128 as u128;
                                let expr2_0 = constructor_vec_imm(ctx, pattern3_0, expr1_0)?;
                                let expr3_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr4_0: u8 = 7i128 as u8;
                                let expr5_0 = C::zero_reg(ctx);
                                let expr6_0 = constructor_vec_insert_lane(
                                    ctx, expr0_0, expr2_0, expr3_0, expr4_0, expr5_0,
                                )?;
                                let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                                return Some(expr7_0);
                            }
                            if pattern7_0 == I32 {
                                // Rule at src/isa/s390x/lower.isle line 920.
                                let expr0_0: Type = I32X4;
                                let expr1_0: u128 = 0i128 as u128;
                                let expr2_0 = constructor_vec_imm(ctx, pattern3_0, expr1_0)?;
                                let expr3_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr4_0: u8 = 3i128 as u8;
                                let expr5_0 = C::zero_reg(ctx);
                                let expr6_0 = constructor_vec_insert_lane(
                                    ctx, expr0_0, expr2_0, expr3_0, expr4_0, expr5_0,
                                )?;
                                let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                                return Some(expr7_0);
                            }
                            if pattern7_0 == I64 {
                                // Rule at src/isa/s390x/lower.isle line 922.
                                let expr0_0: Type = I64X2;
                                let expr1_0: u128 = 0i128 as u128;
                                let expr2_0 = constructor_vec_imm(ctx, pattern3_0, expr1_0)?;
                                let expr3_0 = C::put_in_reg(ctx, pattern5_1);
                                let expr4_0: u8 = 1i128 as u8;
                                let expr5_0 = C::zero_reg(ctx);
                                let expr6_0 = constructor_vec_insert_lane(
                                    ctx, expr0_0, expr2_0, expr3_0, expr4_0, expr5_0,
                                )?;
                                let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                                return Some(expr7_0);
                            }
                        }
                        &Opcode::Sextend => {
                            // Rule at src/isa/s390x/lower.isle line 937.
                            let expr0_0 = constructor_put_in_reg_sext64(ctx, pattern5_1)?;
                            let expr1_0: Type = I64;
                            let expr2_0: u8 = 63i128 as u8;
                            let expr3_0 = constructor_ashr_imm(ctx, expr1_0, expr0_0, expr2_0)?;
                            let expr4_0 =
                                constructor_mov_to_vec128(ctx, pattern3_0, expr3_0, expr0_0)?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Band => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 1024.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_vec_and(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Bor => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 1050.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_vec_or(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Bxor => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 1073.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_vec_xor(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::BandNot => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 1088.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 =
                                constructor_vec_and_not(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::BorNot => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 1103.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 =
                                constructor_vec_or_not(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::BxorNot => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 1118.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 =
                                constructor_vec_not_xor(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Iconcat => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 51.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr2_0 =
                                constructor_mov_to_vec128(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::Ternary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    if let &Opcode::Bitselect = pattern5_0 {
                        let (pattern7_0, pattern7_1, pattern7_2) =
                            C::unpack_value_array_3(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 1139.
                        let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr1_0 = C::put_in_reg(ctx, pattern7_2);
                        let expr2_0 = C::put_in_reg(ctx, pattern7_0);
                        let expr3_0 =
                            constructor_vec_select(ctx, pattern3_0, expr0_0, expr1_0, expr2_0)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                }
                _ => {}
            }
        }
        let pattern3_0 = C::inst_data(ctx, pattern0_0);
        match &pattern3_0 {
            &InstructionData::NullAry {
                opcode: ref pattern4_0,
            } => {
                if let &Opcode::Null = pattern4_0 {
                    // Rule at src/isa/s390x/lower.isle line 39.
                    let expr0_0: u64 = 0i128 as u64;
                    let expr1_0 = constructor_imm(ctx, pattern2_0, expr0_0)?;
                    let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                    return Some(expr2_0);
                }
            }
            &InstructionData::Unary {
                opcode: ref pattern4_0,
                arg: pattern4_1,
            } => {
                match pattern4_0 {
                    &Opcode::Splat => {
                        let pattern6_0 = C::value_type(ctx, pattern4_1);
                        if let Some(pattern7_0) = C::ty_scalar_float(ctx, pattern6_0) {
                            // Rule at src/isa/s390x/lower.isle line 1966.
                            let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                            let expr1_0: u8 = 0i128 as u8;
                            let expr2_0 =
                                constructor_vec_replicate_lane(ctx, pattern2_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                    }
                    &Opcode::Bitrev => {
                        // Rule at src/isa/s390x/lower.isle line 1158.
                        let expr0_0: u8 = 4i128 as u8;
                        let expr1_0: u64 = 17361641481138401520i128 as u64;
                        let expr2_0: u8 = 2i128 as u8;
                        let expr3_0: u64 = 14757395258967641292i128 as u64;
                        let expr4_0: u8 = 1i128 as u8;
                        let expr5_0: u64 = 12297829382473034410i128 as u64;
                        let expr6_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr7_0 =
                            constructor_bitrev_bits(ctx, expr4_0, expr5_0, pattern2_0, expr6_0)?;
                        let expr8_0 =
                            constructor_bitrev_bits(ctx, expr2_0, expr3_0, pattern2_0, expr7_0)?;
                        let expr9_0 =
                            constructor_bitrev_bits(ctx, expr0_0, expr1_0, pattern2_0, expr8_0)?;
                        let expr10_0 = constructor_bitrev_bytes(ctx, pattern2_0, expr9_0)?;
                        let expr11_0 = constructor_output_reg(ctx, expr10_0)?;
                        return Some(expr11_0);
                    }
                    &Opcode::Bswap => {
                        // Rule at src/isa/s390x/lower.isle line 1193.
                        let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr1_0 = constructor_bitrev_bytes(ctx, pattern2_0, expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                    &Opcode::Sqrt => {
                        // Rule at src/isa/s390x/lower.isle line 1441.
                        let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr1_0 = constructor_sqrt_reg(ctx, pattern2_0, expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                    &Opcode::Fneg => {
                        // Rule at src/isa/s390x/lower.isle line 1448.
                        let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr1_0 = constructor_fneg_reg(ctx, pattern2_0, expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                    &Opcode::Fabs => {
                        // Rule at src/isa/s390x/lower.isle line 1455.
                        let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr1_0 = constructor_fabs_reg(ctx, pattern2_0, expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                    &Opcode::Ceil => {
                        // Rule at src/isa/s390x/lower.isle line 1462.
                        let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr1_0 = constructor_ceil_reg(ctx, pattern2_0, expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                    &Opcode::Floor => {
                        // Rule at src/isa/s390x/lower.isle line 1469.
                        let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr1_0 = constructor_floor_reg(ctx, pattern2_0, expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                    &Opcode::Trunc => {
                        // Rule at src/isa/s390x/lower.isle line 1476.
                        let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr1_0 = constructor_trunc_reg(ctx, pattern2_0, expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                    &Opcode::Nearest => {
                        // Rule at src/isa/s390x/lower.isle line 1483.
                        let expr0_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr1_0 = constructor_nearest_reg(ctx, pattern2_0, expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                    &Opcode::ScalarToVector => {
                        let pattern6_0 = C::value_type(ctx, pattern4_1);
                        if let Some(pattern7_0) = C::ty_scalar_float(ctx, pattern6_0) {
                            // Rule at src/isa/s390x/lower.isle line 2026.
                            let expr0_0: u8 = 0i128 as u8;
                            let expr1_0 = C::be_lane_idx(ctx, pattern2_0, expr0_0);
                            let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                            let expr3_0: u8 = 0i128 as u8;
                            let expr4_0 = constructor_vec_move_lane_and_zero(
                                ctx, pattern2_0, expr1_0, expr2_0, expr3_0,
                            )?;
                            let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                            return Some(expr5_0);
                        }
                    }
                    &Opcode::Bmask => {
                        // Rule at src/isa/s390x/lower.isle line 1152.
                        let expr0_0 = constructor_value_nonzero(ctx, pattern4_1)?;
                        let expr1_0 = constructor_lower_bool_to_mask(ctx, pattern2_0, &expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                    _ => {}
                }
            }
            &InstructionData::UnaryConst {
                opcode: ref pattern4_0,
                constant_handle: pattern4_1,
            } => {
                if let &Opcode::Vconst = pattern4_0 {
                    if let Some(pattern6_0) = C::u128_from_constant(ctx, pattern4_1) {
                        // Rule at src/isa/s390x/lower.isle line 33.
                        let expr0_0 = C::be_vec_const(ctx, pattern2_0, pattern6_0);
                        let expr1_0 = constructor_vec_imm(ctx, pattern2_0, expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref pattern4_0,
                imm: pattern4_1,
            } => {
                if let &Opcode::Iconst = pattern4_0 {
                    let pattern6_0 = C::u64_from_imm64(ctx, pattern4_1);
                    // Rule at src/isa/s390x/lower.isle line 15.
                    let expr0_0 = constructor_imm(ctx, pattern2_0, pattern6_0)?;
                    let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
                    return Some(expr1_0);
                }
            }
            &InstructionData::StackLoad {
                opcode: ref pattern4_0,
                stack_slot: pattern4_1,
                offset: pattern4_2,
            } => {
                if let &Opcode::StackAddr = pattern4_0 {
                    // Rule at src/isa/s390x/lower.isle line 2258.
                    let expr0_0 =
                        constructor_stack_addr_impl(ctx, pattern2_0, pattern4_1, pattern4_2)?;
                    let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
                    return Some(expr1_0);
                }
            }
            &InstructionData::Binary {
                opcode: ref pattern4_0,
                args: ref pattern4_1,
            } => {
                match pattern4_0 {
                    &Opcode::Fadd => {
                        let (pattern6_0, pattern6_1) = C::unpack_value_array_2(ctx, pattern4_1);
                        // Rule at src/isa/s390x/lower.isle line 1365.
                        let expr0_0 = C::put_in_reg(ctx, pattern6_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                        let expr2_0 = constructor_fadd_reg(ctx, pattern2_0, expr0_0, expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                    &Opcode::Fsub => {
                        let (pattern6_0, pattern6_1) = C::unpack_value_array_2(ctx, pattern4_1);
                        // Rule at src/isa/s390x/lower.isle line 1372.
                        let expr0_0 = C::put_in_reg(ctx, pattern6_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                        let expr2_0 = constructor_fsub_reg(ctx, pattern2_0, expr0_0, expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                    &Opcode::Fmul => {
                        let (pattern6_0, pattern6_1) = C::unpack_value_array_2(ctx, pattern4_1);
                        // Rule at src/isa/s390x/lower.isle line 1379.
                        let expr0_0 = C::put_in_reg(ctx, pattern6_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                        let expr2_0 = constructor_fmul_reg(ctx, pattern2_0, expr0_0, expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                    &Opcode::Fdiv => {
                        let (pattern6_0, pattern6_1) = C::unpack_value_array_2(ctx, pattern4_1);
                        // Rule at src/isa/s390x/lower.isle line 1386.
                        let expr0_0 = C::put_in_reg(ctx, pattern6_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                        let expr2_0 = constructor_fdiv_reg(ctx, pattern2_0, expr0_0, expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                    &Opcode::Fmin => {
                        let (pattern6_0, pattern6_1) = C::unpack_value_array_2(ctx, pattern4_1);
                        // Rule at src/isa/s390x/lower.isle line 1393.
                        let expr0_0 = C::put_in_reg(ctx, pattern6_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                        let expr2_0 = constructor_fmin_reg(ctx, pattern2_0, expr0_0, expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                    &Opcode::FminPseudo => {
                        let (pattern6_0, pattern6_1) = C::unpack_value_array_2(ctx, pattern4_1);
                        // Rule at src/isa/s390x/lower.isle line 1407.
                        let expr0_0 = C::put_in_reg(ctx, pattern6_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                        let expr2_0 =
                            constructor_fmin_pseudo_reg(ctx, pattern2_0, expr0_0, expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                    &Opcode::Fmax => {
                        let (pattern6_0, pattern6_1) = C::unpack_value_array_2(ctx, pattern4_1);
                        // Rule at src/isa/s390x/lower.isle line 1400.
                        let expr0_0 = C::put_in_reg(ctx, pattern6_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                        let expr2_0 = constructor_fmax_reg(ctx, pattern2_0, expr0_0, expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                    &Opcode::FmaxPseudo => {
                        let (pattern6_0, pattern6_1) = C::unpack_value_array_2(ctx, pattern4_1);
                        // Rule at src/isa/s390x/lower.isle line 1414.
                        let expr0_0 = C::put_in_reg(ctx, pattern6_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                        let expr2_0 =
                            constructor_fmax_pseudo_reg(ctx, pattern2_0, expr0_0, expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                    &Opcode::WideningPairwiseDotProductS => {
                        let (pattern6_0, pattern6_1) = C::unpack_value_array_2(ctx, pattern4_1);
                        let pattern7_0 = C::value_type(ctx, pattern6_0);
                        // Rule at src/isa/s390x/lower.isle line 471.
                        let expr0_0 = C::put_in_reg(ctx, pattern6_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                        let expr2_0 = constructor_vec_smul_even(ctx, pattern7_0, expr0_0, expr1_0)?;
                        let expr3_0 = C::put_in_reg(ctx, pattern6_0);
                        let expr4_0 = C::put_in_reg(ctx, pattern6_1);
                        let expr5_0 = constructor_vec_smul_odd(ctx, pattern7_0, expr3_0, expr4_0)?;
                        let expr6_0 = constructor_vec_add(ctx, pattern2_0, expr2_0, expr5_0)?;
                        let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                        return Some(expr7_0);
                    }
                    _ => {}
                }
            }
            &InstructionData::Ternary {
                opcode: ref pattern4_0,
                args: ref pattern4_1,
            } => {
                match pattern4_0 {
                    &Opcode::Select => {
                        let (pattern6_0, pattern6_1, pattern6_2) =
                            C::unpack_value_array_3(ctx, pattern4_1);
                        // Rule at src/isa/s390x/lower.isle line 3738.
                        let expr0_0 = constructor_value_nonzero(ctx, pattern6_0)?;
                        let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                        let expr2_0 = C::put_in_reg(ctx, pattern6_2);
                        let expr3_0 = constructor_select_bool_reg(
                            ctx, pattern2_0, &expr0_0, expr1_0, expr2_0,
                        )?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                    &Opcode::SelectSpectreGuard => {
                        let (pattern6_0, pattern6_1, pattern6_2) =
                            C::unpack_value_array_3(ctx, pattern4_1);
                        if let Some(pattern7_0) = C::def_inst(ctx, pattern6_0) {
                            let pattern8_0 = C::inst_data(ctx, pattern7_0);
                            if let &InstructionData::IntCompare {
                                opcode: ref pattern9_0,
                                args: ref pattern9_1,
                                cond: ref pattern9_2,
                            } = &pattern8_0
                            {
                                if let &Opcode::Icmp = pattern9_0 {
                                    let (pattern11_0, pattern11_1) =
                                        C::unpack_value_array_2(ctx, pattern9_1);
                                    // Rule at src/isa/s390x/lower.isle line 3750.
                                    let expr0_0: bool = false;
                                    let expr1_0 = constructor_icmp_val(
                                        ctx,
                                        expr0_0,
                                        pattern9_2,
                                        pattern11_0,
                                        pattern11_1,
                                    )?;
                                    let expr2_0 = C::put_in_reg(ctx, pattern6_1);
                                    let expr3_0 = C::put_in_reg(ctx, pattern6_2);
                                    let expr4_0 = constructor_select_bool_reg(
                                        ctx, pattern2_0, &expr1_0, expr2_0, expr3_0,
                                    )?;
                                    let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                                    return Some(expr5_0);
                                }
                            }
                        }
                    }
                    &Opcode::Fma => {
                        let (pattern6_0, pattern6_1, pattern6_2) =
                            C::unpack_value_array_3(ctx, pattern4_1);
                        // Rule at src/isa/s390x/lower.isle line 1434.
                        let expr0_0 = C::put_in_reg(ctx, pattern6_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern6_1);
                        let expr2_0 = C::put_in_reg(ctx, pattern6_2);
                        let expr3_0 =
                            constructor_fma_reg(ctx, pattern2_0, expr0_0, expr1_0, expr2_0)?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                    _ => {}
                }
            }
            _ => {}
        }
    }
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    match &pattern1_0 {
        &InstructionData::NullAry {
            opcode: ref pattern2_0,
        } => {
            match pattern2_0 {
                &Opcode::Debugtrap => {
                    // Rule at src/isa/s390x/lower.isle line 3850.
                    let expr0_0 = constructor_debugtrap_impl(ctx)?;
                    let expr1_0 = constructor_side_effect(ctx, &expr0_0)?;
                    return Some(expr1_0);
                }
                &Opcode::GetFramePointer => {
                    // Rule at src/isa/s390x/lower.isle line 4010.
                    let expr0_0: i64 = 0i128 as i64;
                    let expr1_0: i64 = 0i128 as i64;
                    let expr2_0 = C::memarg_stack_off(ctx, expr0_0, expr1_0);
                    let expr3_0 = constructor_load64(ctx, &expr2_0)?;
                    let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                    return Some(expr4_0);
                }
                &Opcode::GetStackPointer => {
                    // Rule at src/isa/s390x/lower.isle line 4007.
                    let expr0_0 = constructor_sp(ctx)?;
                    let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
                    return Some(expr1_0);
                }
                &Opcode::GetReturnAddress => {
                    // Rule at src/isa/s390x/lower.isle line 4013.
                    let expr0_0: i64 = 112i128 as i64;
                    let expr1_0 = C::memarg_initial_sp_offset(ctx, expr0_0);
                    let expr2_0 = constructor_load64(ctx, &expr1_0)?;
                    let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                    return Some(expr3_0);
                }
                &Opcode::Nop => {
                    // Rule at src/isa/s390x/lower.isle line 45.
                    let expr0_0 = C::invalid_reg(ctx);
                    let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
                    return Some(expr1_0);
                }
                &Opcode::Fence => {
                    // Rule at src/isa/s390x/lower.isle line 3278.
                    let expr0_0 = constructor_fence_impl(ctx)?;
                    let expr1_0 = constructor_side_effect(ctx, &expr0_0)?;
                    return Some(expr1_0);
                }
                _ => {}
            }
        }
        &InstructionData::Unary {
            opcode: ref pattern2_0,
            arg: pattern2_1,
        } => {
            match pattern2_0 {
                &Opcode::VhighBits => {
                    let pattern4_0 = C::value_type(ctx, pattern2_1);
                    if let Some((pattern5_0, pattern5_1)) = C::multi_lane(ctx, pattern4_0) {
                        if pattern5_0 == 8i128 as u32 {
                            if pattern5_1 == 16i128 as u32 {
                                let mut closure8 = || {
                                    let expr0_0 = C::lane_order(ctx)?;
                                    return Some(expr0_0);
                                };
                                if let Some(pattern8_0) = closure8() {
                                    if let &LaneOrder::LittleEndian = &pattern8_0 {
                                        // Rule at src/isa/s390x/lower.isle line 3659.
                                        let expr0_0: Type = I8X16;
                                        let expr1_0: u8 = 0i128 as u8;
                                        let expr2_0: u8 = 8i128 as u8;
                                        let expr3_0: u8 = 16i128 as u8;
                                        let expr4_0: u8 = 24i128 as u8;
                                        let expr5_0: u8 = 32i128 as u8;
                                        let expr6_0: u8 = 40i128 as u8;
                                        let expr7_0: u8 = 48i128 as u8;
                                        let expr8_0: u8 = 56i128 as u8;
                                        let expr9_0: u8 = 64i128 as u8;
                                        let expr10_0: u8 = 72i128 as u8;
                                        let expr11_0: u8 = 80i128 as u8;
                                        let expr12_0: u8 = 88i128 as u8;
                                        let expr13_0: u8 = 96i128 as u8;
                                        let expr14_0: u8 = 104i128 as u8;
                                        let expr15_0: u8 = 112i128 as u8;
                                        let expr16_0: u8 = 120i128 as u8;
                                        let expr17_0 = constructor_imm8x16(
                                            ctx, expr1_0, expr2_0, expr3_0, expr4_0, expr5_0,
                                            expr6_0, expr7_0, expr8_0, expr9_0, expr10_0, expr11_0,
                                            expr12_0, expr13_0, expr14_0, expr15_0, expr16_0,
                                        )?;
                                        let expr18_0 = constructor_vec_imm(ctx, expr0_0, expr17_0)?;
                                        let expr19_0: Type = I64X2;
                                        let expr20_0 = C::put_in_reg(ctx, pattern2_1);
                                        let expr21_0 =
                                            constructor_vec_bitpermute(ctx, expr20_0, expr18_0)?;
                                        let expr22_0: u8 = 0i128 as u8;
                                        let expr23_0 = C::zero_reg(ctx);
                                        let expr24_0 = constructor_vec_extract_lane(
                                            ctx, expr19_0, expr21_0, expr22_0, expr23_0,
                                        )?;
                                        let expr25_0 = constructor_output_reg(ctx, expr24_0)?;
                                        return Some(expr25_0);
                                    }
                                }
                            }
                        }
                        if pattern5_0 == 16i128 as u32 {
                            if pattern5_1 == 8i128 as u32 {
                                let mut closure8 = || {
                                    let expr0_0 = C::lane_order(ctx)?;
                                    return Some(expr0_0);
                                };
                                if let Some(pattern8_0) = closure8() {
                                    if let &LaneOrder::LittleEndian = &pattern8_0 {
                                        // Rule at src/isa/s390x/lower.isle line 3670.
                                        let expr0_0: Type = I8X16;
                                        let expr1_0: u8 = 128i128 as u8;
                                        let expr2_0: u8 = 128i128 as u8;
                                        let expr3_0: u8 = 128i128 as u8;
                                        let expr4_0: u8 = 128i128 as u8;
                                        let expr5_0: u8 = 128i128 as u8;
                                        let expr6_0: u8 = 128i128 as u8;
                                        let expr7_0: u8 = 128i128 as u8;
                                        let expr8_0: u8 = 128i128 as u8;
                                        let expr9_0: u8 = 0i128 as u8;
                                        let expr10_0: u8 = 16i128 as u8;
                                        let expr11_0: u8 = 32i128 as u8;
                                        let expr12_0: u8 = 48i128 as u8;
                                        let expr13_0: u8 = 64i128 as u8;
                                        let expr14_0: u8 = 80i128 as u8;
                                        let expr15_0: u8 = 96i128 as u8;
                                        let expr16_0: u8 = 112i128 as u8;
                                        let expr17_0 = constructor_imm8x16(
                                            ctx, expr1_0, expr2_0, expr3_0, expr4_0, expr5_0,
                                            expr6_0, expr7_0, expr8_0, expr9_0, expr10_0, expr11_0,
                                            expr12_0, expr13_0, expr14_0, expr15_0, expr16_0,
                                        )?;
                                        let expr18_0 = constructor_vec_imm(ctx, expr0_0, expr17_0)?;
                                        let expr19_0: Type = I64X2;
                                        let expr20_0 = C::put_in_reg(ctx, pattern2_1);
                                        let expr21_0 =
                                            constructor_vec_bitpermute(ctx, expr20_0, expr18_0)?;
                                        let expr22_0: u8 = 0i128 as u8;
                                        let expr23_0 = C::zero_reg(ctx);
                                        let expr24_0 = constructor_vec_extract_lane(
                                            ctx, expr19_0, expr21_0, expr22_0, expr23_0,
                                        )?;
                                        let expr25_0 = constructor_output_reg(ctx, expr24_0)?;
                                        return Some(expr25_0);
                                    }
                                }
                            }
                        }
                        if pattern5_0 == 32i128 as u32 {
                            if pattern5_1 == 4i128 as u32 {
                                let mut closure8 = || {
                                    let expr0_0 = C::lane_order(ctx)?;
                                    return Some(expr0_0);
                                };
                                if let Some(pattern8_0) = closure8() {
                                    if let &LaneOrder::LittleEndian = &pattern8_0 {
                                        // Rule at src/isa/s390x/lower.isle line 3681.
                                        let expr0_0: Type = I8X16;
                                        let expr1_0: u8 = 128i128 as u8;
                                        let expr2_0: u8 = 128i128 as u8;
                                        let expr3_0: u8 = 128i128 as u8;
                                        let expr4_0: u8 = 128i128 as u8;
                                        let expr5_0: u8 = 128i128 as u8;
                                        let expr6_0: u8 = 128i128 as u8;
                                        let expr7_0: u8 = 128i128 as u8;
                                        let expr8_0: u8 = 128i128 as u8;
                                        let expr9_0: u8 = 128i128 as u8;
                                        let expr10_0: u8 = 128i128 as u8;
                                        let expr11_0: u8 = 128i128 as u8;
                                        let expr12_0: u8 = 128i128 as u8;
                                        let expr13_0: u8 = 0i128 as u8;
                                        let expr14_0: u8 = 32i128 as u8;
                                        let expr15_0: u8 = 64i128 as u8;
                                        let expr16_0: u8 = 96i128 as u8;
                                        let expr17_0 = constructor_imm8x16(
                                            ctx, expr1_0, expr2_0, expr3_0, expr4_0, expr5_0,
                                            expr6_0, expr7_0, expr8_0, expr9_0, expr10_0, expr11_0,
                                            expr12_0, expr13_0, expr14_0, expr15_0, expr16_0,
                                        )?;
                                        let expr18_0 = constructor_vec_imm(ctx, expr0_0, expr17_0)?;
                                        let expr19_0: Type = I64X2;
                                        let expr20_0 = C::put_in_reg(ctx, pattern2_1);
                                        let expr21_0 =
                                            constructor_vec_bitpermute(ctx, expr20_0, expr18_0)?;
                                        let expr22_0: u8 = 0i128 as u8;
                                        let expr23_0 = C::zero_reg(ctx);
                                        let expr24_0 = constructor_vec_extract_lane(
                                            ctx, expr19_0, expr21_0, expr22_0, expr23_0,
                                        )?;
                                        let expr25_0 = constructor_output_reg(ctx, expr24_0)?;
                                        return Some(expr25_0);
                                    }
                                }
                            }
                        }
                        if pattern5_0 == 64i128 as u32 {
                            if pattern5_1 == 2i128 as u32 {
                                let mut closure8 = || {
                                    let expr0_0 = C::lane_order(ctx)?;
                                    return Some(expr0_0);
                                };
                                if let Some(pattern8_0) = closure8() {
                                    if let &LaneOrder::LittleEndian = &pattern8_0 {
                                        // Rule at src/isa/s390x/lower.isle line 3692.
                                        let expr0_0: Type = I8X16;
                                        let expr1_0: u8 = 128i128 as u8;
                                        let expr2_0: u8 = 128i128 as u8;
                                        let expr3_0: u8 = 128i128 as u8;
                                        let expr4_0: u8 = 128i128 as u8;
                                        let expr5_0: u8 = 128i128 as u8;
                                        let expr6_0: u8 = 128i128 as u8;
                                        let expr7_0: u8 = 128i128 as u8;
                                        let expr8_0: u8 = 128i128 as u8;
                                        let expr9_0: u8 = 128i128 as u8;
                                        let expr10_0: u8 = 128i128 as u8;
                                        let expr11_0: u8 = 128i128 as u8;
                                        let expr12_0: u8 = 128i128 as u8;
                                        let expr13_0: u8 = 128i128 as u8;
                                        let expr14_0: u8 = 128i128 as u8;
                                        let expr15_0: u8 = 0i128 as u8;
                                        let expr16_0: u8 = 64i128 as u8;
                                        let expr17_0 = constructor_imm8x16(
                                            ctx, expr1_0, expr2_0, expr3_0, expr4_0, expr5_0,
                                            expr6_0, expr7_0, expr8_0, expr9_0, expr10_0, expr11_0,
                                            expr12_0, expr13_0, expr14_0, expr15_0, expr16_0,
                                        )?;
                                        let expr18_0 = constructor_vec_imm(ctx, expr0_0, expr17_0)?;
                                        let expr19_0: Type = I64X2;
                                        let expr20_0 = C::put_in_reg(ctx, pattern2_1);
                                        let expr21_0 =
                                            constructor_vec_bitpermute(ctx, expr20_0, expr18_0)?;
                                        let expr22_0: u8 = 0i128 as u8;
                                        let expr23_0 = C::zero_reg(ctx);
                                        let expr24_0 = constructor_vec_extract_lane(
                                            ctx, expr19_0, expr21_0, expr22_0, expr23_0,
                                        )?;
                                        let expr25_0 = constructor_output_reg(ctx, expr24_0)?;
                                        return Some(expr25_0);
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::Ireduce => {
                    let pattern4_0 = C::value_type(ctx, pattern2_1);
                    if let Some(pattern5_0) = C::vr128_ty(ctx, pattern4_0) {
                        // Rule at src/isa/s390x/lower.isle line 901.
                        let expr0_0: Type = I64X2;
                        let expr1_0 = C::put_in_reg(ctx, pattern2_1);
                        let expr2_0: u8 = 1i128 as u8;
                        let expr3_0 = C::zero_reg(ctx);
                        let expr4_0 =
                            constructor_vec_extract_lane(ctx, expr0_0, expr1_0, expr2_0, expr3_0)?;
                        let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                        return Some(expr5_0);
                    }
                }
                &Opcode::SwidenLow => {
                    let pattern4_0 = C::value_type(ctx, pattern2_1);
                    if let Some(pattern5_0) = C::ty_vec128(ctx, pattern4_0) {
                        // Rule at src/isa/s390x/lower.isle line 963.
                        let expr0_0 = C::put_in_reg(ctx, pattern2_1);
                        let expr1_0 =
                            constructor_vec_unpacks_low_lane_order(ctx, pattern5_0, expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                }
                &Opcode::SwidenHigh => {
                    let pattern4_0 = C::value_type(ctx, pattern2_1);
                    if let Some(pattern5_0) = C::ty_vec128(ctx, pattern4_0) {
                        // Rule at src/isa/s390x/lower.isle line 969.
                        let expr0_0 = C::put_in_reg(ctx, pattern2_1);
                        let expr1_0 =
                            constructor_vec_unpacks_high_lane_order(ctx, pattern5_0, expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                }
                &Opcode::UwidenLow => {
                    let pattern4_0 = C::value_type(ctx, pattern2_1);
                    if let Some(pattern5_0) = C::ty_vec128(ctx, pattern4_0) {
                        // Rule at src/isa/s390x/lower.isle line 975.
                        let expr0_0 = C::put_in_reg(ctx, pattern2_1);
                        let expr1_0 =
                            constructor_vec_unpacku_low_lane_order(ctx, pattern5_0, expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                }
                &Opcode::UwidenHigh => {
                    let pattern4_0 = C::value_type(ctx, pattern2_1);
                    if let Some(pattern5_0) = C::ty_vec128(ctx, pattern4_0) {
                        // Rule at src/isa/s390x/lower.isle line 981.
                        let expr0_0 = C::put_in_reg(ctx, pattern2_1);
                        let expr1_0 =
                            constructor_vec_unpacku_high_lane_order(ctx, pattern5_0, expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                }
                &Opcode::Isplit => {
                    let pattern4_0 = C::value_type(ctx, pattern2_1);
                    if pattern4_0 == I128 {
                        // Rule at src/isa/s390x/lower.isle line 57.
                        let expr0_0 = C::put_in_reg(ctx, pattern2_1);
                        let expr1_0: Type = I64X2;
                        let expr2_0: u8 = 0i128 as u8;
                        let expr3_0 = C::zero_reg(ctx);
                        let expr4_0 =
                            constructor_vec_extract_lane(ctx, expr1_0, expr0_0, expr2_0, expr3_0)?;
                        let expr5_0: Type = I64X2;
                        let expr6_0: u8 = 1i128 as u8;
                        let expr7_0 = C::zero_reg(ctx);
                        let expr8_0 =
                            constructor_vec_extract_lane(ctx, expr5_0, expr0_0, expr6_0, expr7_0)?;
                        let expr9_0 = C::value_reg(ctx, expr8_0);
                        let expr10_0 = C::value_reg(ctx, expr4_0);
                        let expr11_0 = C::output_pair(ctx, expr9_0, expr10_0);
                        return Some(expr11_0);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::CondTrap {
            opcode: ref pattern2_0,
            arg: pattern2_1,
            code: ref pattern2_2,
        } => {
            match pattern2_0 {
                &Opcode::Trapz => {
                    // Rule at src/isa/s390x/lower.isle line 3832.
                    let expr0_0 = constructor_value_nonzero(ctx, pattern2_1)?;
                    let expr1_0 = constructor_invert_bool(ctx, &expr0_0)?;
                    let expr2_0 = constructor_trap_if_bool(ctx, &expr1_0, pattern2_2)?;
                    let expr3_0 = constructor_side_effect(ctx, &expr2_0)?;
                    return Some(expr3_0);
                }
                &Opcode::Trapnz => {
                    // Rule at src/isa/s390x/lower.isle line 3838.
                    let expr0_0 = constructor_value_nonzero(ctx, pattern2_1)?;
                    let expr1_0 = constructor_trap_if_bool(ctx, &expr0_0, pattern2_2)?;
                    let expr2_0 = constructor_side_effect(ctx, &expr1_0)?;
                    return Some(expr2_0);
                }
                &Opcode::ResumableTrapnz => {
                    // Rule at src/isa/s390x/lower.isle line 3844.
                    let expr0_0 = constructor_value_nonzero(ctx, pattern2_1)?;
                    let expr1_0 = constructor_trap_if_bool(ctx, &expr0_0, pattern2_2)?;
                    let expr2_0 = constructor_side_effect(ctx, &expr1_0)?;
                    return Some(expr2_0);
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref pattern2_0,
            args: pattern2_1,
        } => {
            if let &Opcode::Return = pattern2_0 {
                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
                // Rule at src/isa/s390x/lower.isle line 3924.
                let expr0_0: usize = 0i128 as usize;
                let expr1_0 = C::value_slice_len(ctx, pattern4_0);
                let expr2_0 = C::range(ctx, expr0_0, expr1_0);
                let expr3_0 = constructor_lower_return(ctx, expr2_0, pattern4_0)?;
                return Some(expr3_0);
            }
        }
        &InstructionData::Call {
            opcode: ref pattern2_0,
            args: pattern2_1,
            func_ref: pattern2_2,
        } => {
            if let &Opcode::Call = pattern2_0 {
                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
                let (pattern5_0, pattern5_1, pattern5_2) = C::func_ref_data(ctx, pattern2_2);
                // Rule at src/isa/s390x/lower.isle line 3941.
                let expr0_0 = C::abi_sig(ctx, pattern5_0);
                let expr1_0 = C::abi_accumulate_outgoing_args_size(ctx, &expr0_0);
                let expr2_0: usize = 0i128 as usize;
                let expr3_0 = C::abi_num_args(ctx, &expr0_0);
                let expr4_0 = C::range(ctx, expr2_0, expr3_0);
                let expr5_0 = constructor_lower_call_args(ctx, &expr0_0, expr4_0, pattern4_0)?;
                let expr6_0 = C::defs_init(ctx, &expr0_0);
                let expr7_0: i64 = 0i128 as i64;
                let expr8_0 = SymbolReloc::Absolute {
                    name: pattern5_1,
                    offset: expr7_0,
                };
                let expr9_0 = constructor_load_symbol_reloc(ctx, &expr8_0)?;
                let expr10_0 = Opcode::Call;
                let expr11_0 = constructor_abi_call_ind(
                    ctx, &expr0_0, expr9_0, &expr5_0, &expr6_0, &expr10_0,
                )?;
                let expr12_0 = constructor_side_effect(ctx, &expr11_0)?;
                let expr13_0 = C::abi_first_ret(ctx, pattern5_0, &expr0_0);
                let expr14_0 = C::abi_num_rets(ctx, &expr0_0);
                let expr15_0 = C::range(ctx, expr13_0, expr14_0);
                let expr16_0 = C::output_builder_new(ctx);
                let expr17_0 =
                    constructor_lower_call_rets(ctx, &expr0_0, &expr6_0, expr15_0, &expr16_0)?;
                return Some(expr17_0);
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref pattern2_0,
            args: pattern2_1,
            sig_ref: pattern2_2,
        } => {
            if let &Opcode::CallIndirect = pattern2_0 {
                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
                if let Some((pattern5_0, pattern5_1)) = C::value_slice_unwrap(ctx, pattern4_0) {
                    // Rule at src/isa/s390x/lower.isle line 3952.
                    let expr0_0 = C::abi_sig(ctx, pattern2_2);
                    let expr1_0 = C::put_in_reg(ctx, pattern5_0);
                    let expr2_0 = C::abi_accumulate_outgoing_args_size(ctx, &expr0_0);
                    let expr3_0: usize = 0i128 as usize;
                    let expr4_0 = C::abi_num_args(ctx, &expr0_0);
                    let expr5_0 = C::range(ctx, expr3_0, expr4_0);
                    let expr6_0 = constructor_lower_call_args(ctx, &expr0_0, expr5_0, pattern5_1)?;
                    let expr7_0 = C::defs_init(ctx, &expr0_0);
                    let expr8_0 = Opcode::CallIndirect;
                    let expr9_0 = constructor_abi_call_ind(
                        ctx, &expr0_0, expr1_0, &expr6_0, &expr7_0, &expr8_0,
                    )?;
                    let expr10_0 = constructor_side_effect(ctx, &expr9_0)?;
                    let expr11_0 = C::abi_first_ret(ctx, pattern2_2, &expr0_0);
                    let expr12_0 = C::abi_num_rets(ctx, &expr0_0);
                    let expr13_0 = C::range(ctx, expr11_0, expr12_0);
                    let expr14_0 = C::output_builder_new(ctx);
                    let expr15_0 =
                        constructor_lower_call_rets(ctx, &expr0_0, &expr7_0, expr13_0, &expr14_0)?;
                    return Some(expr15_0);
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref pattern2_0,
            func_ref: pattern2_1,
        } => {
            if let &Opcode::FuncAddr = pattern2_0 {
                let (pattern4_0, pattern4_1, pattern4_2) = C::func_ref_data(ctx, pattern2_1);
                // Rule at src/isa/s390x/lower.isle line 2269.
                let expr0_0: i64 = 0i128 as i64;
                let expr1_0 = SymbolReloc::Absolute {
                    name: pattern4_1,
                    offset: expr0_0,
                };
                let expr2_0 = constructor_load_symbol_reloc(ctx, &expr1_0)?;
                let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                return Some(expr3_0);
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref pattern2_0,
            global_value: pattern2_1,
        } => {
            match pattern2_0 {
                &Opcode::SymbolValue => {
                    if let Some((pattern4_0, pattern4_1, pattern4_2)) =
                        C::symbol_value_data(ctx, pattern2_1)
                    {
                        // Rule at src/isa/s390x/lower.isle line 2282.
                        let expr0_0 = SymbolReloc::Absolute {
                            name: pattern4_0,
                            offset: pattern4_2,
                        };
                        let expr1_0 = constructor_load_symbol_reloc(ctx, &expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                }
                &Opcode::TlsValue => {
                    if let Some((pattern4_0, pattern4_1, pattern4_2)) =
                        C::symbol_value_data(ctx, pattern2_1)
                    {
                        if pattern4_2 == 0i128 as i64 {
                            let mut closure6 = || {
                                let expr0_0 = C::tls_model_is_elf_gd(ctx)?;
                                return Some(expr0_0);
                            };
                            if let Some(pattern6_0) = closure6() {
                                // Rule at src/isa/s390x/lower.isle line 2289.
                                let expr0_0 = SymbolReloc::TlsGd { name: pattern4_0 };
                                let expr1_0 = C::memarg_got(ctx);
                                let expr2_0 = constructor_load_addr(ctx, &expr1_0)?;
                                let expr3_0 = constructor_load_symbol_reloc(ctx, &expr0_0)?;
                                let expr4_0 = constructor_lib_call_tls_get_offset(
                                    ctx, expr2_0, expr3_0, &expr0_0,
                                )?;
                                let expr5_0: Type = I64;
                                let expr6_0 = constructor_thread_pointer(ctx)?;
                                let expr7_0 = constructor_add_reg(ctx, expr5_0, expr4_0, expr6_0)?;
                                let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                                return Some(expr8_0);
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref pattern2_0,
            imm: pattern2_1,
        } => {
            if let &Opcode::F32const = pattern2_0 {
                let pattern4_0 = C::u64_from_ieee32(ctx, pattern2_1);
                // Rule at src/isa/s390x/lower.isle line 21.
                let expr0_0: Type = F32;
                let expr1_0 = constructor_imm(ctx, expr0_0, pattern4_0)?;
                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                return Some(expr2_0);
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref pattern2_0,
            imm: pattern2_1,
        } => {
            if let &Opcode::F64const = pattern2_0 {
                let pattern4_0 = C::u64_from_ieee64(ctx, pattern2_1);
                // Rule at src/isa/s390x/lower.isle line 27.
                let expr0_0: Type = F64;
                let expr1_0 = constructor_imm(ctx, expr0_0, pattern4_0)?;
                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                return Some(expr2_0);
            }
        }
        &InstructionData::Trap {
            opcode: ref pattern2_0,
            code: ref pattern2_1,
        } => {
            match pattern2_0 {
                &Opcode::Trap => {
                    // Rule at src/isa/s390x/lower.isle line 3820.
                    let expr0_0 = constructor_trap_impl(ctx, pattern2_1)?;
                    let expr1_0 = constructor_side_effect(ctx, &expr0_0)?;
                    return Some(expr1_0);
                }
                &Opcode::ResumableTrap => {
                    // Rule at src/isa/s390x/lower.isle line 3826.
                    let expr0_0 = constructor_trap_impl(ctx, pattern2_1)?;
                    let expr1_0 = constructor_side_effect(ctx, &expr0_0)?;
                    return Some(expr1_0);
                }
                _ => {}
            }
        }
        &InstructionData::Binary {
            opcode: ref pattern2_0,
            args: ref pattern2_1,
        } => {
            match pattern2_0 {
                &Opcode::Snarrow => {
                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                    let pattern5_0 = C::value_type(ctx, pattern4_0);
                    if let Some(pattern6_0) = C::ty_vec128(ctx, pattern5_0) {
                        // Rule at src/isa/s390x/lower.isle line 944.
                        let expr0_0 = C::put_in_reg(ctx, pattern4_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr2_0 = constructor_vec_pack_ssat_lane_order(
                            ctx, pattern6_0, expr0_0, expr1_0,
                        )?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                }
                &Opcode::Unarrow => {
                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                    let pattern5_0 = C::value_type(ctx, pattern4_0);
                    if let Some(pattern6_0) = C::ty_vec128(ctx, pattern5_0) {
                        // Rule at src/isa/s390x/lower.isle line 956.
                        let expr0_0: u128 = 0i128 as u128;
                        let expr1_0 = constructor_vec_imm(ctx, pattern6_0, expr0_0)?;
                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                        let expr3_0 = constructor_vec_smax(ctx, pattern6_0, expr2_0, expr1_0)?;
                        let expr4_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr5_0 = constructor_vec_smax(ctx, pattern6_0, expr4_0, expr1_0)?;
                        let expr6_0 = constructor_vec_pack_usat_lane_order(
                            ctx, pattern6_0, expr3_0, expr5_0,
                        )?;
                        let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                        return Some(expr7_0);
                    }
                }
                &Opcode::Uunarrow => {
                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                    let pattern5_0 = C::value_type(ctx, pattern4_0);
                    if let Some(pattern6_0) = C::ty_vec128(ctx, pattern5_0) {
                        // Rule at src/isa/s390x/lower.isle line 950.
                        let expr0_0 = C::put_in_reg(ctx, pattern4_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr2_0 = constructor_vec_pack_usat_lane_order(
                            ctx, pattern6_0, expr0_0, expr1_0,
                        )?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref pattern2_0,
            args: ref pattern2_1,
            imm: pattern2_2,
        } => {
            if let &Opcode::Shuffle = pattern2_0 {
                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                if let Some(pattern5_0) = C::u128_from_immediate(ctx, pattern2_2) {
                    let (pattern6_0, pattern6_1) = C::shuffle_mask_from_u128(ctx, pattern5_0);
                    let (pattern7_0, pattern7_1) = C::u64_pair_split(ctx, pattern6_0);
                    let (pattern8_0, pattern8_1) = C::u32_pair_split(ctx, pattern7_0);
                    let (pattern9_0, pattern9_1) = C::u16_pair_split(ctx, pattern8_0);
                    let (pattern10_0, pattern10_1) = C::u8_pair_split(ctx, pattern9_0);
                    if pattern10_0 == 0i128 as u8 {
                        if pattern10_1 == 0i128 as u8 {
                            let (pattern13_0, pattern13_1) = C::u8_pair_split(ctx, pattern9_1);
                            if pattern13_0 == 1i128 as u8 {
                                if pattern13_1 == 1i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 2i128 as u8 {
                                        if pattern17_1 == 2i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 3i128 as u8 {
                                                if pattern20_1 == 3i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 4i128 as u8 {
                                                        if pattern25_1 == 4i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 5i128 as u8 {
                                                                if pattern28_1 == 5i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 6i128 as u8 {
                                                                        if pattern32_1
                                                                            == 6i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 7i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 7i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2102.
                                                                                        let expr0_0: Type = I8X16;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr3_0 = constructor_vec_merge_high(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if pattern10_1 == 1i128 as u8 {
                            let (pattern13_0, pattern13_1) = C::u8_pair_split(ctx, pattern9_1);
                            if pattern13_0 == 0i128 as u8 {
                                if pattern13_1 == 1i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 2i128 as u8 {
                                        if pattern17_1 == 3i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 2i128 as u8 {
                                                if pattern20_1 == 3i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 4i128 as u8 {
                                                        if pattern25_1 == 5i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 4i128 as u8 {
                                                                if pattern28_1 == 5i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 6i128 as u8 {
                                                                        if pattern32_1
                                                                            == 7i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 6i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 7i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2100.
                                                                                        let expr0_0: Type = I16X8;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr3_0 = constructor_vec_merge_high(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if pattern13_0 == 2i128 as u8 {
                                if pattern13_1 == 3i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 0i128 as u8 {
                                        if pattern17_1 == 1i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 2i128 as u8 {
                                                if pattern20_1 == 3i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 4i128 as u8 {
                                                        if pattern25_1 == 5i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 6i128 as u8 {
                                                                if pattern28_1 == 7i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 4i128 as u8 {
                                                                        if pattern32_1
                                                                            == 5i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 6i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 7i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2098.
                                                                                        let expr0_0: Type = I32X4;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr3_0 = constructor_vec_merge_high(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if pattern17_0 == 4i128 as u8 {
                                        if pattern17_1 == 5i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 6i128 as u8 {
                                                if pattern20_1 == 7i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 0i128 as u8 {
                                                        if pattern25_1 == 1i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 2i128 as u8 {
                                                                if pattern28_1 == 3i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 4i128 as u8 {
                                                                        if pattern32_1
                                                                            == 5i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 6i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 7i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2096.
                                                                                        let expr0_0: Type = I64X2;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr3_0 = constructor_vec_merge_high(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if pattern25_0 == 8i128 as u8 {
                                                        if pattern25_1 == 9i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 10i128 as u8 {
                                                                if pattern28_1 == 11i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 12i128 as u8 {
                                                                        if pattern32_1
                                                                            == 13i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 14i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 15i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2210.
                                                                                        let expr0_0: Type = I8X16;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0: u8 = 0i128 as u8;
                                                                                        let expr3_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr4_0: u8 = 1i128 as u8;
                                                                                        let expr5_0 = constructor_vec_permute_dw_imm(ctx, expr0_0, expr1_0, expr2_0, expr3_0, expr4_0)?;
                                                                                        let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                                                                                        return Some(expr6_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if pattern25_0 == 16i128 as u8 {
                                                        if pattern25_1 == 17i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 18i128 as u8 {
                                                                if pattern28_1 == 19i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 20i128 as u8 {
                                                                        if pattern32_1
                                                                            == 21i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 22i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 23i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2080.
                                                                                        let expr0_0: Type = I64X2;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr3_0 = constructor_vec_merge_high(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if pattern25_0 == 24i128 as u8 {
                                                        if pattern25_1 == 25i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 26i128 as u8 {
                                                                if pattern28_1 == 27i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 28i128 as u8 {
                                                                        if pattern32_1
                                                                            == 29i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 30i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 31i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2202.
                                                                                        let expr0_0: Type = I8X16;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0: u8 = 0i128 as u8;
                                                                                        let expr3_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr4_0: u8 = 1i128 as u8;
                                                                                        let expr5_0 = constructor_vec_permute_dw_imm(ctx, expr0_0, expr1_0, expr2_0, expr3_0, expr4_0)?;
                                                                                        let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                                                                                        return Some(expr6_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if pattern17_0 == 16i128 as u8 {
                                        if pattern17_1 == 17i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 18i128 as u8 {
                                                if pattern20_1 == 19i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 4i128 as u8 {
                                                        if pattern25_1 == 5i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 6i128 as u8 {
                                                                if pattern28_1 == 7i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 20i128 as u8 {
                                                                        if pattern32_1
                                                                            == 21i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 22i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 23i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2082.
                                                                                        let expr0_0: Type = I32X4;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr3_0 = constructor_vec_merge_high(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if pattern13_0 == 16i128 as u8 {
                                if pattern13_1 == 17i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 2i128 as u8 {
                                        if pattern17_1 == 3i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 18i128 as u8 {
                                                if pattern20_1 == 19i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 4i128 as u8 {
                                                        if pattern25_1 == 5i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 20i128 as u8 {
                                                                if pattern28_1 == 21i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 6i128 as u8 {
                                                                        if pattern32_1
                                                                            == 7i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 22i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 23i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2084.
                                                                                        let expr0_0: Type = I16X8;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr3_0 = constructor_vec_merge_high(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if pattern10_1 == 16i128 as u8 {
                            let (pattern13_0, pattern13_1) = C::u8_pair_split(ctx, pattern9_1);
                            if pattern13_0 == 1i128 as u8 {
                                if pattern13_1 == 17i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 2i128 as u8 {
                                        if pattern17_1 == 18i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 3i128 as u8 {
                                                if pattern20_1 == 19i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 4i128 as u8 {
                                                        if pattern25_1 == 20i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 5i128 as u8 {
                                                                if pattern28_1 == 21i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 6i128 as u8 {
                                                                        if pattern32_1
                                                                            == 22i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 7i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 23i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2086.
                                                                                        let expr0_0: Type = I8X16;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr3_0 = constructor_vec_merge_high(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if pattern10_0 == 1i128 as u8 {
                        if pattern10_1 == 3i128 as u8 {
                            let (pattern13_0, pattern13_1) = C::u8_pair_split(ctx, pattern9_1);
                            if pattern13_0 == 5i128 as u8 {
                                if pattern13_1 == 7i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 9i128 as u8 {
                                        if pattern17_1 == 11i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 13i128 as u8 {
                                                if pattern20_1 == 15i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 1i128 as u8 {
                                                        if pattern25_1 == 3i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 5i128 as u8 {
                                                                if pattern28_1 == 7i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 9i128 as u8 {
                                                                        if pattern32_1
                                                                            == 11i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 13i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 15i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2164.
                                                                                        let expr0_0: Type = I16X8;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr3_0 = constructor_vec_pack(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if pattern25_0 == 17i128 as u8 {
                                                        if pattern25_1 == 19i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 21i128 as u8 {
                                                                if pattern28_1 == 23i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 25i128 as u8 {
                                                                        if pattern32_1
                                                                            == 27i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 29i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 31i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2152.
                                                                                        let expr0_0: Type = I16X8;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr3_0 = constructor_vec_pack(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if pattern10_0 == 2i128 as u8 {
                        if pattern10_1 == 3i128 as u8 {
                            let (pattern13_0, pattern13_1) = C::u8_pair_split(ctx, pattern9_1);
                            if pattern13_0 == 6i128 as u8 {
                                if pattern13_1 == 7i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 10i128 as u8 {
                                        if pattern17_1 == 11i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 14i128 as u8 {
                                                if pattern20_1 == 15i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 2i128 as u8 {
                                                        if pattern25_1 == 3i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 6i128 as u8 {
                                                                if pattern28_1 == 7i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 10i128 as u8 {
                                                                        if pattern32_1
                                                                            == 11i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 14i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 15i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2162.
                                                                                        let expr0_0: Type = I32X4;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr3_0 = constructor_vec_pack(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if pattern25_0 == 18i128 as u8 {
                                                        if pattern25_1 == 19i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 22i128 as u8 {
                                                                if pattern28_1 == 23i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 26i128 as u8 {
                                                                        if pattern32_1
                                                                            == 27i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 30i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 31i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2150.
                                                                                        let expr0_0: Type = I32X4;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr3_0 = constructor_vec_pack(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if pattern10_0 == 4i128 as u8 {
                        if pattern10_1 == 5i128 as u8 {
                            let (pattern13_0, pattern13_1) = C::u8_pair_split(ctx, pattern9_1);
                            if pattern13_0 == 6i128 as u8 {
                                if pattern13_1 == 7i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 12i128 as u8 {
                                        if pattern17_1 == 13i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 14i128 as u8 {
                                                if pattern20_1 == 15i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 4i128 as u8 {
                                                        if pattern25_1 == 5i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 6i128 as u8 {
                                                                if pattern28_1 == 7i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 12i128 as u8 {
                                                                        if pattern32_1
                                                                            == 13i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 14i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 15i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2160.
                                                                                        let expr0_0: Type = I64X2;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr3_0 = constructor_vec_pack(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if pattern25_0 == 20i128 as u8 {
                                                        if pattern25_1 == 21i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 22i128 as u8 {
                                                                if pattern28_1 == 23i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 28i128 as u8 {
                                                                        if pattern32_1
                                                                            == 29i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 30i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 31i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2148.
                                                                                        let expr0_0: Type = I64X2;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr3_0 = constructor_vec_pack(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if pattern10_0 == 8i128 as u8 {
                        if pattern10_1 == 8i128 as u8 {
                            let (pattern13_0, pattern13_1) = C::u8_pair_split(ctx, pattern9_1);
                            if pattern13_0 == 9i128 as u8 {
                                if pattern13_1 == 9i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 10i128 as u8 {
                                        if pattern17_1 == 10i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 11i128 as u8 {
                                                if pattern20_1 == 11i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 12i128 as u8 {
                                                        if pattern25_1 == 12i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 13i128 as u8 {
                                                                if pattern28_1 == 13i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 14i128 as u8 {
                                                                        if pattern32_1
                                                                            == 14i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 15i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 15i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2136.
                                                                                        let expr0_0: Type = I8X16;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr3_0 = constructor_vec_merge_low(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if pattern10_1 == 9i128 as u8 {
                            let (pattern13_0, pattern13_1) = C::u8_pair_split(ctx, pattern9_1);
                            if pattern13_0 == 8i128 as u8 {
                                if pattern13_1 == 9i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 10i128 as u8 {
                                        if pattern17_1 == 11i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 10i128 as u8 {
                                                if pattern20_1 == 11i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 12i128 as u8 {
                                                        if pattern25_1 == 13i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 12i128 as u8 {
                                                                if pattern28_1 == 13i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 14i128 as u8 {
                                                                        if pattern32_1
                                                                            == 15i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 14i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 15i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2134.
                                                                                        let expr0_0: Type = I16X8;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr3_0 = constructor_vec_merge_low(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if pattern13_0 == 10i128 as u8 {
                                if pattern13_1 == 11i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 8i128 as u8 {
                                        if pattern17_1 == 9i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 10i128 as u8 {
                                                if pattern20_1 == 11i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 12i128 as u8 {
                                                        if pattern25_1 == 13i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 14i128 as u8 {
                                                                if pattern28_1 == 15i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 12i128 as u8 {
                                                                        if pattern32_1
                                                                            == 13i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 14i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 15i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2132.
                                                                                        let expr0_0: Type = I32X4;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr3_0 = constructor_vec_merge_low(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if pattern17_0 == 12i128 as u8 {
                                        if pattern17_1 == 13i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 14i128 as u8 {
                                                if pattern20_1 == 15i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 0i128 as u8 {
                                                        if pattern25_1 == 1i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 2i128 as u8 {
                                                                if pattern28_1 == 3i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 4i128 as u8 {
                                                                        if pattern32_1
                                                                            == 5i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 6i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 7i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2212.
                                                                                        let expr0_0: Type = I8X16;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0: u8 = 1i128 as u8;
                                                                                        let expr3_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr4_0: u8 = 0i128 as u8;
                                                                                        let expr5_0 = constructor_vec_permute_dw_imm(ctx, expr0_0, expr1_0, expr2_0, expr3_0, expr4_0)?;
                                                                                        let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                                                                                        return Some(expr6_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if pattern25_0 == 8i128 as u8 {
                                                        if pattern25_1 == 9i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 10i128 as u8 {
                                                                if pattern28_1 == 11i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 12i128 as u8 {
                                                                        if pattern32_1
                                                                            == 13i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 14i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 15i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2130.
                                                                                        let expr0_0: Type = I64X2;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr3_0 = constructor_vec_merge_low(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if pattern25_0 == 16i128 as u8 {
                                                        if pattern25_1 == 17i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 18i128 as u8 {
                                                                if pattern28_1 == 19i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 20i128 as u8 {
                                                                        if pattern32_1
                                                                            == 21i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 22i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 23i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2204.
                                                                                        let expr0_0: Type = I8X16;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0: u8 = 1i128 as u8;
                                                                                        let expr3_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr4_0: u8 = 0i128 as u8;
                                                                                        let expr5_0 = constructor_vec_permute_dw_imm(ctx, expr0_0, expr1_0, expr2_0, expr3_0, expr4_0)?;
                                                                                        let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                                                                                        return Some(expr6_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if pattern25_0 == 24i128 as u8 {
                                                        if pattern25_1 == 25i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 26i128 as u8 {
                                                                if pattern28_1 == 27i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 28i128 as u8 {
                                                                        if pattern32_1
                                                                            == 29i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 30i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 31i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2114.
                                                                                        let expr0_0: Type = I64X2;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr3_0 = constructor_vec_merge_low(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if pattern17_0 == 24i128 as u8 {
                                        if pattern17_1 == 25i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 26i128 as u8 {
                                                if pattern20_1 == 27i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 12i128 as u8 {
                                                        if pattern25_1 == 13i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 14i128 as u8 {
                                                                if pattern28_1 == 15i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 28i128 as u8 {
                                                                        if pattern32_1
                                                                            == 29i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 30i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 31i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2116.
                                                                                        let expr0_0: Type = I32X4;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr3_0 = constructor_vec_merge_low(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if pattern13_0 == 24i128 as u8 {
                                if pattern13_1 == 25i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 10i128 as u8 {
                                        if pattern17_1 == 11i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 26i128 as u8 {
                                                if pattern20_1 == 27i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 12i128 as u8 {
                                                        if pattern25_1 == 13i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 28i128 as u8 {
                                                                if pattern28_1 == 29i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 14i128 as u8 {
                                                                        if pattern32_1
                                                                            == 15i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 30i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 31i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2118.
                                                                                        let expr0_0: Type = I16X8;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr3_0 = constructor_vec_merge_low(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if pattern10_1 == 24i128 as u8 {
                            let (pattern13_0, pattern13_1) = C::u8_pair_split(ctx, pattern9_1);
                            if pattern13_0 == 9i128 as u8 {
                                if pattern13_1 == 25i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 10i128 as u8 {
                                        if pattern17_1 == 26i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 11i128 as u8 {
                                                if pattern20_1 == 27i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 12i128 as u8 {
                                                        if pattern25_1 == 28i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 13i128 as u8 {
                                                                if pattern28_1 == 29i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 14i128 as u8 {
                                                                        if pattern32_1
                                                                            == 30i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 15i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 31i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2120.
                                                                                        let expr0_0: Type = I8X16;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr3_0 = constructor_vec_merge_low(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if pattern10_0 == 16i128 as u8 {
                        if pattern10_1 == 0i128 as u8 {
                            let (pattern13_0, pattern13_1) = C::u8_pair_split(ctx, pattern9_1);
                            if pattern13_0 == 17i128 as u8 {
                                if pattern13_1 == 1i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 18i128 as u8 {
                                        if pattern17_1 == 2i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 19i128 as u8 {
                                                if pattern20_1 == 3i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 20i128 as u8 {
                                                        if pattern25_1 == 4i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 21i128 as u8 {
                                                                if pattern28_1 == 5i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 22i128 as u8 {
                                                                        if pattern32_1
                                                                            == 6i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 23i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 7i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2094.
                                                                                        let expr0_0: Type = I8X16;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr3_0 = constructor_vec_merge_high(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if pattern10_1 == 16i128 as u8 {
                            let (pattern13_0, pattern13_1) = C::u8_pair_split(ctx, pattern9_1);
                            if pattern13_0 == 17i128 as u8 {
                                if pattern13_1 == 17i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 18i128 as u8 {
                                        if pattern17_1 == 18i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 19i128 as u8 {
                                                if pattern20_1 == 19i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 20i128 as u8 {
                                                        if pattern25_1 == 20i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 21i128 as u8 {
                                                                if pattern28_1 == 21i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 22i128 as u8 {
                                                                        if pattern32_1
                                                                            == 22i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 23i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 23i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2110.
                                                                                        let expr0_0: Type = I8X16;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr3_0 = constructor_vec_merge_high(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if pattern10_1 == 17i128 as u8 {
                            let (pattern13_0, pattern13_1) = C::u8_pair_split(ctx, pattern9_1);
                            if pattern13_0 == 0i128 as u8 {
                                if pattern13_1 == 1i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 18i128 as u8 {
                                        if pattern17_1 == 19i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 2i128 as u8 {
                                                if pattern20_1 == 3i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 20i128 as u8 {
                                                        if pattern25_1 == 21i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 4i128 as u8 {
                                                                if pattern28_1 == 5i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 22i128 as u8 {
                                                                        if pattern32_1
                                                                            == 23i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 6i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 7i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2092.
                                                                                        let expr0_0: Type = I16X8;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr3_0 = constructor_vec_merge_high(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if pattern13_0 == 16i128 as u8 {
                                if pattern13_1 == 17i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 18i128 as u8 {
                                        if pattern17_1 == 19i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 18i128 as u8 {
                                                if pattern20_1 == 19i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 20i128 as u8 {
                                                        if pattern25_1 == 21i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 20i128 as u8 {
                                                                if pattern28_1 == 21i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 22i128 as u8 {
                                                                        if pattern32_1
                                                                            == 23i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 22i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 23i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2108.
                                                                                        let expr0_0: Type = I16X8;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr3_0 = constructor_vec_merge_high(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if pattern13_0 == 18i128 as u8 {
                                if pattern13_1 == 19i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 0i128 as u8 {
                                        if pattern17_1 == 1i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 2i128 as u8 {
                                                if pattern20_1 == 3i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 20i128 as u8 {
                                                        if pattern25_1 == 21i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 22i128 as u8 {
                                                                if pattern28_1 == 23i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 4i128 as u8 {
                                                                        if pattern32_1
                                                                            == 5i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 6i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 7i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2090.
                                                                                        let expr0_0: Type = I32X4;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr3_0 = constructor_vec_merge_high(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if pattern17_0 == 16i128 as u8 {
                                        if pattern17_1 == 17i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 18i128 as u8 {
                                                if pattern20_1 == 19i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 20i128 as u8 {
                                                        if pattern25_1 == 21i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 22i128 as u8 {
                                                                if pattern28_1 == 23i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 20i128 as u8 {
                                                                        if pattern32_1
                                                                            == 21i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 22i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 23i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2106.
                                                                                        let expr0_0: Type = I32X4;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr3_0 = constructor_vec_merge_high(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if pattern17_0 == 20i128 as u8 {
                                        if pattern17_1 == 21i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 22i128 as u8 {
                                                if pattern20_1 == 23i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 0i128 as u8 {
                                                        if pattern25_1 == 1i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 2i128 as u8 {
                                                                if pattern28_1 == 3i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 4i128 as u8 {
                                                                        if pattern32_1
                                                                            == 5i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 6i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 7i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2088.
                                                                                        let expr0_0: Type = I64X2;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr3_0 = constructor_vec_merge_high(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if pattern25_0 == 8i128 as u8 {
                                                        if pattern25_1 == 9i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 10i128 as u8 {
                                                                if pattern28_1 == 11i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 12i128 as u8 {
                                                                        if pattern32_1
                                                                            == 13i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 14i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 15i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2206.
                                                                                        let expr0_0: Type = I8X16;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0: u8 = 0i128 as u8;
                                                                                        let expr3_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr4_0: u8 = 1i128 as u8;
                                                                                        let expr5_0 = constructor_vec_permute_dw_imm(ctx, expr0_0, expr1_0, expr2_0, expr3_0, expr4_0)?;
                                                                                        let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                                                                                        return Some(expr6_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if pattern25_0 == 16i128 as u8 {
                                                        if pattern25_1 == 17i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 18i128 as u8 {
                                                                if pattern28_1 == 19i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 20i128 as u8 {
                                                                        if pattern32_1
                                                                            == 21i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 22i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 23i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2104.
                                                                                        let expr0_0: Type = I64X2;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr3_0 = constructor_vec_merge_high(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if pattern25_0 == 24i128 as u8 {
                                                        if pattern25_1 == 25i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 26i128 as u8 {
                                                                if pattern28_1 == 27i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 28i128 as u8 {
                                                                        if pattern32_1
                                                                            == 29i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 30i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 31i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2214.
                                                                                        let expr0_0: Type = I8X16;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0: u8 = 0i128 as u8;
                                                                                        let expr3_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr4_0: u8 = 1i128 as u8;
                                                                                        let expr5_0 = constructor_vec_permute_dw_imm(ctx, expr0_0, expr1_0, expr2_0, expr3_0, expr4_0)?;
                                                                                        let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                                                                                        return Some(expr6_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if pattern10_0 == 17i128 as u8 {
                        if pattern10_1 == 19i128 as u8 {
                            let (pattern13_0, pattern13_1) = C::u8_pair_split(ctx, pattern9_1);
                            if pattern13_0 == 21i128 as u8 {
                                if pattern13_1 == 23i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 25i128 as u8 {
                                        if pattern17_1 == 27i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 29i128 as u8 {
                                                if pattern20_1 == 31i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 1i128 as u8 {
                                                        if pattern25_1 == 3i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 5i128 as u8 {
                                                                if pattern28_1 == 7i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 9i128 as u8 {
                                                                        if pattern32_1
                                                                            == 11i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 13i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 15i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2158.
                                                                                        let expr0_0: Type = I16X8;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr3_0 = constructor_vec_pack(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if pattern25_0 == 17i128 as u8 {
                                                        if pattern25_1 == 19i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 21i128 as u8 {
                                                                if pattern28_1 == 23i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 25i128 as u8 {
                                                                        if pattern32_1
                                                                            == 27i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 29i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 31i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2170.
                                                                                        let expr0_0: Type = I16X8;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr3_0 = constructor_vec_pack(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if pattern10_0 == 18i128 as u8 {
                        if pattern10_1 == 19i128 as u8 {
                            let (pattern13_0, pattern13_1) = C::u8_pair_split(ctx, pattern9_1);
                            if pattern13_0 == 22i128 as u8 {
                                if pattern13_1 == 23i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 26i128 as u8 {
                                        if pattern17_1 == 27i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 30i128 as u8 {
                                                if pattern20_1 == 31i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 2i128 as u8 {
                                                        if pattern25_1 == 3i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 6i128 as u8 {
                                                                if pattern28_1 == 7i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 10i128 as u8 {
                                                                        if pattern32_1
                                                                            == 11i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 14i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 15i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2156.
                                                                                        let expr0_0: Type = I32X4;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr3_0 = constructor_vec_pack(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if pattern25_0 == 18i128 as u8 {
                                                        if pattern25_1 == 19i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 22i128 as u8 {
                                                                if pattern28_1 == 23i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 26i128 as u8 {
                                                                        if pattern32_1
                                                                            == 27i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 30i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 31i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2168.
                                                                                        let expr0_0: Type = I32X4;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr3_0 = constructor_vec_pack(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if pattern10_0 == 20i128 as u8 {
                        if pattern10_1 == 21i128 as u8 {
                            let (pattern13_0, pattern13_1) = C::u8_pair_split(ctx, pattern9_1);
                            if pattern13_0 == 22i128 as u8 {
                                if pattern13_1 == 23i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 28i128 as u8 {
                                        if pattern17_1 == 29i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 30i128 as u8 {
                                                if pattern20_1 == 31i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 4i128 as u8 {
                                                        if pattern25_1 == 5i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 6i128 as u8 {
                                                                if pattern28_1 == 7i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 12i128 as u8 {
                                                                        if pattern32_1
                                                                            == 13i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 14i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 15i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2154.
                                                                                        let expr0_0: Type = I64X2;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr3_0 = constructor_vec_pack(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if pattern25_0 == 20i128 as u8 {
                                                        if pattern25_1 == 21i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 22i128 as u8 {
                                                                if pattern28_1 == 23i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 28i128 as u8 {
                                                                        if pattern32_1
                                                                            == 29i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 30i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 31i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2166.
                                                                                        let expr0_0: Type = I64X2;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr3_0 = constructor_vec_pack(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if pattern10_0 == 24i128 as u8 {
                        if pattern10_1 == 8i128 as u8 {
                            let (pattern13_0, pattern13_1) = C::u8_pair_split(ctx, pattern9_1);
                            if pattern13_0 == 25i128 as u8 {
                                if pattern13_1 == 9i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 26i128 as u8 {
                                        if pattern17_1 == 10i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 27i128 as u8 {
                                                if pattern20_1 == 11i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 28i128 as u8 {
                                                        if pattern25_1 == 12i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 29i128 as u8 {
                                                                if pattern28_1 == 13i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 30i128 as u8 {
                                                                        if pattern32_1
                                                                            == 14i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 31i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 15i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2128.
                                                                                        let expr0_0: Type = I8X16;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr3_0 = constructor_vec_merge_low(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if pattern10_1 == 24i128 as u8 {
                            let (pattern13_0, pattern13_1) = C::u8_pair_split(ctx, pattern9_1);
                            if pattern13_0 == 25i128 as u8 {
                                if pattern13_1 == 25i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 26i128 as u8 {
                                        if pattern17_1 == 26i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 27i128 as u8 {
                                                if pattern20_1 == 27i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 28i128 as u8 {
                                                        if pattern25_1 == 28i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 29i128 as u8 {
                                                                if pattern28_1 == 29i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 30i128 as u8 {
                                                                        if pattern32_1
                                                                            == 30i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 31i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 31i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2144.
                                                                                        let expr0_0: Type = I8X16;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr3_0 = constructor_vec_merge_low(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if pattern10_1 == 25i128 as u8 {
                            let (pattern13_0, pattern13_1) = C::u8_pair_split(ctx, pattern9_1);
                            if pattern13_0 == 8i128 as u8 {
                                if pattern13_1 == 9i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 26i128 as u8 {
                                        if pattern17_1 == 27i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 10i128 as u8 {
                                                if pattern20_1 == 11i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 28i128 as u8 {
                                                        if pattern25_1 == 29i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 12i128 as u8 {
                                                                if pattern28_1 == 13i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 30i128 as u8 {
                                                                        if pattern32_1
                                                                            == 31i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 14i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 15i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2126.
                                                                                        let expr0_0: Type = I16X8;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr3_0 = constructor_vec_merge_low(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if pattern13_0 == 24i128 as u8 {
                                if pattern13_1 == 25i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 26i128 as u8 {
                                        if pattern17_1 == 27i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 26i128 as u8 {
                                                if pattern20_1 == 27i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 28i128 as u8 {
                                                        if pattern25_1 == 29i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 28i128 as u8 {
                                                                if pattern28_1 == 29i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 30i128 as u8 {
                                                                        if pattern32_1
                                                                            == 31i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 30i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 31i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2142.
                                                                                        let expr0_0: Type = I16X8;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr3_0 = constructor_vec_merge_low(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if pattern13_0 == 26i128 as u8 {
                                if pattern13_1 == 27i128 as u8 {
                                    let (pattern16_0, pattern16_1) =
                                        C::u16_pair_split(ctx, pattern8_1);
                                    let (pattern17_0, pattern17_1) =
                                        C::u8_pair_split(ctx, pattern16_0);
                                    if pattern17_0 == 8i128 as u8 {
                                        if pattern17_1 == 9i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 10i128 as u8 {
                                                if pattern20_1 == 11i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 28i128 as u8 {
                                                        if pattern25_1 == 29i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 30i128 as u8 {
                                                                if pattern28_1 == 31i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 12i128 as u8 {
                                                                        if pattern32_1
                                                                            == 13i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 14i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 15i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2124.
                                                                                        let expr0_0: Type = I32X4;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr3_0 = constructor_vec_merge_low(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if pattern17_0 == 24i128 as u8 {
                                        if pattern17_1 == 25i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 26i128 as u8 {
                                                if pattern20_1 == 27i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 28i128 as u8 {
                                                        if pattern25_1 == 29i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 30i128 as u8 {
                                                                if pattern28_1 == 31i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 28i128 as u8 {
                                                                        if pattern32_1
                                                                            == 29i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 30i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 31i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2140.
                                                                                        let expr0_0: Type = I32X4;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr3_0 = constructor_vec_merge_low(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if pattern17_0 == 28i128 as u8 {
                                        if pattern17_1 == 29i128 as u8 {
                                            let (pattern20_0, pattern20_1) =
                                                C::u8_pair_split(ctx, pattern16_1);
                                            if pattern20_0 == 30i128 as u8 {
                                                if pattern20_1 == 31i128 as u8 {
                                                    let (pattern23_0, pattern23_1) =
                                                        C::u32_pair_split(ctx, pattern7_1);
                                                    let (pattern24_0, pattern24_1) =
                                                        C::u16_pair_split(ctx, pattern23_0);
                                                    let (pattern25_0, pattern25_1) =
                                                        C::u8_pair_split(ctx, pattern24_0);
                                                    if pattern25_0 == 0i128 as u8 {
                                                        if pattern25_1 == 1i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 2i128 as u8 {
                                                                if pattern28_1 == 3i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 4i128 as u8 {
                                                                        if pattern32_1
                                                                            == 5i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 6i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 7i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2208.
                                                                                        let expr0_0: Type = I8X16;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0: u8 = 1i128 as u8;
                                                                                        let expr3_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr4_0: u8 = 0i128 as u8;
                                                                                        let expr5_0 = constructor_vec_permute_dw_imm(ctx, expr0_0, expr1_0, expr2_0, expr3_0, expr4_0)?;
                                                                                        let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                                                                                        return Some(expr6_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if pattern25_0 == 8i128 as u8 {
                                                        if pattern25_1 == 9i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 10i128 as u8 {
                                                                if pattern28_1 == 11i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 12i128 as u8 {
                                                                        if pattern32_1
                                                                            == 13i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 14i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 15i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2122.
                                                                                        let expr0_0: Type = I64X2;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_0);
                                                                                        let expr3_0 = constructor_vec_merge_low(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if pattern25_0 == 16i128 as u8 {
                                                        if pattern25_1 == 17i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 18i128 as u8 {
                                                                if pattern28_1 == 19i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 20i128 as u8 {
                                                                        if pattern32_1
                                                                            == 21i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 22i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 23i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2216.
                                                                                        let expr0_0: Type = I8X16;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0: u8 = 1i128 as u8;
                                                                                        let expr3_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr4_0: u8 = 0i128 as u8;
                                                                                        let expr5_0 = constructor_vec_permute_dw_imm(ctx, expr0_0, expr1_0, expr2_0, expr3_0, expr4_0)?;
                                                                                        let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                                                                                        return Some(expr6_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if pattern25_0 == 24i128 as u8 {
                                                        if pattern25_1 == 25i128 as u8 {
                                                            let (pattern28_0, pattern28_1) =
                                                                C::u8_pair_split(ctx, pattern24_1);
                                                            if pattern28_0 == 26i128 as u8 {
                                                                if pattern28_1 == 27i128 as u8 {
                                                                    let (pattern31_0, pattern31_1) =
                                                                        C::u16_pair_split(
                                                                            ctx,
                                                                            pattern23_1,
                                                                        );
                                                                    let (pattern32_0, pattern32_1) =
                                                                        C::u8_pair_split(
                                                                            ctx,
                                                                            pattern31_0,
                                                                        );
                                                                    if pattern32_0 == 28i128 as u8 {
                                                                        if pattern32_1
                                                                            == 29i128 as u8
                                                                        {
                                                                            let (
                                                                                pattern35_0,
                                                                                pattern35_1,
                                                                            ) = C::u8_pair_split(
                                                                                ctx,
                                                                                pattern31_1,
                                                                            );
                                                                            if pattern35_0
                                                                                == 30i128 as u8
                                                                            {
                                                                                if pattern35_1
                                                                                    == 31i128 as u8
                                                                                {
                                                                                    if pattern6_1
                                                                                        == 65535i128
                                                                                            as u16
                                                                                    {
                                                                                        // Rule at src/isa/s390x/lower.isle line 2138.
                                                                                        let expr0_0: Type = I64X2;
                                                                                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                                                                                        let expr3_0 = constructor_vec_merge_low(ctx, expr0_0, expr1_0, expr2_0)?;
                                                                                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                                                                                        return Some(expr4_0);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if pattern10_1 == 0i128 as u8 {
                        let (pattern12_0, pattern12_1) = C::u8_pair_split(ctx, pattern9_1);
                        if pattern12_1 == 1i128 as u8 {
                            let (pattern14_0, pattern14_1) = C::u16_pair_split(ctx, pattern8_1);
                            let (pattern15_0, pattern15_1) = C::u8_pair_split(ctx, pattern14_0);
                            if pattern15_1 == 2i128 as u8 {
                                let (pattern17_0, pattern17_1) = C::u8_pair_split(ctx, pattern14_1);
                                if pattern17_1 == 3i128 as u8 {
                                    let (pattern19_0, pattern19_1) =
                                        C::u32_pair_split(ctx, pattern7_1);
                                    let (pattern20_0, pattern20_1) =
                                        C::u16_pair_split(ctx, pattern19_0);
                                    let (pattern21_0, pattern21_1) =
                                        C::u8_pair_split(ctx, pattern20_0);
                                    if pattern21_1 == 4i128 as u8 {
                                        let (pattern23_0, pattern23_1) =
                                            C::u8_pair_split(ctx, pattern20_1);
                                        if pattern23_1 == 5i128 as u8 {
                                            let (pattern25_0, pattern25_1) =
                                                C::u16_pair_split(ctx, pattern19_1);
                                            let (pattern26_0, pattern26_1) =
                                                C::u8_pair_split(ctx, pattern25_0);
                                            if pattern26_1 == 6i128 as u8 {
                                                let (pattern28_0, pattern28_1) =
                                                    C::u8_pair_split(ctx, pattern25_1);
                                                if pattern28_1 == 7i128 as u8 {
                                                    if pattern6_1 == 21845i128 as u16 {
                                                        // Rule at src/isa/s390x/lower.isle line 2178.
                                                        let expr0_0: Type = I8X16;
                                                        let expr1_0 =
                                                            C::put_in_reg(ctx, pattern4_0);
                                                        let expr2_0 = constructor_vec_unpacku_high(
                                                            ctx, expr0_0, expr1_0,
                                                        )?;
                                                        let expr3_0 =
                                                            constructor_output_reg(ctx, expr2_0)?;
                                                        return Some(expr3_0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if pattern10_1 == 8i128 as u8 {
                        let (pattern12_0, pattern12_1) = C::u8_pair_split(ctx, pattern9_1);
                        if pattern12_1 == 9i128 as u8 {
                            let (pattern14_0, pattern14_1) = C::u16_pair_split(ctx, pattern8_1);
                            let (pattern15_0, pattern15_1) = C::u8_pair_split(ctx, pattern14_0);
                            if pattern15_1 == 10i128 as u8 {
                                let (pattern17_0, pattern17_1) = C::u8_pair_split(ctx, pattern14_1);
                                if pattern17_1 == 11i128 as u8 {
                                    let (pattern19_0, pattern19_1) =
                                        C::u32_pair_split(ctx, pattern7_1);
                                    let (pattern20_0, pattern20_1) =
                                        C::u16_pair_split(ctx, pattern19_0);
                                    let (pattern21_0, pattern21_1) =
                                        C::u8_pair_split(ctx, pattern20_0);
                                    if pattern21_1 == 12i128 as u8 {
                                        let (pattern23_0, pattern23_1) =
                                            C::u8_pair_split(ctx, pattern20_1);
                                        if pattern23_1 == 13i128 as u8 {
                                            let (pattern25_0, pattern25_1) =
                                                C::u16_pair_split(ctx, pattern19_1);
                                            let (pattern26_0, pattern26_1) =
                                                C::u8_pair_split(ctx, pattern25_0);
                                            if pattern26_1 == 14i128 as u8 {
                                                let (pattern28_0, pattern28_1) =
                                                    C::u8_pair_split(ctx, pattern25_1);
                                                if pattern28_1 == 15i128 as u8 {
                                                    if pattern6_1 == 21845i128 as u16 {
                                                        // Rule at src/isa/s390x/lower.isle line 2192.
                                                        let expr0_0: Type = I8X16;
                                                        let expr1_0 =
                                                            C::put_in_reg(ctx, pattern4_0);
                                                        let expr2_0 = constructor_vec_unpacku_low(
                                                            ctx, expr0_0, expr1_0,
                                                        )?;
                                                        let expr3_0 =
                                                            constructor_output_reg(ctx, expr2_0)?;
                                                        return Some(expr3_0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if pattern10_1 == 16i128 as u8 {
                        let (pattern12_0, pattern12_1) = C::u8_pair_split(ctx, pattern9_1);
                        if pattern12_1 == 17i128 as u8 {
                            let (pattern14_0, pattern14_1) = C::u16_pair_split(ctx, pattern8_1);
                            let (pattern15_0, pattern15_1) = C::u8_pair_split(ctx, pattern14_0);
                            if pattern15_1 == 18i128 as u8 {
                                let (pattern17_0, pattern17_1) = C::u8_pair_split(ctx, pattern14_1);
                                if pattern17_1 == 19i128 as u8 {
                                    let (pattern19_0, pattern19_1) =
                                        C::u32_pair_split(ctx, pattern7_1);
                                    let (pattern20_0, pattern20_1) =
                                        C::u16_pair_split(ctx, pattern19_0);
                                    let (pattern21_0, pattern21_1) =
                                        C::u8_pair_split(ctx, pattern20_0);
                                    if pattern21_1 == 20i128 as u8 {
                                        let (pattern23_0, pattern23_1) =
                                            C::u8_pair_split(ctx, pattern20_1);
                                        if pattern23_1 == 21i128 as u8 {
                                            let (pattern25_0, pattern25_1) =
                                                C::u16_pair_split(ctx, pattern19_1);
                                            let (pattern26_0, pattern26_1) =
                                                C::u8_pair_split(ctx, pattern25_0);
                                            if pattern26_1 == 22i128 as u8 {
                                                let (pattern28_0, pattern28_1) =
                                                    C::u8_pair_split(ctx, pattern25_1);
                                                if pattern28_1 == 23i128 as u8 {
                                                    if pattern6_1 == 21845i128 as u16 {
                                                        // Rule at src/isa/s390x/lower.isle line 2184.
                                                        let expr0_0: Type = I8X16;
                                                        let expr1_0 =
                                                            C::put_in_reg(ctx, pattern4_1);
                                                        let expr2_0 = constructor_vec_unpacku_high(
                                                            ctx, expr0_0, expr1_0,
                                                        )?;
                                                        let expr3_0 =
                                                            constructor_output_reg(ctx, expr2_0)?;
                                                        return Some(expr3_0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if pattern10_1 == 24i128 as u8 {
                        let (pattern12_0, pattern12_1) = C::u8_pair_split(ctx, pattern9_1);
                        if pattern12_1 == 25i128 as u8 {
                            let (pattern14_0, pattern14_1) = C::u16_pair_split(ctx, pattern8_1);
                            let (pattern15_0, pattern15_1) = C::u8_pair_split(ctx, pattern14_0);
                            if pattern15_1 == 26i128 as u8 {
                                let (pattern17_0, pattern17_1) = C::u8_pair_split(ctx, pattern14_1);
                                if pattern17_1 == 27i128 as u8 {
                                    let (pattern19_0, pattern19_1) =
                                        C::u32_pair_split(ctx, pattern7_1);
                                    let (pattern20_0, pattern20_1) =
                                        C::u16_pair_split(ctx, pattern19_0);
                                    let (pattern21_0, pattern21_1) =
                                        C::u8_pair_split(ctx, pattern20_0);
                                    if pattern21_1 == 28i128 as u8 {
                                        let (pattern23_0, pattern23_1) =
                                            C::u8_pair_split(ctx, pattern20_1);
                                        if pattern23_1 == 29i128 as u8 {
                                            let (pattern25_0, pattern25_1) =
                                                C::u16_pair_split(ctx, pattern19_1);
                                            let (pattern26_0, pattern26_1) =
                                                C::u8_pair_split(ctx, pattern25_0);
                                            if pattern26_1 == 30i128 as u8 {
                                                let (pattern28_0, pattern28_1) =
                                                    C::u8_pair_split(ctx, pattern25_1);
                                                if pattern28_1 == 31i128 as u8 {
                                                    if pattern6_1 == 21845i128 as u16 {
                                                        // Rule at src/isa/s390x/lower.isle line 2198.
                                                        let expr0_0: Type = I8X16;
                                                        let expr1_0 =
                                                            C::put_in_reg(ctx, pattern4_1);
                                                        let expr2_0 = constructor_vec_unpacku_low(
                                                            ctx, expr0_0, expr1_0,
                                                        )?;
                                                        let expr3_0 =
                                                            constructor_output_reg(ctx, expr2_0)?;
                                                        return Some(expr3_0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    let (pattern11_0, pattern11_1) = C::u8_pair_split(ctx, pattern9_1);
                    if pattern11_0 == 0i128 as u8 {
                        if pattern11_1 == 1i128 as u8 {
                            let (pattern14_0, pattern14_1) = C::u16_pair_split(ctx, pattern8_1);
                            let (pattern15_0, pattern15_1) = C::u8_pair_split(ctx, pattern14_0);
                            let (pattern16_0, pattern16_1) = C::u8_pair_split(ctx, pattern14_1);
                            if pattern16_0 == 2i128 as u8 {
                                if pattern16_1 == 3i128 as u8 {
                                    let (pattern19_0, pattern19_1) =
                                        C::u32_pair_split(ctx, pattern7_1);
                                    let (pattern20_0, pattern20_1) =
                                        C::u16_pair_split(ctx, pattern19_0);
                                    let (pattern21_0, pattern21_1) =
                                        C::u8_pair_split(ctx, pattern20_0);
                                    let (pattern22_0, pattern22_1) =
                                        C::u8_pair_split(ctx, pattern20_1);
                                    if pattern22_0 == 4i128 as u8 {
                                        if pattern22_1 == 5i128 as u8 {
                                            let (pattern25_0, pattern25_1) =
                                                C::u16_pair_split(ctx, pattern19_1);
                                            let (pattern26_0, pattern26_1) =
                                                C::u8_pair_split(ctx, pattern25_0);
                                            let (pattern27_0, pattern27_1) =
                                                C::u8_pair_split(ctx, pattern25_1);
                                            if pattern27_0 == 6i128 as u8 {
                                                if pattern27_1 == 7i128 as u8 {
                                                    if pattern6_1 == 13107i128 as u16 {
                                                        // Rule at src/isa/s390x/lower.isle line 2176.
                                                        let expr0_0: Type = I16X8;
                                                        let expr1_0 =
                                                            C::put_in_reg(ctx, pattern4_0);
                                                        let expr2_0 = constructor_vec_unpacku_high(
                                                            ctx, expr0_0, expr1_0,
                                                        )?;
                                                        let expr3_0 =
                                                            constructor_output_reg(ctx, expr2_0)?;
                                                        return Some(expr3_0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if pattern11_0 == 8i128 as u8 {
                        if pattern11_1 == 9i128 as u8 {
                            let (pattern14_0, pattern14_1) = C::u16_pair_split(ctx, pattern8_1);
                            let (pattern15_0, pattern15_1) = C::u8_pair_split(ctx, pattern14_0);
                            let (pattern16_0, pattern16_1) = C::u8_pair_split(ctx, pattern14_1);
                            if pattern16_0 == 10i128 as u8 {
                                if pattern16_1 == 11i128 as u8 {
                                    let (pattern19_0, pattern19_1) =
                                        C::u32_pair_split(ctx, pattern7_1);
                                    let (pattern20_0, pattern20_1) =
                                        C::u16_pair_split(ctx, pattern19_0);
                                    let (pattern21_0, pattern21_1) =
                                        C::u8_pair_split(ctx, pattern20_0);
                                    let (pattern22_0, pattern22_1) =
                                        C::u8_pair_split(ctx, pattern20_1);
                                    if pattern22_0 == 12i128 as u8 {
                                        if pattern22_1 == 13i128 as u8 {
                                            let (pattern25_0, pattern25_1) =
                                                C::u16_pair_split(ctx, pattern19_1);
                                            let (pattern26_0, pattern26_1) =
                                                C::u8_pair_split(ctx, pattern25_0);
                                            let (pattern27_0, pattern27_1) =
                                                C::u8_pair_split(ctx, pattern25_1);
                                            if pattern27_0 == 14i128 as u8 {
                                                if pattern27_1 == 15i128 as u8 {
                                                    if pattern6_1 == 13107i128 as u16 {
                                                        // Rule at src/isa/s390x/lower.isle line 2190.
                                                        let expr0_0: Type = I16X8;
                                                        let expr1_0 =
                                                            C::put_in_reg(ctx, pattern4_0);
                                                        let expr2_0 = constructor_vec_unpacku_low(
                                                            ctx, expr0_0, expr1_0,
                                                        )?;
                                                        let expr3_0 =
                                                            constructor_output_reg(ctx, expr2_0)?;
                                                        return Some(expr3_0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if pattern11_0 == 16i128 as u8 {
                        if pattern11_1 == 17i128 as u8 {
                            let (pattern14_0, pattern14_1) = C::u16_pair_split(ctx, pattern8_1);
                            let (pattern15_0, pattern15_1) = C::u8_pair_split(ctx, pattern14_0);
                            let (pattern16_0, pattern16_1) = C::u8_pair_split(ctx, pattern14_1);
                            if pattern16_0 == 18i128 as u8 {
                                if pattern16_1 == 19i128 as u8 {
                                    let (pattern19_0, pattern19_1) =
                                        C::u32_pair_split(ctx, pattern7_1);
                                    let (pattern20_0, pattern20_1) =
                                        C::u16_pair_split(ctx, pattern19_0);
                                    let (pattern21_0, pattern21_1) =
                                        C::u8_pair_split(ctx, pattern20_0);
                                    let (pattern22_0, pattern22_1) =
                                        C::u8_pair_split(ctx, pattern20_1);
                                    if pattern22_0 == 20i128 as u8 {
                                        if pattern22_1 == 21i128 as u8 {
                                            let (pattern25_0, pattern25_1) =
                                                C::u16_pair_split(ctx, pattern19_1);
                                            let (pattern26_0, pattern26_1) =
                                                C::u8_pair_split(ctx, pattern25_0);
                                            let (pattern27_0, pattern27_1) =
                                                C::u8_pair_split(ctx, pattern25_1);
                                            if pattern27_0 == 22i128 as u8 {
                                                if pattern27_1 == 23i128 as u8 {
                                                    if pattern6_1 == 13107i128 as u16 {
                                                        // Rule at src/isa/s390x/lower.isle line 2182.
                                                        let expr0_0: Type = I16X8;
                                                        let expr1_0 =
                                                            C::put_in_reg(ctx, pattern4_1);
                                                        let expr2_0 = constructor_vec_unpacku_high(
                                                            ctx, expr0_0, expr1_0,
                                                        )?;
                                                        let expr3_0 =
                                                            constructor_output_reg(ctx, expr2_0)?;
                                                        return Some(expr3_0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if pattern11_0 == 24i128 as u8 {
                        if pattern11_1 == 25i128 as u8 {
                            let (pattern14_0, pattern14_1) = C::u16_pair_split(ctx, pattern8_1);
                            let (pattern15_0, pattern15_1) = C::u8_pair_split(ctx, pattern14_0);
                            let (pattern16_0, pattern16_1) = C::u8_pair_split(ctx, pattern14_1);
                            if pattern16_0 == 26i128 as u8 {
                                if pattern16_1 == 27i128 as u8 {
                                    let (pattern19_0, pattern19_1) =
                                        C::u32_pair_split(ctx, pattern7_1);
                                    let (pattern20_0, pattern20_1) =
                                        C::u16_pair_split(ctx, pattern19_0);
                                    let (pattern21_0, pattern21_1) =
                                        C::u8_pair_split(ctx, pattern20_0);
                                    let (pattern22_0, pattern22_1) =
                                        C::u8_pair_split(ctx, pattern20_1);
                                    if pattern22_0 == 28i128 as u8 {
                                        if pattern22_1 == 29i128 as u8 {
                                            let (pattern25_0, pattern25_1) =
                                                C::u16_pair_split(ctx, pattern19_1);
                                            let (pattern26_0, pattern26_1) =
                                                C::u8_pair_split(ctx, pattern25_0);
                                            let (pattern27_0, pattern27_1) =
                                                C::u8_pair_split(ctx, pattern25_1);
                                            if pattern27_0 == 30i128 as u8 {
                                                if pattern27_1 == 31i128 as u8 {
                                                    if pattern6_1 == 13107i128 as u16 {
                                                        // Rule at src/isa/s390x/lower.isle line 2196.
                                                        let expr0_0: Type = I16X8;
                                                        let expr1_0 =
                                                            C::put_in_reg(ctx, pattern4_1);
                                                        let expr2_0 = constructor_vec_unpacku_low(
                                                            ctx, expr0_0, expr1_0,
                                                        )?;
                                                        let expr3_0 =
                                                            constructor_output_reg(ctx, expr2_0)?;
                                                        return Some(expr3_0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    let (pattern12_0, pattern12_1) = C::u16_pair_split(ctx, pattern8_1);
                    let (pattern13_0, pattern13_1) = C::u8_pair_split(ctx, pattern12_0);
                    if pattern13_0 == 0i128 as u8 {
                        if pattern13_1 == 1i128 as u8 {
                            let (pattern16_0, pattern16_1) = C::u8_pair_split(ctx, pattern12_1);
                            if pattern16_0 == 2i128 as u8 {
                                if pattern16_1 == 3i128 as u8 {
                                    let (pattern19_0, pattern19_1) =
                                        C::u32_pair_split(ctx, pattern7_1);
                                    let (pattern20_0, pattern20_1) =
                                        C::u16_pair_split(ctx, pattern19_0);
                                    let (pattern21_0, pattern21_1) =
                                        C::u8_pair_split(ctx, pattern20_0);
                                    let (pattern22_0, pattern22_1) =
                                        C::u8_pair_split(ctx, pattern20_1);
                                    let (pattern23_0, pattern23_1) =
                                        C::u16_pair_split(ctx, pattern19_1);
                                    let (pattern24_0, pattern24_1) =
                                        C::u8_pair_split(ctx, pattern23_0);
                                    if pattern24_0 == 4i128 as u8 {
                                        if pattern24_1 == 5i128 as u8 {
                                            let (pattern27_0, pattern27_1) =
                                                C::u8_pair_split(ctx, pattern23_1);
                                            if pattern27_0 == 6i128 as u8 {
                                                if pattern27_1 == 7i128 as u8 {
                                                    if pattern6_1 == 3855i128 as u16 {
                                                        // Rule at src/isa/s390x/lower.isle line 2174.
                                                        let expr0_0: Type = I32X4;
                                                        let expr1_0 =
                                                            C::put_in_reg(ctx, pattern4_0);
                                                        let expr2_0 = constructor_vec_unpacku_high(
                                                            ctx, expr0_0, expr1_0,
                                                        )?;
                                                        let expr3_0 =
                                                            constructor_output_reg(ctx, expr2_0)?;
                                                        return Some(expr3_0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if pattern13_0 == 8i128 as u8 {
                        if pattern13_1 == 9i128 as u8 {
                            let (pattern16_0, pattern16_1) = C::u8_pair_split(ctx, pattern12_1);
                            if pattern16_0 == 10i128 as u8 {
                                if pattern16_1 == 11i128 as u8 {
                                    let (pattern19_0, pattern19_1) =
                                        C::u32_pair_split(ctx, pattern7_1);
                                    let (pattern20_0, pattern20_1) =
                                        C::u16_pair_split(ctx, pattern19_0);
                                    let (pattern21_0, pattern21_1) =
                                        C::u8_pair_split(ctx, pattern20_0);
                                    let (pattern22_0, pattern22_1) =
                                        C::u8_pair_split(ctx, pattern20_1);
                                    let (pattern23_0, pattern23_1) =
                                        C::u16_pair_split(ctx, pattern19_1);
                                    let (pattern24_0, pattern24_1) =
                                        C::u8_pair_split(ctx, pattern23_0);
                                    if pattern24_0 == 12i128 as u8 {
                                        if pattern24_1 == 13i128 as u8 {
                                            let (pattern27_0, pattern27_1) =
                                                C::u8_pair_split(ctx, pattern23_1);
                                            if pattern27_0 == 14i128 as u8 {
                                                if pattern27_1 == 15i128 as u8 {
                                                    if pattern6_1 == 3855i128 as u16 {
                                                        // Rule at src/isa/s390x/lower.isle line 2188.
                                                        let expr0_0: Type = I32X4;
                                                        let expr1_0 =
                                                            C::put_in_reg(ctx, pattern4_0);
                                                        let expr2_0 = constructor_vec_unpacku_low(
                                                            ctx, expr0_0, expr1_0,
                                                        )?;
                                                        let expr3_0 =
                                                            constructor_output_reg(ctx, expr2_0)?;
                                                        return Some(expr3_0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if pattern13_0 == 16i128 as u8 {
                        if pattern13_1 == 17i128 as u8 {
                            let (pattern16_0, pattern16_1) = C::u8_pair_split(ctx, pattern12_1);
                            if pattern16_0 == 18i128 as u8 {
                                if pattern16_1 == 19i128 as u8 {
                                    let (pattern19_0, pattern19_1) =
                                        C::u32_pair_split(ctx, pattern7_1);
                                    let (pattern20_0, pattern20_1) =
                                        C::u16_pair_split(ctx, pattern19_0);
                                    let (pattern21_0, pattern21_1) =
                                        C::u8_pair_split(ctx, pattern20_0);
                                    let (pattern22_0, pattern22_1) =
                                        C::u8_pair_split(ctx, pattern20_1);
                                    let (pattern23_0, pattern23_1) =
                                        C::u16_pair_split(ctx, pattern19_1);
                                    let (pattern24_0, pattern24_1) =
                                        C::u8_pair_split(ctx, pattern23_0);
                                    if pattern24_0 == 20i128 as u8 {
                                        if pattern24_1 == 21i128 as u8 {
                                            let (pattern27_0, pattern27_1) =
                                                C::u8_pair_split(ctx, pattern23_1);
                                            if pattern27_0 == 22i128 as u8 {
                                                if pattern27_1 == 23i128 as u8 {
                                                    if pattern6_1 == 3855i128 as u16 {
                                                        // Rule at src/isa/s390x/lower.isle line 2180.
                                                        let expr0_0: Type = I32X4;
                                                        let expr1_0 =
                                                            C::put_in_reg(ctx, pattern4_1);
                                                        let expr2_0 = constructor_vec_unpacku_high(
                                                            ctx, expr0_0, expr1_0,
                                                        )?;
                                                        let expr3_0 =
                                                            constructor_output_reg(ctx, expr2_0)?;
                                                        return Some(expr3_0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if pattern13_0 == 24i128 as u8 {
                        if pattern13_1 == 25i128 as u8 {
                            let (pattern16_0, pattern16_1) = C::u8_pair_split(ctx, pattern12_1);
                            if pattern16_0 == 26i128 as u8 {
                                if pattern16_1 == 27i128 as u8 {
                                    let (pattern19_0, pattern19_1) =
                                        C::u32_pair_split(ctx, pattern7_1);
                                    let (pattern20_0, pattern20_1) =
                                        C::u16_pair_split(ctx, pattern19_0);
                                    let (pattern21_0, pattern21_1) =
                                        C::u8_pair_split(ctx, pattern20_0);
                                    let (pattern22_0, pattern22_1) =
                                        C::u8_pair_split(ctx, pattern20_1);
                                    let (pattern23_0, pattern23_1) =
                                        C::u16_pair_split(ctx, pattern19_1);
                                    let (pattern24_0, pattern24_1) =
                                        C::u8_pair_split(ctx, pattern23_0);
                                    if pattern24_0 == 28i128 as u8 {
                                        if pattern24_1 == 29i128 as u8 {
                                            let (pattern27_0, pattern27_1) =
                                                C::u8_pair_split(ctx, pattern23_1);
                                            if pattern27_0 == 30i128 as u8 {
                                                if pattern27_1 == 31i128 as u8 {
                                                    if pattern6_1 == 3855i128 as u16 {
                                                        // Rule at src/isa/s390x/lower.isle line 2194.
                                                        let expr0_0: Type = I32X4;
                                                        let expr1_0 =
                                                            C::put_in_reg(ctx, pattern4_1);
                                                        let expr2_0 = constructor_vec_unpacku_low(
                                                            ctx, expr0_0, expr1_0,
                                                        )?;
                                                        let expr3_0 =
                                                            constructor_output_reg(ctx, expr2_0)?;
                                                        return Some(expr3_0);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref pattern2_0,
            args: ref pattern2_1,
            flags: pattern2_2,
        } => {
            if let &Opcode::AtomicStore = pattern2_0 {
                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                let pattern5_0 = C::value_type(ctx, pattern4_0);
                if pattern5_0 == I8 {
                    // Rule at src/isa/s390x/lower.isle line 3259.
                    let expr0_0 = C::zero_offset(ctx);
                    let expr1_0 =
                        constructor_istore8_impl(ctx, pattern2_2, pattern4_0, pattern4_1, expr0_0)?;
                    let expr2_0 = constructor_atomic_store_impl(ctx, &expr1_0)?;
                    return Some(expr2_0);
                }
                if pattern5_0 == I16 {
                    // Rule at src/isa/s390x/lower.isle line 3263.
                    let expr0_0 = C::zero_offset(ctx);
                    let expr1_0 = constructor_istore16_impl(
                        ctx, pattern2_2, pattern4_0, pattern4_1, expr0_0,
                    )?;
                    let expr2_0 = constructor_atomic_store_impl(ctx, &expr1_0)?;
                    return Some(expr2_0);
                }
                if pattern5_0 == I32 {
                    // Rule at src/isa/s390x/lower.isle line 3267.
                    let expr0_0 = C::zero_offset(ctx);
                    let expr1_0 = constructor_istore32_impl(
                        ctx, pattern2_2, pattern4_0, pattern4_1, expr0_0,
                    )?;
                    let expr2_0 = constructor_atomic_store_impl(ctx, &expr1_0)?;
                    return Some(expr2_0);
                }
                if pattern5_0 == I64 {
                    // Rule at src/isa/s390x/lower.isle line 3271.
                    let expr0_0 = C::zero_offset(ctx);
                    let expr1_0 = constructor_istore64_impl(
                        ctx, pattern2_2, pattern4_0, pattern4_1, expr0_0,
                    )?;
                    let expr2_0 = constructor_atomic_store_impl(ctx, &expr1_0)?;
                    return Some(expr2_0);
                }
            }
        }
        &InstructionData::Store {
            opcode: ref pattern2_0,
            args: ref pattern2_1,
            flags: pattern2_2,
            offset: pattern2_3,
        } => {
            match pattern2_0 {
                &Opcode::Store => {
                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                    let pattern5_0 = C::value_type(ctx, pattern4_0);
                    if pattern5_0 == I8 {
                        // Rule at src/isa/s390x/lower.isle line 2653.
                        let expr0_0 = constructor_istore8_impl(
                            ctx, pattern2_2, pattern4_0, pattern4_1, pattern2_3,
                        )?;
                        let expr1_0 = constructor_side_effect(ctx, &expr0_0)?;
                        return Some(expr1_0);
                    }
                    if pattern5_0 == I16 {
                        // Rule at src/isa/s390x/lower.isle line 2657.
                        let expr0_0 = constructor_istore16_impl(
                            ctx, pattern2_2, pattern4_0, pattern4_1, pattern2_3,
                        )?;
                        let expr1_0 = constructor_side_effect(ctx, &expr0_0)?;
                        return Some(expr1_0);
                    }
                    if pattern5_0 == I32 {
                        // Rule at src/isa/s390x/lower.isle line 2661.
                        let expr0_0 = constructor_istore32_impl(
                            ctx, pattern2_2, pattern4_0, pattern4_1, pattern2_3,
                        )?;
                        let expr1_0 = constructor_side_effect(ctx, &expr0_0)?;
                        return Some(expr1_0);
                    }
                    if pattern5_0 == I64 {
                        // Rule at src/isa/s390x/lower.isle line 2665.
                        let expr0_0 = constructor_istore64_impl(
                            ctx, pattern2_2, pattern4_0, pattern4_1, pattern2_3,
                        )?;
                        let expr1_0 = constructor_side_effect(ctx, &expr0_0)?;
                        return Some(expr1_0);
                    }
                    if pattern5_0 == R64 {
                        // Rule at src/isa/s390x/lower.isle line 2669.
                        let expr0_0 = constructor_istore64_impl(
                            ctx, pattern2_2, pattern4_0, pattern4_1, pattern2_3,
                        )?;
                        let expr1_0 = constructor_side_effect(ctx, &expr0_0)?;
                        return Some(expr1_0);
                    }
                    if pattern5_0 == F32 {
                        if let Some(()) = C::littleendian(ctx, pattern2_2) {
                            // Rule at src/isa/s390x/lower.isle line 2679.
                            let expr0_0: Type = F32X4;
                            let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                            let expr2_0 =
                                constructor_lower_address(ctx, pattern2_2, pattern4_1, pattern2_3)?;
                            let expr3_0: u8 = 0i128 as u8;
                            let expr4_0 = constructor_vec_store_lane_little(
                                ctx, expr0_0, expr1_0, &expr2_0, expr3_0,
                            )?;
                            let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
                            return Some(expr5_0);
                        }
                    }
                    if pattern5_0 == F64 {
                        if let Some(()) = C::littleendian(ctx, pattern2_2) {
                            // Rule at src/isa/s390x/lower.isle line 2691.
                            let expr0_0: Type = F64X2;
                            let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                            let expr2_0 =
                                constructor_lower_address(ctx, pattern2_2, pattern4_1, pattern2_3)?;
                            let expr3_0: u8 = 0i128 as u8;
                            let expr4_0 = constructor_vec_store_lane_little(
                                ctx, expr0_0, expr1_0, &expr2_0, expr3_0,
                            )?;
                            let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
                            return Some(expr5_0);
                        }
                    }
                }
                &Opcode::Istore8 => {
                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                    // Rule at src/isa/s390x/lower.isle line 2809.
                    let expr0_0 = constructor_istore8_impl(
                        ctx, pattern2_2, pattern4_0, pattern4_1, pattern2_3,
                    )?;
                    let expr1_0 = constructor_side_effect(ctx, &expr0_0)?;
                    return Some(expr1_0);
                }
                &Opcode::Istore16 => {
                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                    // Rule at src/isa/s390x/lower.isle line 2827.
                    let expr0_0 = constructor_istore16_impl(
                        ctx, pattern2_2, pattern4_0, pattern4_1, pattern2_3,
                    )?;
                    let expr1_0 = constructor_side_effect(ctx, &expr0_0)?;
                    return Some(expr1_0);
                }
                &Opcode::Istore32 => {
                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                    // Rule at src/isa/s390x/lower.isle line 2853.
                    let expr0_0 = constructor_istore32_impl(
                        ctx, pattern2_2, pattern4_0, pattern4_1, pattern2_3,
                    )?;
                    let expr1_0 = constructor_side_effect(ctx, &expr0_0)?;
                    return Some(expr1_0);
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref pattern2_0,
            args: ref pattern2_1,
            imm: pattern2_2,
        } => {
            if let &Opcode::Insertlane = pattern2_0 {
                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                let pattern5_0 = C::value_type(ctx, pattern4_0);
                let pattern6_0 = C::value_type(ctx, pattern4_1);
                if let Some(pattern7_0) = C::ty_scalar_float(ctx, pattern6_0) {
                    let pattern8_0 = C::u8_from_uimm8(ctx, pattern2_2);
                    // Rule at src/isa/s390x/lower.isle line 1793.
                    let expr0_0 = C::put_in_reg(ctx, pattern4_0);
                    let expr1_0 = C::be_lane_idx(ctx, pattern5_0, pattern8_0);
                    let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                    let expr3_0: u8 = 0i128 as u8;
                    let expr4_0 = constructor_vec_move_lane_and_insert(
                        ctx, pattern5_0, expr0_0, expr1_0, expr2_0, expr3_0,
                    )?;
                    let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
                    return Some(expr5_0);
                }
            }
        }
        _ => {}
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if pattern2_0 == I16 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::Load = pattern5_0 {
                    if let Some(()) = C::littleendian(ctx, pattern5_2) {
                        // Rule at src/isa/s390x/lower.isle line 2323.
                        let expr0_0 =
                            constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                        let expr1_0 = constructor_loadrev16(ctx, &expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                }
            }
        }
        if pattern2_0 == I32 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::Load = pattern5_0 {
                    if let Some(()) = C::littleendian(ctx, pattern5_2) {
                        // Rule at src/isa/s390x/lower.isle line 2331.
                        let expr0_0 =
                            constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                        let expr1_0 = constructor_loadrev32(ctx, &expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                }
            }
        }
        if pattern2_0 == I64 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::Load = pattern5_0 {
                    if let Some(()) = C::littleendian(ctx, pattern5_2) {
                        // Rule at src/isa/s390x/lower.isle line 2339.
                        let expr0_0 =
                            constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                        let expr1_0 = constructor_loadrev64(ctx, &expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                }
            }
        }
        if pattern2_0 == R64 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::Load = pattern5_0 {
                    if let Some(()) = C::littleendian(ctx, pattern5_2) {
                        // Rule at src/isa/s390x/lower.isle line 2347.
                        let expr0_0 =
                            constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                        let expr1_0 = constructor_loadrev64(ctx, &expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                }
            }
        }
        if pattern2_0 == F32 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::Load = pattern5_0 {
                    if let Some(()) = C::littleendian(ctx, pattern5_2) {
                        // Rule at src/isa/s390x/lower.isle line 2355.
                        let expr0_0: Type = F32X4;
                        let expr1_0 =
                            constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                        let expr2_0: u8 = 0i128 as u8;
                        let expr3_0 = constructor_vec_load_lane_little_undef(
                            ctx, expr0_0, &expr1_0, expr2_0,
                        )?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                }
            }
        }
        if pattern2_0 == F64 {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Load {
                opcode: ref pattern5_0,
                arg: pattern5_1,
                flags: pattern5_2,
                offset: pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::Load = pattern5_0 {
                    if let Some(()) = C::littleendian(ctx, pattern5_2) {
                        // Rule at src/isa/s390x/lower.isle line 2363.
                        let expr0_0: Type = F64X2;
                        let expr1_0 =
                            constructor_lower_address(ctx, pattern5_2, pattern5_1, pattern5_3)?;
                        let expr2_0: u8 = 0i128 as u8;
                        let expr3_0 = constructor_vec_load_lane_little_undef(
                            ctx, expr0_0, &expr1_0, expr2_0,
                        )?;
                        let expr4_0 = constructor_output_reg(ctx, expr3_0)?;
                        return Some(expr4_0);
                    }
                }
            }
        }
        if let Some(()) = C::mie2_enabled(ctx, pattern2_0) {
            if let Some(pattern4_0) = C::fits_in_64(ctx, pattern2_0) {
                let pattern5_0 = C::inst_data(ctx, pattern0_0);
                if let &InstructionData::Unary {
                    opcode: ref pattern6_0,
                    arg: pattern6_1,
                } = &pattern5_0
                {
                    if let &Opcode::Popcnt = pattern6_0 {
                        // Rule at src/isa/s390x/lower.isle line 1320.
                        let expr0_0 = constructor_put_in_reg_zext64(ctx, pattern6_1)?;
                        let expr1_0 = constructor_popcnt_reg(ctx, expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                }
            }
        }
        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            match &pattern4_0 {
                &InstructionData::Unary {
                    opcode: ref pattern5_0,
                    arg: pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::FcvtToUintSat => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 1659.
                            let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr1_0 = constructor_fcvt_flt_ty(ctx, pattern3_0, pattern7_0)?;
                            let expr2_0 = constructor_fcvt_int_ty(ctx, pattern3_0, pattern7_0)?;
                            let expr3_0 =
                                constructor_fpromote_reg(ctx, expr1_0, pattern7_0, expr0_0)?;
                            let expr4_0 = FpuRoundMode::ToZero;
                            let expr5_0 =
                                constructor_fcvt_to_uint_reg(ctx, expr1_0, &expr4_0, expr3_0)?;
                            let expr6_0 =
                                constructor_uint_sat_reg(ctx, pattern3_0, expr2_0, expr5_0)?;
                            let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                            return Some(expr7_0);
                        }
                        &Opcode::FcvtToSintSat => {
                            let pattern7_0 = C::value_type(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 1692.
                            let expr0_0 = C::put_in_reg(ctx, pattern5_1);
                            let expr1_0 = constructor_fcvt_flt_ty(ctx, pattern3_0, pattern7_0)?;
                            let expr2_0 = constructor_fcvt_int_ty(ctx, pattern3_0, pattern7_0)?;
                            let expr3_0 =
                                constructor_fpromote_reg(ctx, expr1_0, pattern7_0, expr0_0)?;
                            let expr4_0 = FpuRoundMode::ToZero;
                            let expr5_0 =
                                constructor_fcvt_to_sint_reg(ctx, expr1_0, &expr4_0, expr3_0)?;
                            let expr6_0 = constructor_fcmp_reg(ctx, pattern7_0, expr0_0, expr0_0)?;
                            let expr7_0 = FloatCC::Unordered;
                            let expr8_0 = C::floatcc_as_cond(ctx, &expr7_0);
                            let expr9_0: i16 = 0i128 as i16;
                            let expr10_0 =
                                constructor_cmov_imm(ctx, expr2_0, &expr8_0, expr9_0, expr5_0)?;
                            let expr11_0 = constructor_with_flags_reg(ctx, &expr6_0, &expr10_0)?;
                            let expr12_0 =
                                constructor_sint_sat_reg(ctx, pattern3_0, expr2_0, expr11_0)?;
                            let expr13_0 = constructor_output_reg(ctx, expr12_0)?;
                            return Some(expr13_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::Binary {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                } => {
                    match pattern5_0 {
                        &Opcode::Band => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 1004.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_and_reg(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Bor => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 1030.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_or_reg(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        &Opcode::Bxor => {
                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                            // Rule at src/isa/s390x/lower.isle line 1057.
                            let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                            let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                            let expr2_0 = constructor_xor_reg(ctx, pattern3_0, expr0_0, expr1_0)?;
                            let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                            return Some(expr3_0);
                        }
                        _ => {}
                    }
                }
                &InstructionData::FloatCompare {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    cond: ref pattern5_2,
                } => {
                    if let &Opcode::Fcmp = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 3459.
                        let expr0_0 =
                            constructor_fcmp_val(ctx, pattern5_2, pattern7_0, pattern7_1)?;
                        let expr1_0 = constructor_lower_bool(ctx, pattern3_0, &expr0_0)?;
                        let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
                        return Some(expr2_0);
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    cond: ref pattern5_2,
                } => {
                    if let &Opcode::Icmp = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 3311.
                        let expr0_0: bool = true;
                        let expr1_0 =
                            constructor_icmp_val(ctx, expr0_0, pattern5_2, pattern7_0, pattern7_1)?;
                        let expr2_0 = constructor_lower_bool(ctx, pattern3_0, &expr1_0)?;
                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
                        return Some(expr3_0);
                    }
                }
                _ => {}
            }
        }
        if let Some(pattern3_0) = C::ty_32_or_64(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::AtomicRmw {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
                flags: pattern5_2,
                op: ref pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::AtomicRmw = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    // Rule at src/isa/s390x/lower.isle line 2946.
                    let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                    let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                    let expr2_0 = C::inst_builder_new(ctx);
                    let expr3_0 = constructor_casloop_val_reg(ctx)?;
                    let expr4_0 = C::writable_reg_to_reg(ctx, expr3_0);
                    let expr5_0 = constructor_casloop_tmp_reg(ctx)?;
                    let expr6_0 = constructor_atomic_rmw_body(
                        ctx, &expr2_0, pattern3_0, pattern5_2, pattern5_3, expr5_0, expr4_0,
                        expr0_0,
                    )?;
                    let expr7_0 = constructor_casloop(
                        ctx, &expr2_0, pattern3_0, pattern5_2, expr1_0, expr6_0,
                    )?;
                    let expr8_0 = constructor_output_reg(ctx, expr7_0)?;
                    return Some(expr8_0);
                }
            }
        }
        if let Some(pattern3_0) = C::ty_8_or_16(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::Binary {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
            } = &pattern4_0
            {
                match pattern5_0 {
                    &Opcode::Umulhi => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 395.
                        let expr0_0 = constructor_put_in_reg_zext32(ctx, pattern7_0)?;
                        let expr1_0 = constructor_put_in_reg_zext32(ctx, pattern7_1)?;
                        let expr2_0: Type = I32;
                        let expr3_0 = constructor_mul_reg(ctx, expr2_0, expr0_0, expr1_0)?;
                        let expr4_0: Type = I32;
                        let expr5_0 = C::ty_bits(ctx, pattern3_0)?;
                        let expr6_0 = constructor_lshr_imm(ctx, expr4_0, expr3_0, expr5_0)?;
                        let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                        return Some(expr7_0);
                    }
                    &Opcode::Smulhi => {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        // Rule at src/isa/s390x/lower.isle line 433.
                        let expr0_0 = constructor_put_in_reg_sext32(ctx, pattern7_0)?;
                        let expr1_0 = constructor_put_in_reg_sext32(ctx, pattern7_1)?;
                        let expr2_0: Type = I32;
                        let expr3_0 = constructor_mul_reg(ctx, expr2_0, expr0_0, expr1_0)?;
                        let expr4_0: Type = I32;
                        let expr5_0 = C::ty_bits(ctx, pattern3_0)?;
                        let expr6_0 = constructor_ashr_imm(ctx, expr4_0, expr3_0, expr5_0)?;
                        let expr7_0 = constructor_output_reg(ctx, expr6_0)?;
                        return Some(expr7_0);
                    }
                    _ => {}
                }
            }
        }
    }
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    match &pattern1_0 {
        &InstructionData::Shuffle {
            opcode: ref pattern2_0,
            args: ref pattern2_1,
            imm: pattern2_2,
        } => {
            if let &Opcode::Shuffle = pattern2_0 {
                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                if let Some(pattern5_0) = C::u128_from_immediate(ctx, pattern2_2) {
                    let (pattern6_0, pattern6_1) = C::shuffle_mask_from_u128(ctx, pattern5_0);
                    if pattern6_1 == 65535i128 as u16 {
                        // Rule at src/isa/s390x/lower.isle line 2076.
                        let expr0_0: Type = I8X16;
                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                        let expr2_0 = C::put_in_reg(ctx, pattern4_1);
                        let expr3_0: Type = I8X16;
                        let expr4_0 = constructor_vec_imm(ctx, expr3_0, pattern6_0)?;
                        let expr5_0 =
                            constructor_vec_permute(ctx, expr0_0, expr1_0, expr2_0, expr4_0)?;
                        let expr6_0 = constructor_output_reg(ctx, expr5_0)?;
                        return Some(expr6_0);
                    }
                }
            }
        }
        &InstructionData::Store {
            opcode: ref pattern2_0,
            args: ref pattern2_1,
            flags: pattern2_2,
            offset: pattern2_3,
        } => {
            if let &Opcode::Store = pattern2_0 {
                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
                let pattern5_0 = C::value_type(ctx, pattern4_0);
                if pattern5_0 == F32 {
                    if let Some(()) = C::bigendian(ctx, pattern2_2) {
                        // Rule at src/isa/s390x/lower.isle line 2673.
                        let expr0_0: Type = F32X4;
                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                        let expr2_0 =
                            constructor_lower_address(ctx, pattern2_2, pattern4_1, pattern2_3)?;
                        let expr3_0: u8 = 0i128 as u8;
                        let expr4_0 =
                            constructor_vec_store_lane(ctx, expr0_0, expr1_0, &expr2_0, expr3_0)?;
                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
                        return Some(expr5_0);
                    }
                }
                if pattern5_0 == F64 {
                    if let Some(()) = C::bigendian(ctx, pattern2_2) {
                        // Rule at src/isa/s390x/lower.isle line 2685.
                        let expr0_0: Type = F64X2;
                        let expr1_0 = C::put_in_reg(ctx, pattern4_0);
                        let expr2_0 =
                            constructor_lower_address(ctx, pattern2_2, pattern4_1, pattern2_3)?;
                        let expr3_0: u8 = 0i128 as u8;
                        let expr4_0 =
                            constructor_vec_store_lane(ctx, expr0_0, expr1_0, &expr2_0, expr3_0)?;
                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
                        return Some(expr5_0);
                    }
                }
            }
        }
        _ => {}
    }
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
        let pattern2_0 = C::value_type(ctx, pattern1_0);
        if let Some(pattern3_0) = C::ty_8_or_16(ctx, pattern2_0) {
            let pattern4_0 = C::inst_data(ctx, pattern0_0);
            if let &InstructionData::AtomicRmw {
                opcode: ref pattern5_0,
                args: ref pattern5_1,
                flags: pattern5_2,
                op: ref pattern5_3,
            } = &pattern4_0
            {
                if let &Opcode::AtomicRmw = pattern5_0 {
                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                    // Rule at src/isa/s390x/lower.isle line 2958.
                    let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                    let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                    let expr2_0 = constructor_casloop_bitshift(ctx, expr1_0)?;
                    let expr3_0 = constructor_casloop_aligned_addr(ctx, expr1_0)?;
                    let expr4_0 = C::inst_builder_new(ctx);
                    let expr5_0 = constructor_casloop_val_reg(ctx)?;
                    let expr6_0 = C::writable_reg_to_reg(ctx, expr5_0);
                    let expr7_0 = constructor_casloop_rotate_in(
                        ctx, &expr4_0, pattern3_0, pattern5_2, expr2_0, expr6_0,
                    )?;
                    let expr8_0 = constructor_casloop_tmp_reg(ctx)?;
                    let expr9_0 = constructor_atomic_rmw_body(
                        ctx, &expr4_0, pattern3_0, pattern5_2, pattern5_3, expr8_0, expr7_0,
                        expr0_0,
                    )?;
                    let expr10_0 = constructor_casloop_rotate_out(
                        ctx, &expr4_0, pattern3_0, pattern5_2, expr2_0, expr9_0,
                    )?;
                    let expr11_0 = constructor_casloop_subword(
                        ctx, &expr4_0, pattern3_0, pattern5_2, expr3_0, expr2_0, expr10_0,
                    )?;
                    let expr12_0 = constructor_output_reg(ctx, expr11_0)?;
                    return Some(expr12_0);
                }
            }
        }
    }
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    if let &InstructionData::Shuffle {
        opcode: ref pattern2_0,
        args: ref pattern2_1,
        imm: pattern2_2,
    } = &pattern1_0
    {
        if let &Opcode::Shuffle = pattern2_0 {
            let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
            if let Some(pattern5_0) = C::u128_from_immediate(ctx, pattern2_2) {
                let (pattern6_0, pattern6_1) = C::shuffle_mask_from_u128(ctx, pattern5_0);
                // Rule at src/isa/s390x/lower.isle line 2071.
                let expr0_0: Type = I8X16;
                let expr1_0: Type = I8X16;
                let expr2_0 = constructor_vec_imm_byte_mask(ctx, expr1_0, pattern6_1)?;
                let expr3_0: Type = I8X16;
                let expr4_0 = C::put_in_reg(ctx, pattern4_0);
                let expr5_0 = C::put_in_reg(ctx, pattern4_1);
                let expr6_0: Type = I8X16;
                let expr7_0 = constructor_vec_imm(ctx, expr6_0, pattern6_0)?;
                let expr8_0 = constructor_vec_permute(ctx, expr3_0, expr4_0, expr5_0, expr7_0)?;
                let expr9_0 = constructor_vec_and(ctx, expr0_0, expr2_0, expr8_0)?;
                let expr10_0 = constructor_output_reg(ctx, expr9_0)?;
                return Some(expr10_0);
            }
        }
    }
    return None;
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &VecMachLabel,
) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    let pattern1_0 = C::inst_data(ctx, pattern0_0);
    match &pattern1_0 {
        &InstructionData::BranchTable {
            opcode: ref pattern2_0,
            arg: pattern2_1,
            destination: pattern2_2,
            table: pattern2_3,
        } => {
            if let &Opcode::BrTable = pattern2_0 {
                let pattern4_0 = arg1;
                // Rule at src/isa/s390x/lower.isle line 3768.
                let expr0_0 = constructor_put_in_reg_zext64(ctx, pattern2_1)?;
                let expr1_0: Type = I64;
                let expr2_0 = C::vec_length_minus1(ctx, pattern4_0);
                let expr3_0 = constructor_icmpu_uimm32(ctx, expr1_0, expr0_0, expr2_0)?;
                let expr4_0 = IntCC::UnsignedGreaterThanOrEqual;
                let expr5_0 = C::intcc_as_cond(ctx, &expr4_0);
                let expr6_0 = constructor_bool(ctx, &expr3_0, &expr5_0)?;
                let expr7_0: u8 = 0i128 as u8;
                let expr8_0 = C::vec_element(ctx, pattern4_0, expr7_0);
                let expr9_0 = constructor_oneway_cond_br_bool(ctx, &expr6_0, expr8_0)?;
                let expr10_0 = constructor_side_effect(ctx, &expr9_0)?;
                let expr11_0: Type = I64;
                let expr12_0: u8 = 2i128 as u8;
                let expr13_0 = constructor_lshl_imm(ctx, expr11_0, expr0_0, expr12_0)?;
                let expr14_0 = constructor_jt_sequence(ctx, expr13_0, pattern4_0)?;
                let expr15_0 = constructor_side_effect(ctx, &expr14_0)?;
                return Some(expr15_0);
            }
        }
        &InstructionData::Branch {
            opcode: ref pattern2_0,
            args: pattern2_1,
            destination: pattern2_2,
        } => {
            match pattern2_0 {
                &Opcode::Brz => {
                    let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
                    if let Some((pattern5_0, pattern5_1)) = C::value_slice_unwrap(ctx, pattern4_0) {
                        let pattern6_0 = arg1;
                        // Rule at src/isa/s390x/lower.isle line 3801.
                        let expr0_0 = constructor_value_nonzero(ctx, pattern5_0)?;
                        let expr1_0 = constructor_invert_bool(ctx, &expr0_0)?;
                        let expr2_0: u8 = 0i128 as u8;
                        let expr3_0 = C::vec_element(ctx, pattern6_0, expr2_0);
                        let expr4_0: u8 = 1i128 as u8;
                        let expr5_0 = C::vec_element(ctx, pattern6_0, expr4_0);
                        let expr6_0 = constructor_cond_br_bool(ctx, &expr1_0, expr3_0, expr5_0)?;
                        let expr7_0 = constructor_side_effect(ctx, &expr6_0)?;
                        return Some(expr7_0);
                    }
                }
                &Opcode::Brnz => {
                    let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
                    if let Some((pattern5_0, pattern5_1)) = C::value_slice_unwrap(ctx, pattern4_0) {
                        let pattern6_0 = arg1;
                        // Rule at src/isa/s390x/lower.isle line 3812.
                        let expr0_0 = constructor_value_nonzero(ctx, pattern5_0)?;
                        let expr1_0: u8 = 0i128 as u8;
                        let expr2_0 = C::vec_element(ctx, pattern6_0, expr1_0);
                        let expr3_0: u8 = 1i128 as u8;
                        let expr4_0 = C::vec_element(ctx, pattern6_0, expr3_0);
                        let expr5_0 = constructor_cond_br_bool(ctx, &expr0_0, expr2_0, expr4_0)?;
                        let expr6_0 = constructor_side_effect(ctx, &expr5_0)?;
                        return Some(expr6_0);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::Jump {
            opcode: ref pattern2_0,
            args: pattern2_1,
            destination: pattern2_2,
        } => {
            if let &Opcode::Jump = pattern2_0 {
                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
                let pattern5_0 = arg1;
                // Rule at src/isa/s390x/lower.isle line 3760.
                let expr0_0: u8 = 0i128 as u8;
                let expr1_0 = C::vec_element(ctx, pattern5_0, expr0_0);
                let expr2_0 = constructor_jump_impl(ctx, expr1_0)?;
                let expr3_0 = constructor_side_effect(ctx, &expr2_0)?;
                return Some(expr3_0);
            }
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term output_ifcout.
pub fn constructor_output_ifcout<C: Context>(ctx: &mut C, arg0: Reg) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/lower.isle line 204.
    let expr0_0 = C::value_reg(ctx, pattern0_0);
    let expr1_0 = C::value_regs_invalid(ctx);
    let expr2_0 = C::output_pair(ctx, expr0_0, expr1_0);
    return Some(expr2_0);
}

// Generated as internal constructor for term vec_mul_impl.
pub fn constructor_vec_mul_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == I128 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/lower.isle line 378.
        let expr0_0: Type = I64X2;
        let expr1_0: u8 = 0i128 as u8;
        let expr2_0 = C::zero_reg(ctx);
        let expr3_0 = constructor_vec_extract_lane(ctx, expr0_0, pattern2_0, expr1_0, expr2_0)?;
        let expr4_0: Type = I64X2;
        let expr5_0: u8 = 1i128 as u8;
        let expr6_0 = C::zero_reg(ctx);
        let expr7_0 = constructor_vec_extract_lane(ctx, expr4_0, pattern2_0, expr5_0, expr6_0)?;
        let expr8_0: Type = I64X2;
        let expr9_0: u8 = 0i128 as u8;
        let expr10_0 = C::zero_reg(ctx);
        let expr11_0 = constructor_vec_extract_lane(ctx, expr8_0, pattern3_0, expr9_0, expr10_0)?;
        let expr12_0: Type = I64X2;
        let expr13_0: u8 = 1i128 as u8;
        let expr14_0 = C::zero_reg(ctx);
        let expr15_0 = constructor_vec_extract_lane(ctx, expr12_0, pattern3_0, expr13_0, expr14_0)?;
        let expr16_0 = constructor_umul_wide(ctx, expr7_0, expr15_0)?;
        let expr17_0: Type = I64;
        let expr18_0 = C::regpair_lo(ctx, expr16_0);
        let expr19_0 = constructor_copy_reg(ctx, expr17_0, expr18_0)?;
        let expr20_0: Type = I64;
        let expr21_0 = C::regpair_hi(ctx, expr16_0);
        let expr22_0 = constructor_copy_reg(ctx, expr20_0, expr21_0)?;
        let expr23_0: Type = I64;
        let expr24_0 = constructor_mul_reg(ctx, expr23_0, expr7_0, expr11_0)?;
        let expr25_0: Type = I64;
        let expr26_0 = constructor_mul_reg(ctx, expr25_0, expr3_0, expr15_0)?;
        let expr27_0: Type = I64;
        let expr28_0: Type = I64;
        let expr29_0 = constructor_add_reg(ctx, expr28_0, expr24_0, expr22_0)?;
        let expr30_0 = constructor_add_reg(ctx, expr27_0, expr26_0, expr29_0)?;
        let expr31_0: Type = I64X2;
        let expr32_0 = constructor_mov_to_vec128(ctx, expr31_0, expr30_0, expr19_0)?;
        return Some(expr32_0);
    }
    if pattern0_0 == I8X16 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/lower.isle line 365.
        let expr0_0: Type = I8X16;
        let expr1_0 = constructor_vec_mul(ctx, expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    if pattern0_0 == I16X8 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/lower.isle line 366.
        let expr0_0: Type = I16X8;
        let expr1_0 = constructor_vec_mul(ctx, expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    if pattern0_0 == I32X4 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/lower.isle line 367.
        let expr0_0: Type = I32X4;
        let expr1_0 = constructor_vec_mul(ctx, expr0_0, pattern2_0, pattern3_0)?;
        return Some(expr1_0);
    }
    if pattern0_0 == I64X2 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/lower.isle line 370.
        let expr0_0: Type = I64X2;
        let expr1_0: Type = I64;
        let expr2_0: Type = I64X2;
        let expr3_0: u8 = 0i128 as u8;
        let expr4_0 = C::zero_reg(ctx);
        let expr5_0 = constructor_vec_extract_lane(ctx, expr2_0, pattern2_0, expr3_0, expr4_0)?;
        let expr6_0: Type = I64X2;
        let expr7_0: u8 = 0i128 as u8;
        let expr8_0 = C::zero_reg(ctx);
        let expr9_0 = constructor_vec_extract_lane(ctx, expr6_0, pattern3_0, expr7_0, expr8_0)?;
        let expr10_0 = constructor_mul_reg(ctx, expr1_0, expr5_0, expr9_0)?;
        let expr11_0: Type = I64;
        let expr12_0: Type = I64X2;
        let expr13_0: u8 = 1i128 as u8;
        let expr14_0 = C::zero_reg(ctx);
        let expr15_0 = constructor_vec_extract_lane(ctx, expr12_0, pattern2_0, expr13_0, expr14_0)?;
        let expr16_0: Type = I64X2;
        let expr17_0: u8 = 1i128 as u8;
        let expr18_0 = C::zero_reg(ctx);
        let expr19_0 = constructor_vec_extract_lane(ctx, expr16_0, pattern3_0, expr17_0, expr18_0)?;
        let expr20_0 = constructor_mul_reg(ctx, expr11_0, expr15_0, expr19_0)?;
        let expr21_0 = constructor_mov_to_vec128(ctx, expr0_0, expr10_0, expr20_0)?;
        return Some(expr21_0);
    }
    return None;
}

// Generated as internal constructor for term sqmul_impl.
pub fn constructor_sqmul_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == I32X4 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/lower.isle line 491.
        let expr0_0: Type = I32X4;
        let expr1_0: Type = I32X4;
        let expr2_0: Type = I32X4;
        let expr3_0 = constructor_vec_mul_impl(ctx, expr2_0, pattern2_0, pattern3_0)?;
        let expr4_0: Type = I32X4;
        let expr5_0: u8 = 17i128 as u8;
        let expr6_0: u8 = 17i128 as u8;
        let expr7_0 = constructor_vec_imm_bit_mask(ctx, expr4_0, expr5_0, expr6_0)?;
        let expr8_0 = constructor_vec_add(ctx, expr1_0, expr3_0, expr7_0)?;
        let expr9_0: u8 = 15i128 as u8;
        let expr10_0 = constructor_vec_ashr_imm(ctx, expr0_0, expr8_0, expr9_0)?;
        return Some(expr10_0);
    }
    if pattern0_0 == I64X2 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/lower.isle line 495.
        let expr0_0: Type = I64X2;
        let expr1_0: Type = I64X2;
        let expr2_0: Type = I64X2;
        let expr3_0 = constructor_vec_mul_impl(ctx, expr2_0, pattern2_0, pattern3_0)?;
        let expr4_0: Type = I64X2;
        let expr5_0: u8 = 33i128 as u8;
        let expr6_0: u8 = 33i128 as u8;
        let expr7_0 = constructor_vec_imm_bit_mask(ctx, expr4_0, expr5_0, expr6_0)?;
        let expr8_0 = constructor_vec_add(ctx, expr1_0, expr3_0, expr7_0)?;
        let expr9_0: u8 = 31i128 as u8;
        let expr10_0 = constructor_vec_ashr_imm(ctx, expr0_0, expr8_0, expr9_0)?;
        return Some(expr10_0);
    }
    return None;
}

// Generated as internal constructor for term zero_divisor_check_needed.
pub fn constructor_zero_divisor_check_needed<C: Context>(ctx: &mut C, arg0: Value) -> Option<bool> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::i64_from_value(ctx, pattern0_0) {
        let mut closure2 = || {
            let expr0_0 = constructor_i64_nonzero(ctx, pattern1_0)?;
            return Some(expr0_0);
        };
        if let Some(pattern2_0) = closure2() {
            // Rule at src/isa/s390x/lower.isle line 559.
            let expr0_0: bool = false;
            return Some(expr0_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(()) = C::allow_div_traps(ctx, pattern1_0) {
        // Rule at src/isa/s390x/lower.isle line 562.
        let expr0_0: bool = false;
        return Some(expr0_0);
    }
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/lower.isle line 563.
    let expr0_0: bool = true;
    return Some(expr0_0);
}

// Generated as internal constructor for term maybe_trap_if_zero_divisor.
pub fn constructor_maybe_trap_if_zero_divisor<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == true {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/lower.isle line 569.
        let expr0_0: i16 = 0i128 as i16;
        let expr1_0 = IntCC::Equal;
        let expr2_0 = C::intcc_as_cond(ctx, &expr1_0);
        let expr3_0 = C::trap_code_division_by_zero(ctx);
        let expr4_0 = constructor_icmps_simm16_and_trap(
            ctx, pattern2_0, pattern3_0, expr0_0, &expr2_0, &expr3_0,
        )?;
        return Some(expr4_0);
    }
    if pattern0_0 == false {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        // Rule at src/isa/s390x/lower.isle line 568.
        let expr0_0 = C::invalid_reg(ctx);
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term div_overflow_check_needed.
pub fn constructor_div_overflow_check_needed<C: Context>(ctx: &mut C, arg0: Value) -> Option<bool> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::i64_from_value(ctx, pattern0_0) {
        let mut closure2 = || {
            let expr0_0 = constructor_i64_not_neg1(ctx, pattern1_0)?;
            return Some(expr0_0);
        };
        if let Some(pattern2_0) = closure2() {
            // Rule at src/isa/s390x/lower.isle line 641.
            let expr0_0: bool = false;
            return Some(expr0_0);
        }
    }
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/lower.isle line 644.
    let expr0_0: bool = true;
    return Some(expr0_0);
}

// Generated as internal constructor for term maybe_trap_if_sdiv_overflow.
pub fn constructor_maybe_trap_if_sdiv_overflow<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Type,
    arg3: Reg,
    arg4: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == true {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        // Rule at src/isa/s390x/lower.isle line 657.
        let expr0_0 = constructor_int_max(ctx, pattern3_0)?;
        let expr1_0 = constructor_imm(ctx, pattern2_0, expr0_0)?;
        let expr2_0 = constructor_xor_reg(ctx, pattern2_0, expr1_0, pattern4_0)?;
        let expr3_0 = constructor_and_reg(ctx, pattern2_0, expr2_0, pattern5_0)?;
        let expr4_0: i16 = -1i128 as i16;
        let expr5_0 = IntCC::Equal;
        let expr6_0 = C::intcc_as_cond(ctx, &expr5_0);
        let expr7_0 = C::trap_code_integer_overflow(ctx);
        let expr8_0 = constructor_icmps_simm16_and_trap(
            ctx, pattern2_0, expr3_0, expr4_0, &expr6_0, &expr7_0,
        )?;
        return Some(expr8_0);
    }
    if pattern0_0 == false {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        // Rule at src/isa/s390x/lower.isle line 656.
        let expr0_0 = C::invalid_reg(ctx);
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term int_max.
pub fn constructor_int_max<C: Context>(ctx: &mut C, arg0: Type) -> Option<u64> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        // Rule at src/isa/s390x/lower.isle line 664.
        let expr0_0: u64 = 127i128 as u64;
        return Some(expr0_0);
    }
    if pattern0_0 == I16 {
        // Rule at src/isa/s390x/lower.isle line 665.
        let expr0_0: u64 = 32767i128 as u64;
        return Some(expr0_0);
    }
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/lower.isle line 666.
        let expr0_0: u64 = 2147483647i128 as u64;
        return Some(expr0_0);
    }
    if pattern0_0 == I64 {
        // Rule at src/isa/s390x/lower.isle line 667.
        let expr0_0: u64 = 9223372036854775807i128 as u64;
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term maybe_avoid_srem_overflow.
pub fn constructor_maybe_avoid_srem_overflow<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == true {
        let pattern2_0 = arg1;
        if pattern2_0 == I32 {
            let pattern4_0 = arg2;
            let pattern5_0 = arg3;
            // Rule at src/isa/s390x/lower.isle line 685.
            return Some(pattern4_0);
        }
        if pattern2_0 == I64 {
            let pattern4_0 = arg2;
            let pattern5_0 = arg3;
            // Rule at src/isa/s390x/lower.isle line 686.
            let expr0_0: Type = I64;
            let expr1_0: i16 = -1i128 as i16;
            let expr2_0 = constructor_icmps_simm16(ctx, expr0_0, pattern5_0, expr1_0)?;
            let expr3_0: Type = I64;
            let expr4_0 = IntCC::Equal;
            let expr5_0 = C::intcc_as_cond(ctx, &expr4_0);
            let expr6_0: i16 = 0i128 as i16;
            let expr7_0 = constructor_cmov_imm(ctx, expr3_0, &expr5_0, expr6_0, pattern4_0)?;
            let expr8_0 = constructor_with_flags_reg(ctx, &expr2_0, &expr7_0)?;
            return Some(expr8_0);
        }
    }
    if pattern0_0 == false {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/lower.isle line 684.
        return Some(pattern3_0);
    }
    return None;
}

// Generated as internal constructor for term bitrev_bits.
pub fn constructor_bitrev_bits<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: u64,
    arg2: Type,
    arg3: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/lower.isle line 1165.
        let expr0_0 = constructor_imm(ctx, pattern3_0, pattern1_0)?;
        let expr1_0 = constructor_ty_ext32(ctx, pattern3_0)?;
        let expr2_0 = constructor_lshl_imm(ctx, expr1_0, pattern4_0, pattern0_0)?;
        let expr3_0 = constructor_ty_ext32(ctx, pattern3_0)?;
        let expr4_0 = constructor_lshr_imm(ctx, expr3_0, pattern4_0, pattern0_0)?;
        let expr5_0 = constructor_and_reg(ctx, pattern3_0, expr2_0, expr0_0)?;
        let expr6_0 = constructor_not_reg(ctx, pattern3_0, expr0_0)?;
        let expr7_0 = constructor_and_reg(ctx, pattern3_0, expr4_0, expr6_0)?;
        let expr8_0 = constructor_or_reg(ctx, pattern3_0, expr5_0, expr7_0)?;
        return Some(expr8_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    if let Some(pattern3_0) = C::vr128_ty(ctx, pattern2_0) {
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/lower.isle line 1173.
        let expr0_0: Type = I64X2;
        let expr1_0 = constructor_vec_imm_splat(ctx, expr0_0, pattern1_0)?;
        let expr2_0: Type = I8X16;
        let expr3_0 = C::u8_as_u64(ctx, pattern0_0)?;
        let expr4_0 = constructor_vec_imm_splat(ctx, expr2_0, expr3_0)?;
        let expr5_0 = constructor_vec_lshl_by_bit(ctx, pattern4_0, expr4_0)?;
        let expr6_0 = constructor_vec_lshr_by_bit(ctx, pattern4_0, expr4_0)?;
        let expr7_0 = constructor_vec_select(ctx, pattern3_0, expr5_0, expr6_0, expr1_0)?;
        return Some(expr7_0);
    }
    return None;
}

// Generated as internal constructor for term bitrev_bytes.
pub fn constructor_bitrev_bytes<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/lower.isle line 1181.
        return Some(pattern2_0);
    }
    if pattern0_0 == I16 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/lower.isle line 1182.
        let expr0_0: Type = I32;
        let expr1_0: Type = I32;
        let expr2_0 = constructor_bswap_reg(ctx, expr1_0, pattern2_0)?;
        let expr3_0: u8 = 16i128 as u8;
        let expr4_0 = constructor_lshr_imm(ctx, expr0_0, expr2_0, expr3_0)?;
        return Some(expr4_0);
    }
    if pattern0_0 == I32 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/lower.isle line 1183.
        let expr0_0: Type = I32;
        let expr1_0 = constructor_bswap_reg(ctx, expr0_0, pattern2_0)?;
        return Some(expr1_0);
    }
    if pattern0_0 == I64 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/lower.isle line 1184.
        let expr0_0: Type = I64;
        let expr1_0 = constructor_bswap_reg(ctx, expr0_0, pattern2_0)?;
        return Some(expr1_0);
    }
    if pattern0_0 == I128 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/lower.isle line 1185.
        let expr0_0: Type = I128;
        let expr1_0: Type = I8X16;
        let expr2_0: u8 = 15i128 as u8;
        let expr3_0: u8 = 14i128 as u8;
        let expr4_0: u8 = 13i128 as u8;
        let expr5_0: u8 = 12i128 as u8;
        let expr6_0: u8 = 11i128 as u8;
        let expr7_0: u8 = 10i128 as u8;
        let expr8_0: u8 = 9i128 as u8;
        let expr9_0: u8 = 8i128 as u8;
        let expr10_0: u8 = 7i128 as u8;
        let expr11_0: u8 = 6i128 as u8;
        let expr12_0: u8 = 5i128 as u8;
        let expr13_0: u8 = 4i128 as u8;
        let expr14_0: u8 = 3i128 as u8;
        let expr15_0: u8 = 2i128 as u8;
        let expr16_0: u8 = 1i128 as u8;
        let expr17_0: u8 = 0i128 as u8;
        let expr18_0 = constructor_imm8x16(
            ctx, expr2_0, expr3_0, expr4_0, expr5_0, expr6_0, expr7_0, expr8_0, expr9_0, expr10_0,
            expr11_0, expr12_0, expr13_0, expr14_0, expr15_0, expr16_0, expr17_0,
        )?;
        let expr19_0 = constructor_vec_imm(ctx, expr1_0, expr18_0)?;
        let expr20_0 = constructor_vec_permute(ctx, expr0_0, pattern2_0, pattern2_0, expr19_0)?;
        return Some(expr20_0);
    }
    return None;
}

// Generated as internal constructor for term clz_offset.
pub fn constructor_clz_offset<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/lower.isle line 1202.
        let expr0_0: Type = I8;
        let expr1_0: i16 = -56i128 as i16;
        let expr2_0 = constructor_add_simm16(ctx, expr0_0, pattern2_0, expr1_0)?;
        return Some(expr2_0);
    }
    if pattern0_0 == I16 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/lower.isle line 1203.
        let expr0_0: Type = I16;
        let expr1_0: i16 = -48i128 as i16;
        let expr2_0 = constructor_add_simm16(ctx, expr0_0, pattern2_0, expr1_0)?;
        return Some(expr2_0);
    }
    if pattern0_0 == I32 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/lower.isle line 1204.
        let expr0_0: Type = I32;
        let expr1_0: i16 = -32i128 as i16;
        let expr2_0 = constructor_add_simm16(ctx, expr0_0, pattern2_0, expr1_0)?;
        return Some(expr2_0);
    }
    if pattern0_0 == I64 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/lower.isle line 1205.
        let expr0_0: Type = I64;
        let expr1_0 = constructor_copy_reg(ctx, expr0_0, pattern2_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term cls_offset.
pub fn constructor_cls_offset<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Option<Reg> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/lower.isle line 1233.
        let expr0_0: Type = I8;
        let expr1_0: i16 = -57i128 as i16;
        let expr2_0 = constructor_add_simm16(ctx, expr0_0, pattern2_0, expr1_0)?;
        return Some(expr2_0);
    }
    if pattern0_0 == I16 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/lower.isle line 1234.
        let expr0_0: Type = I16;
        let expr1_0: i16 = -49i128 as i16;
        let expr2_0 = constructor_add_simm16(ctx, expr0_0, pattern2_0, expr1_0)?;
        return Some(expr2_0);
    }
    if pattern0_0 == I32 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/lower.isle line 1235.
        let expr0_0: Type = I32;
        let expr1_0: i16 = -33i128 as i16;
        let expr2_0 = constructor_add_simm16(ctx, expr0_0, pattern2_0, expr1_0)?;
        return Some(expr2_0);
    }
    if pattern0_0 == I64 {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/lower.isle line 1236.
        let expr0_0: Type = I64;
        let expr1_0: i16 = -1i128 as i16;
        let expr2_0 = constructor_add_simm16(ctx, expr0_0, pattern2_0, expr1_0)?;
        return Some(expr2_0);
    }
    return None;
}

// Generated as internal constructor for term ctz_guardbit.
pub fn constructor_ctz_guardbit<C: Context>(ctx: &mut C, arg0: Type) -> Option<UImm16Shifted> {
    let pattern0_0 = arg0;
    if pattern0_0 == I8 {
        // Rule at src/isa/s390x/lower.isle line 1287.
        let expr0_0: u16 = 256i128 as u16;
        let expr1_0: u8 = 0i128 as u8;
        let expr2_0 = C::uimm16shifted(ctx, expr0_0, expr1_0);
        return Some(expr2_0);
    }
    if pattern0_0 == I16 {
        // Rule at src/isa/s390x/lower.isle line 1288.
        let expr0_0: u16 = 1i128 as u16;
        let expr1_0: u8 = 16i128 as u8;
        let expr2_0 = C::uimm16shifted(ctx, expr0_0, expr1_0);
        return Some(expr2_0);
    }
    if pattern0_0 == I32 {
        // Rule at src/isa/s390x/lower.isle line 1289.
        let expr0_0: u16 = 1i128 as u16;
        let expr1_0: u8 = 32i128 as u8;
        let expr2_0 = C::uimm16shifted(ctx, expr0_0, expr1_0);
        return Some(expr2_0);
    }
    return None;
}

// Generated as internal constructor for term vec_move_lane_and_insert.
pub fn constructor_vec_move_lane_and_insert<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
    arg4: u8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 64i128 as u32 {
            let pattern3_0 = arg1;
            let pattern4_0 = arg2;
            if pattern4_0 == 0i128 as u8 {
                let pattern6_0 = arg3;
                let pattern7_0 = arg4;
                // Rule at src/isa/s390x/lower.isle line 1825.
                let expr0_0: u8 = 1i128 as u8;
                let expr1_0 = constructor_vec_permute_dw_imm(
                    ctx, pattern0_0, pattern6_0, pattern7_0, pattern3_0, expr0_0,
                )?;
                return Some(expr1_0);
            }
            if pattern4_0 == 1i128 as u8 {
                let pattern6_0 = arg3;
                let pattern7_0 = arg4;
                // Rule at src/isa/s390x/lower.isle line 1827.
                let expr0_0: u8 = 0i128 as u8;
                let expr1_0 = constructor_vec_permute_dw_imm(
                    ctx, pattern0_0, pattern3_0, expr0_0, pattern6_0, pattern7_0,
                )?;
                return Some(expr1_0);
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    if pattern4_0 == pattern2_0 {
        // Rule at src/isa/s390x/lower.isle line 1831.
        let expr0_0 = C::lane_byte_mask(ctx, pattern0_0, pattern2_0);
        let expr1_0 = constructor_vec_imm_byte_mask(ctx, pattern0_0, expr0_0)?;
        let expr2_0 = constructor_vec_select(ctx, pattern0_0, pattern3_0, pattern1_0, expr1_0)?;
        return Some(expr2_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    let pattern4_0 = arg4;
    // Rule at src/isa/s390x/lower.isle line 1836.
    let expr0_0 = constructor_vec_replicate_lane(ctx, pattern0_0, pattern3_0, pattern4_0)?;
    let expr1_0 = C::lane_byte_mask(ctx, pattern0_0, pattern2_0);
    let expr2_0 = constructor_vec_imm_byte_mask(ctx, pattern0_0, expr1_0)?;
    let expr3_0 = constructor_vec_select(ctx, pattern0_0, expr0_0, pattern1_0, expr2_0)?;
    return Some(expr3_0);
}

// Generated as internal constructor for term vec_load_lane_little.
pub fn constructor_vec_load_lane_little<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(()) = C::vxrs_ext2_enabled(ctx, pattern0_0) {
        if let Some((pattern2_0, pattern2_1)) = C::multi_lane(ctx, pattern0_0) {
            if pattern2_0 == 16i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 1849.
                let expr0_0 = constructor_vec_load_lane_rev(
                    ctx, pattern0_0, pattern4_0, pattern5_0, pattern6_0,
                )?;
                return Some(expr0_0);
            }
            if pattern2_0 == 32i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 1852.
                let expr0_0 = constructor_vec_load_lane_rev(
                    ctx, pattern0_0, pattern4_0, pattern5_0, pattern6_0,
                )?;
                return Some(expr0_0);
            }
            if pattern2_0 == 64i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 1855.
                let expr0_0 = constructor_vec_load_lane_rev(
                    ctx, pattern0_0, pattern4_0, pattern5_0, pattern6_0,
                )?;
                return Some(expr0_0);
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(()) = C::vxrs_ext2_disabled(ctx, pattern0_0) {
        if let Some((pattern2_0, pattern2_1)) = C::multi_lane(ctx, pattern0_0) {
            if pattern2_0 == 16i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 1860.
                let expr0_0 = constructor_loadrev16(ctx, pattern5_0)?;
                let expr1_0 = C::zero_reg(ctx);
                let expr2_0 = constructor_vec_insert_lane(
                    ctx, pattern0_0, pattern4_0, expr0_0, pattern6_0, expr1_0,
                )?;
                return Some(expr2_0);
            }
            if pattern2_0 == 32i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 1863.
                let expr0_0 = constructor_loadrev32(ctx, pattern5_0)?;
                let expr1_0 = C::zero_reg(ctx);
                let expr2_0 = constructor_vec_insert_lane(
                    ctx, pattern0_0, pattern4_0, expr0_0, pattern6_0, expr1_0,
                )?;
                return Some(expr2_0);
            }
            if pattern2_0 == 64i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 1866.
                let expr0_0 = constructor_loadrev64(ctx, pattern5_0)?;
                let expr1_0 = C::zero_reg(ctx);
                let expr2_0 = constructor_vec_insert_lane(
                    ctx, pattern0_0, pattern4_0, expr0_0, pattern6_0, expr1_0,
                )?;
                return Some(expr2_0);
            }
        }
    }
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 8i128 as u32 {
            let pattern3_0 = arg1;
            let pattern4_0 = arg2;
            let pattern5_0 = arg3;
            // Rule at src/isa/s390x/lower.isle line 1845.
            let expr0_0 =
                constructor_vec_load_lane(ctx, pattern0_0, pattern3_0, pattern4_0, pattern5_0)?;
            return Some(expr0_0);
        }
    }
    return None;
}

// Generated as internal constructor for term vec_load_lane_little_undef.
pub fn constructor_vec_load_lane_little_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
    arg2: u8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(()) = C::vxrs_ext2_enabled(ctx, pattern0_0) {
        if let Some((pattern2_0, pattern2_1)) = C::multi_lane(ctx, pattern0_0) {
            if pattern2_0 == 16i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                // Rule at src/isa/s390x/lower.isle line 1878.
                let expr0_0 =
                    constructor_vec_load_lane_rev_undef(ctx, pattern0_0, pattern4_0, pattern5_0)?;
                return Some(expr0_0);
            }
            if pattern2_0 == 32i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                // Rule at src/isa/s390x/lower.isle line 1881.
                let expr0_0 =
                    constructor_vec_load_lane_rev_undef(ctx, pattern0_0, pattern4_0, pattern5_0)?;
                return Some(expr0_0);
            }
            if pattern2_0 == 64i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                // Rule at src/isa/s390x/lower.isle line 1884.
                let expr0_0 =
                    constructor_vec_load_lane_rev_undef(ctx, pattern0_0, pattern4_0, pattern5_0)?;
                return Some(expr0_0);
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(()) = C::vxrs_ext2_disabled(ctx, pattern0_0) {
        if let Some((pattern2_0, pattern2_1)) = C::multi_lane(ctx, pattern0_0) {
            if pattern2_0 == 16i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                // Rule at src/isa/s390x/lower.isle line 1889.
                let expr0_0 = constructor_loadrev16(ctx, pattern4_0)?;
                let expr1_0 = C::zero_reg(ctx);
                let expr2_0 = constructor_vec_insert_lane_undef(
                    ctx, pattern0_0, expr0_0, pattern5_0, expr1_0,
                )?;
                return Some(expr2_0);
            }
            if pattern2_0 == 32i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                // Rule at src/isa/s390x/lower.isle line 1892.
                let expr0_0 = constructor_loadrev32(ctx, pattern4_0)?;
                let expr1_0 = C::zero_reg(ctx);
                let expr2_0 = constructor_vec_insert_lane_undef(
                    ctx, pattern0_0, expr0_0, pattern5_0, expr1_0,
                )?;
                return Some(expr2_0);
            }
            if pattern2_0 == 64i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                // Rule at src/isa/s390x/lower.isle line 1895.
                let expr0_0 = constructor_loadrev64(ctx, pattern4_0)?;
                let expr1_0 = C::zero_reg(ctx);
                let expr2_0 = constructor_vec_insert_lane_undef(
                    ctx, pattern0_0, expr0_0, pattern5_0, expr1_0,
                )?;
                return Some(expr2_0);
            }
        }
    }
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 8i128 as u32 {
            let pattern3_0 = arg1;
            let pattern4_0 = arg2;
            // Rule at src/isa/s390x/lower.isle line 1874.
            let expr0_0 = constructor_vec_load_lane_undef(ctx, pattern0_0, pattern3_0, pattern4_0)?;
            return Some(expr0_0);
        }
    }
    return None;
}

// Generated as internal constructor for term vec_store_lane_little.
pub fn constructor_vec_store_lane_little<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    if let Some(()) = C::vxrs_ext2_enabled(ctx, pattern0_0) {
        if let Some((pattern2_0, pattern2_1)) = C::multi_lane(ctx, pattern0_0) {
            if pattern2_0 == 16i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 1936.
                let expr0_0 = constructor_vec_store_lane_rev(
                    ctx, pattern0_0, pattern4_0, pattern5_0, pattern6_0,
                )?;
                return Some(expr0_0);
            }
            if pattern2_0 == 32i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 1939.
                let expr0_0 = constructor_vec_store_lane_rev(
                    ctx, pattern0_0, pattern4_0, pattern5_0, pattern6_0,
                )?;
                return Some(expr0_0);
            }
            if pattern2_0 == 64i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 1942.
                let expr0_0 = constructor_vec_store_lane_rev(
                    ctx, pattern0_0, pattern4_0, pattern5_0, pattern6_0,
                )?;
                return Some(expr0_0);
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(()) = C::vxrs_ext2_disabled(ctx, pattern0_0) {
        if let Some((pattern2_0, pattern2_1)) = C::multi_lane(ctx, pattern0_0) {
            if pattern2_0 == 16i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 1947.
                let expr0_0 = C::zero_reg(ctx);
                let expr1_0 =
                    constructor_vec_extract_lane(ctx, pattern0_0, pattern4_0, pattern6_0, expr0_0)?;
                let expr2_0 = constructor_storerev16(ctx, expr1_0, pattern5_0)?;
                return Some(expr2_0);
            }
            if pattern2_0 == 32i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 1950.
                let expr0_0 = C::zero_reg(ctx);
                let expr1_0 =
                    constructor_vec_extract_lane(ctx, pattern0_0, pattern4_0, pattern6_0, expr0_0)?;
                let expr2_0 = constructor_storerev32(ctx, expr1_0, pattern5_0)?;
                return Some(expr2_0);
            }
            if pattern2_0 == 64i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 1953.
                let expr0_0 = C::zero_reg(ctx);
                let expr1_0 =
                    constructor_vec_extract_lane(ctx, pattern0_0, pattern4_0, pattern6_0, expr0_0)?;
                let expr2_0 = constructor_storerev64(ctx, expr1_0, pattern5_0)?;
                return Some(expr2_0);
            }
        }
    }
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 8i128 as u32 {
            let pattern3_0 = arg1;
            let pattern4_0 = arg2;
            let pattern5_0 = arg3;
            // Rule at src/isa/s390x/lower.isle line 1932.
            let expr0_0 =
                constructor_vec_store_lane(ctx, pattern0_0, pattern3_0, pattern4_0, pattern5_0)?;
            return Some(expr0_0);
        }
    }
    return None;
}

// Generated as internal constructor for term vec_load_replicate_little.
pub fn constructor_vec_load_replicate_little<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(()) = C::vxrs_ext2_enabled(ctx, pattern0_0) {
        if let Some((pattern2_0, pattern2_1)) = C::multi_lane(ctx, pattern0_0) {
            if pattern2_0 == 16i128 as u32 {
                let pattern4_0 = arg1;
                // Rule at src/isa/s390x/lower.isle line 1995.
                let expr0_0 = constructor_vec_load_replicate_rev(ctx, pattern0_0, pattern4_0)?;
                return Some(expr0_0);
            }
            if pattern2_0 == 32i128 as u32 {
                let pattern4_0 = arg1;
                // Rule at src/isa/s390x/lower.isle line 1998.
                let expr0_0 = constructor_vec_load_replicate_rev(ctx, pattern0_0, pattern4_0)?;
                return Some(expr0_0);
            }
            if pattern2_0 == 64i128 as u32 {
                let pattern4_0 = arg1;
                // Rule at src/isa/s390x/lower.isle line 2001.
                let expr0_0 = constructor_vec_load_replicate_rev(ctx, pattern0_0, pattern4_0)?;
                return Some(expr0_0);
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(()) = C::vxrs_ext2_disabled(ctx, pattern0_0) {
        if let Some((pattern2_0, pattern2_1)) = C::multi_lane(ctx, pattern0_0) {
            if pattern2_0 == 16i128 as u32 {
                let pattern4_0 = arg1;
                // Rule at src/isa/s390x/lower.isle line 2006.
                let expr0_0: u8 = 0i128 as u8;
                let expr1_0 =
                    constructor_vec_load_lane_little_undef(ctx, pattern0_0, pattern4_0, expr0_0)?;
                let expr2_0: u8 = 0i128 as u8;
                let expr3_0 = constructor_vec_replicate_lane(ctx, pattern0_0, expr1_0, expr2_0)?;
                return Some(expr3_0);
            }
            if pattern2_0 == 32i128 as u32 {
                let pattern4_0 = arg1;
                // Rule at src/isa/s390x/lower.isle line 2009.
                let expr0_0: u8 = 0i128 as u8;
                let expr1_0 =
                    constructor_vec_load_lane_little_undef(ctx, pattern0_0, pattern4_0, expr0_0)?;
                let expr2_0: u8 = 0i128 as u8;
                let expr3_0 = constructor_vec_replicate_lane(ctx, pattern0_0, expr1_0, expr2_0)?;
                return Some(expr3_0);
            }
            if pattern2_0 == 64i128 as u32 {
                let pattern4_0 = arg1;
                // Rule at src/isa/s390x/lower.isle line 2012.
                let expr0_0: u8 = 0i128 as u8;
                let expr1_0 =
                    constructor_vec_load_lane_little_undef(ctx, pattern0_0, pattern4_0, expr0_0)?;
                let expr2_0: u8 = 0i128 as u8;
                let expr3_0 = constructor_vec_replicate_lane(ctx, pattern0_0, expr1_0, expr2_0)?;
                return Some(expr3_0);
            }
        }
    }
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 8i128 as u32 {
            let pattern3_0 = arg1;
            // Rule at src/isa/s390x/lower.isle line 1991.
            let expr0_0 = constructor_vec_load_replicate(ctx, pattern0_0, pattern3_0)?;
            return Some(expr0_0);
        }
    }
    return None;
}

// Generated as internal constructor for term vec_move_lane_and_zero.
pub fn constructor_vec_move_lane_and_zero<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u8,
    arg2: Reg,
    arg3: u8,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 64i128 as u32 {
            let pattern3_0 = arg1;
            if pattern3_0 == 0i128 as u8 {
                let pattern5_0 = arg2;
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 2052.
                let expr0_0: u128 = 0i128 as u128;
                let expr1_0 = constructor_vec_imm(ctx, pattern0_0, expr0_0)?;
                let expr2_0: u8 = 0i128 as u8;
                let expr3_0 = constructor_vec_permute_dw_imm(
                    ctx, pattern0_0, pattern5_0, pattern6_0, expr1_0, expr2_0,
                )?;
                return Some(expr3_0);
            }
            if pattern3_0 == 1i128 as u8 {
                let pattern5_0 = arg2;
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 2054.
                let expr0_0: u128 = 0i128 as u128;
                let expr1_0 = constructor_vec_imm(ctx, pattern0_0, expr0_0)?;
                let expr2_0: u8 = 0i128 as u8;
                let expr3_0 = constructor_vec_permute_dw_imm(
                    ctx, pattern0_0, expr1_0, expr2_0, pattern5_0, pattern6_0,
                )?;
                return Some(expr3_0);
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    if pattern3_0 == pattern1_0 {
        // Rule at src/isa/s390x/lower.isle line 2058.
        let expr0_0 = C::lane_byte_mask(ctx, pattern0_0, pattern1_0);
        let expr1_0 = constructor_vec_imm_byte_mask(ctx, pattern0_0, expr0_0)?;
        let expr2_0 = constructor_vec_and(ctx, pattern0_0, pattern2_0, expr1_0)?;
        return Some(expr2_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/lower.isle line 2063.
    let expr0_0 = constructor_vec_replicate_lane(ctx, pattern0_0, pattern2_0, pattern3_0)?;
    let expr1_0 = C::lane_byte_mask(ctx, pattern0_0, pattern1_0);
    let expr2_0 = constructor_vec_imm_byte_mask(ctx, pattern0_0, expr1_0)?;
    let expr3_0 = constructor_vec_and(ctx, pattern0_0, expr0_0, expr2_0)?;
    return Some(expr3_0);
}

// Generated as internal constructor for term lib_call_tls_get_offset.
pub fn constructor_lib_call_tls_get_offset<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &SymbolReloc,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/lower.isle line 2299.
    let expr0_0: Type = I64;
    let expr1_0 = C::temp_writable_reg(ctx, expr0_0);
    let expr2_0 = C::lib_call_info_tls_get_offset(ctx, expr1_0, pattern0_0, pattern1_0, pattern2_0);
    let expr3_0 = C::lib_accumulate_outgoing_args_size(ctx, &expr2_0);
    let expr4_0 = constructor_lib_call(ctx, &expr2_0)?;
    let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
    let expr6_0 = C::writable_reg_to_reg(ctx, expr1_0);
    return Some(expr6_0);
}

// Generated as internal constructor for term thread_pointer.
pub fn constructor_thread_pointer<C: Context>(ctx: &mut C) -> Option<Reg> {
    // Rule at src/isa/s390x/lower.isle line 2308.
    let expr0_0: Type = I64;
    let expr1_0: u8 = 0i128 as u8;
    let expr2_0 = constructor_load_ar(ctx, expr1_0)?;
    let expr3_0: u8 = 32i128 as u8;
    let expr4_0 = constructor_lshl_imm(ctx, expr0_0, expr2_0, expr3_0)?;
    let expr5_0: u8 = 1i128 as u8;
    let expr6_0 = constructor_insert_ar(ctx, expr4_0, expr5_0)?;
    return Some(expr6_0);
}

// Generated as internal constructor for term vec_load_full_rev.
pub fn constructor_vec_load_full_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(()) = C::vxrs_ext2_enabled(ctx, pattern0_0) {
        if let Some(pattern2_0) = C::vr128_ty(ctx, pattern0_0) {
            let pattern3_0 = arg1;
            let pattern4_0 = arg2;
            let pattern5_0 = arg3;
            // Rule at src/isa/s390x/lower.isle line 2391.
            let expr0_0 = constructor_lower_address(ctx, pattern3_0, pattern4_0, pattern5_0)?;
            let expr1_0 = constructor_vec_loadrev(ctx, pattern2_0, &expr0_0)?;
            return Some(expr1_0);
        }
    }
    let pattern0_0 = arg0;
    if let Some(()) = C::vxrs_ext2_disabled(ctx, pattern0_0) {
        if let Some(pattern2_0) = C::vr128_ty(ctx, pattern0_0) {
            let pattern3_0 = arg1;
            let pattern4_0 = arg2;
            let pattern5_0 = arg3;
            // Rule at src/isa/s390x/lower.isle line 2395.
            let expr0_0: u8 = 0i128 as u8;
            let expr1_0 =
                constructor_lower_address_bias(ctx, pattern3_0, pattern4_0, pattern5_0, expr0_0)?;
            let expr2_0: u8 = 8i128 as u8;
            let expr3_0 =
                constructor_lower_address_bias(ctx, pattern3_0, pattern4_0, pattern5_0, expr2_0)?;
            let expr4_0 = constructor_loadrev64(ctx, &expr1_0)?;
            let expr5_0 = constructor_loadrev64(ctx, &expr3_0)?;
            let expr6_0 = constructor_mov_to_vec128(ctx, pattern2_0, expr5_0, expr4_0)?;
            return Some(expr6_0);
        }
    }
    return None;
}

// Generated as internal constructor for term vec_load_byte_rev.
pub fn constructor_vec_load_byte_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(()) = C::vxrs_ext2_enabled(ctx, pattern0_0) {
        if let Some((pattern2_0, pattern2_1)) = C::multi_lane(ctx, pattern0_0) {
            if pattern2_0 == 16i128 as u32 {
                if pattern2_1 == 8i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    // Rule at src/isa/s390x/lower.isle line 2421.
                    let expr0_0 =
                        constructor_lower_address(ctx, pattern5_0, pattern6_0, pattern7_0)?;
                    let expr1_0 = constructor_vec_load_byte16rev(ctx, pattern0_0, &expr0_0)?;
                    return Some(expr1_0);
                }
            }
            if pattern2_0 == 32i128 as u32 {
                if pattern2_1 == 4i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    // Rule at src/isa/s390x/lower.isle line 2418.
                    let expr0_0 =
                        constructor_lower_address(ctx, pattern5_0, pattern6_0, pattern7_0)?;
                    let expr1_0 = constructor_vec_load_byte32rev(ctx, pattern0_0, &expr0_0)?;
                    return Some(expr1_0);
                }
            }
            if pattern2_0 == 64i128 as u32 {
                if pattern2_1 == 2i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    // Rule at src/isa/s390x/lower.isle line 2415.
                    let expr0_0 =
                        constructor_lower_address(ctx, pattern5_0, pattern6_0, pattern7_0)?;
                    let expr1_0 = constructor_vec_load_byte64rev(ctx, pattern0_0, &expr0_0)?;
                    return Some(expr1_0);
                }
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(()) = C::vxrs_ext2_disabled(ctx, pattern0_0) {
        if let Some((pattern2_0, pattern2_1)) = C::multi_lane(ctx, pattern0_0) {
            if pattern2_0 == 16i128 as u32 {
                if pattern2_1 == 8i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    // Rule at src/isa/s390x/lower.isle line 2432.
                    let expr0_0 = constructor_vec_load_full_rev(
                        ctx, pattern0_0, pattern5_0, pattern6_0, pattern7_0,
                    )?;
                    let expr1_0 = constructor_vec_elt_rev(ctx, pattern0_0, expr0_0)?;
                    return Some(expr1_0);
                }
            }
            if pattern2_0 == 32i128 as u32 {
                if pattern2_1 == 4i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    // Rule at src/isa/s390x/lower.isle line 2429.
                    let expr0_0 = constructor_vec_load_full_rev(
                        ctx, pattern0_0, pattern5_0, pattern6_0, pattern7_0,
                    )?;
                    let expr1_0 = constructor_vec_elt_rev(ctx, pattern0_0, expr0_0)?;
                    return Some(expr1_0);
                }
            }
            if pattern2_0 == 64i128 as u32 {
                if pattern2_1 == 2i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    // Rule at src/isa/s390x/lower.isle line 2426.
                    let expr0_0 = constructor_vec_load_full_rev(
                        ctx, pattern0_0, pattern5_0, pattern6_0, pattern7_0,
                    )?;
                    let expr1_0 = constructor_vec_elt_rev(ctx, pattern0_0, expr0_0)?;
                    return Some(expr1_0);
                }
            }
        }
    }
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 8i128 as u32 {
            if pattern1_1 == 16i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 2411.
                let expr0_0 = constructor_lower_address(ctx, pattern4_0, pattern5_0, pattern6_0)?;
                let expr1_0 = constructor_vec_load(ctx, pattern0_0, &expr0_0)?;
                return Some(expr1_0);
            }
        }
    }
    let pattern0_0 = arg0;
    if pattern0_0 == I128 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/lower.isle line 2407.
        let expr0_0: Type = I128;
        let expr1_0 =
            constructor_vec_load_full_rev(ctx, expr0_0, pattern2_0, pattern3_0, pattern4_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term vec_load_elt_rev.
pub fn constructor_vec_load_elt_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some(()) = C::vxrs_ext2_enabled(ctx, pattern0_0) {
        if let Some((pattern2_0, pattern2_1)) = C::multi_lane(ctx, pattern0_0) {
            if pattern2_0 == 16i128 as u32 {
                if pattern2_1 == 8i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    // Rule at src/isa/s390x/lower.isle line 2456.
                    let expr0_0 =
                        constructor_lower_address(ctx, pattern5_0, pattern6_0, pattern7_0)?;
                    let expr1_0 = constructor_vec_load_elt16rev(ctx, pattern0_0, &expr0_0)?;
                    return Some(expr1_0);
                }
            }
            if pattern2_0 == 32i128 as u32 {
                if pattern2_1 == 4i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    // Rule at src/isa/s390x/lower.isle line 2453.
                    let expr0_0 =
                        constructor_lower_address(ctx, pattern5_0, pattern6_0, pattern7_0)?;
                    let expr1_0 = constructor_vec_load_elt32rev(ctx, pattern0_0, &expr0_0)?;
                    return Some(expr1_0);
                }
            }
            if pattern2_0 == 64i128 as u32 {
                if pattern2_1 == 2i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    // Rule at src/isa/s390x/lower.isle line 2450.
                    let expr0_0 =
                        constructor_lower_address(ctx, pattern5_0, pattern6_0, pattern7_0)?;
                    let expr1_0 = constructor_vec_load_elt64rev(ctx, pattern0_0, &expr0_0)?;
                    return Some(expr1_0);
                }
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(()) = C::vxrs_ext2_disabled(ctx, pattern0_0) {
        if let Some((pattern2_0, pattern2_1)) = C::multi_lane(ctx, pattern0_0) {
            if pattern2_0 == 16i128 as u32 {
                if pattern2_1 == 8i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    // Rule at src/isa/s390x/lower.isle line 2467.
                    let expr0_0 =
                        constructor_lower_address(ctx, pattern5_0, pattern6_0, pattern7_0)?;
                    let expr1_0 = constructor_vec_load(ctx, pattern0_0, &expr0_0)?;
                    let expr2_0 = constructor_vec_elt_rev(ctx, pattern0_0, expr1_0)?;
                    return Some(expr2_0);
                }
            }
            if pattern2_0 == 32i128 as u32 {
                if pattern2_1 == 4i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    // Rule at src/isa/s390x/lower.isle line 2464.
                    let expr0_0 =
                        constructor_lower_address(ctx, pattern5_0, pattern6_0, pattern7_0)?;
                    let expr1_0 = constructor_vec_load(ctx, pattern0_0, &expr0_0)?;
                    let expr2_0 = constructor_vec_elt_rev(ctx, pattern0_0, expr1_0)?;
                    return Some(expr2_0);
                }
            }
            if pattern2_0 == 64i128 as u32 {
                if pattern2_1 == 2i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    // Rule at src/isa/s390x/lower.isle line 2461.
                    let expr0_0 =
                        constructor_lower_address(ctx, pattern5_0, pattern6_0, pattern7_0)?;
                    let expr1_0 = constructor_vec_load(ctx, pattern0_0, &expr0_0)?;
                    let expr2_0 = constructor_vec_elt_rev(ctx, pattern0_0, expr1_0)?;
                    return Some(expr2_0);
                }
            }
        }
    }
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 8i128 as u32 {
            if pattern1_1 == 16i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 2446.
                let expr0_0 = constructor_vec_load_full_rev(
                    ctx, pattern0_0, pattern4_0, pattern5_0, pattern6_0,
                )?;
                return Some(expr0_0);
            }
        }
    }
    let pattern0_0 = arg0;
    if pattern0_0 == I128 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/lower.isle line 2442.
        let expr0_0: Type = I128;
        let expr1_0 = constructor_lower_address(ctx, pattern2_0, pattern3_0, pattern4_0)?;
        let expr2_0 = constructor_vec_load(ctx, expr0_0, &expr1_0)?;
        return Some(expr2_0);
    }
    return None;
}

// Generated as internal constructor for term load_v64.
pub fn constructor_load_v64<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 8i128 as u32 {
            if pattern1_1 == 16i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                let pattern6_0 = arg3;
                let mut closure7 = || {
                    let expr0_0 = C::lane_order(ctx)?;
                    return Some(expr0_0);
                };
                if let Some(pattern7_0) = closure7() {
                    if let &LaneOrder::LittleEndian = &pattern7_0 {
                        // Rule at src/isa/s390x/lower.isle line 2618.
                        let expr0_0: Type = I64X2;
                        let expr1_0 =
                            constructor_lower_address(ctx, pattern4_0, pattern5_0, pattern6_0)?;
                        let expr2_0: u8 = 0i128 as u8;
                        let expr3_0 = constructor_vec_load_lane_little_undef(
                            ctx, expr0_0, &expr1_0, expr2_0,
                        )?;
                        return Some(expr3_0);
                    }
                }
            }
        }
        if pattern1_0 == 16i128 as u32 {
            if pattern1_1 == 8i128 as u32 {
                let pattern4_0 = arg1;
                if let Some(()) = C::bigendian(ctx, pattern4_0) {
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    let mut closure8 = || {
                        let expr0_0 = C::lane_order(ctx)?;
                        return Some(expr0_0);
                    };
                    if let Some(pattern8_0) = closure8() {
                        if let &LaneOrder::LittleEndian = &pattern8_0 {
                            // Rule at src/isa/s390x/lower.isle line 2629.
                            let expr0_0: Type = I16X8;
                            let expr1_0: Type = I64X2;
                            let expr2_0 =
                                constructor_lower_address(ctx, pattern4_0, pattern6_0, pattern7_0)?;
                            let expr3_0: u8 = 0i128 as u8;
                            let expr4_0 = constructor_vec_load_lane_little_undef(
                                ctx, expr1_0, &expr2_0, expr3_0,
                            )?;
                            let expr5_0: u8 = 8i128 as u8;
                            let expr6_0 = constructor_vec_rot_imm(ctx, expr0_0, expr4_0, expr5_0)?;
                            return Some(expr6_0);
                        }
                    }
                }
            }
        }
        if pattern1_0 == 32i128 as u32 {
            if pattern1_1 == 4i128 as u32 {
                let pattern4_0 = arg1;
                if let Some(()) = C::bigendian(ctx, pattern4_0) {
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    let mut closure8 = || {
                        let expr0_0 = C::lane_order(ctx)?;
                        return Some(expr0_0);
                    };
                    if let Some(pattern8_0) = closure8() {
                        if let &LaneOrder::LittleEndian = &pattern8_0 {
                            // Rule at src/isa/s390x/lower.isle line 2641.
                            let expr0_0: Type = I64X2;
                            let expr1_0: Type = I64X2;
                            let expr2_0 =
                                constructor_lower_address(ctx, pattern4_0, pattern6_0, pattern7_0)?;
                            let expr3_0: u8 = 0i128 as u8;
                            let expr4_0 =
                                constructor_vec_load_lane_undef(ctx, expr1_0, &expr2_0, expr3_0)?;
                            let expr5_0: u8 = 32i128 as u8;
                            let expr6_0 = constructor_vec_rot_imm(ctx, expr0_0, expr4_0, expr5_0)?;
                            return Some(expr6_0);
                        }
                    }
                }
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 8i128 as u32 {
            if pattern1_1 == 16i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                let pattern6_0 = arg3;
                let mut closure7 = || {
                    let expr0_0 = C::lane_order(ctx)?;
                    return Some(expr0_0);
                };
                if let Some(pattern7_0) = closure7() {
                    if let &LaneOrder::BigEndian = &pattern7_0 {
                        // Rule at src/isa/s390x/lower.isle line 2613.
                        let expr0_0: Type = I64X2;
                        let expr1_0 =
                            constructor_lower_address(ctx, pattern4_0, pattern5_0, pattern6_0)?;
                        let expr2_0: u8 = 0i128 as u8;
                        let expr3_0 =
                            constructor_vec_load_lane_undef(ctx, expr0_0, &expr1_0, expr2_0)?;
                        return Some(expr3_0);
                    }
                }
            }
        }
        if pattern1_0 == 16i128 as u32 {
            if pattern1_1 == 8i128 as u32 {
                let pattern4_0 = arg1;
                if let Some(()) = C::littleendian(ctx, pattern4_0) {
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    let mut closure8 = || {
                        let expr0_0 = C::lane_order(ctx)?;
                        return Some(expr0_0);
                    };
                    if let Some(pattern8_0) = closure8() {
                        if let &LaneOrder::BigEndian = &pattern8_0 {
                            // Rule at src/isa/s390x/lower.isle line 2623.
                            let expr0_0: Type = I16X8;
                            let expr1_0: Type = I64X2;
                            let expr2_0 =
                                constructor_lower_address(ctx, pattern4_0, pattern6_0, pattern7_0)?;
                            let expr3_0: u8 = 0i128 as u8;
                            let expr4_0 =
                                constructor_vec_load_lane_undef(ctx, expr1_0, &expr2_0, expr3_0)?;
                            let expr5_0: u8 = 8i128 as u8;
                            let expr6_0 = constructor_vec_rot_imm(ctx, expr0_0, expr4_0, expr5_0)?;
                            return Some(expr6_0);
                        }
                    }
                }
            }
        }
        if pattern1_0 == 32i128 as u32 {
            if pattern1_1 == 4i128 as u32 {
                let pattern4_0 = arg1;
                if let Some(()) = C::littleendian(ctx, pattern4_0) {
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    let mut closure8 = || {
                        let expr0_0 = C::lane_order(ctx)?;
                        return Some(expr0_0);
                    };
                    if let Some(pattern8_0) = closure8() {
                        if let &LaneOrder::BigEndian = &pattern8_0 {
                            // Rule at src/isa/s390x/lower.isle line 2635.
                            let expr0_0: Type = I64X2;
                            let expr1_0: Type = I64X2;
                            let expr2_0 =
                                constructor_lower_address(ctx, pattern4_0, pattern6_0, pattern7_0)?;
                            let expr3_0: u8 = 0i128 as u8;
                            let expr4_0 = constructor_vec_load_lane_little_undef(
                                ctx, expr1_0, &expr2_0, expr3_0,
                            )?;
                            let expr5_0: u8 = 32i128 as u8;
                            let expr6_0 = constructor_vec_rot_imm(ctx, expr0_0, expr4_0, expr5_0)?;
                            return Some(expr6_0);
                        }
                    }
                }
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(()) = C::bigendian(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let mut closure5 = || {
            let expr0_0 = C::lane_order(ctx)?;
            return Some(expr0_0);
        };
        if let Some(pattern5_0) = closure5() {
            if let &LaneOrder::BigEndian = &pattern5_0 {
                // Rule at src/isa/s390x/lower.isle line 2603.
                let expr0_0: Type = I64X2;
                let expr1_0 = constructor_lower_address(ctx, pattern1_0, pattern3_0, pattern4_0)?;
                let expr2_0: u8 = 0i128 as u8;
                let expr3_0 = constructor_vec_load_lane_undef(ctx, expr0_0, &expr1_0, expr2_0)?;
                return Some(expr3_0);
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(()) = C::littleendian(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let mut closure5 = || {
            let expr0_0 = C::lane_order(ctx)?;
            return Some(expr0_0);
        };
        if let Some(pattern5_0) = closure5() {
            if let &LaneOrder::LittleEndian = &pattern5_0 {
                // Rule at src/isa/s390x/lower.isle line 2608.
                let expr0_0: Type = I64X2;
                let expr1_0 = constructor_lower_address(ctx, pattern1_0, pattern3_0, pattern4_0)?;
                let expr2_0: u8 = 0i128 as u8;
                let expr3_0 =
                    constructor_vec_load_lane_little_undef(ctx, expr0_0, &expr1_0, expr2_0)?;
                return Some(expr3_0);
            }
        }
    }
    return None;
}

// Generated as internal constructor for term vec_store_full_rev.
pub fn constructor_vec_store_full_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: MemFlags,
    arg3: Value,
    arg4: Offset32,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    if let Some(()) = C::vxrs_ext2_enabled(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        // Rule at src/isa/s390x/lower.isle line 2725.
        let expr0_0 = constructor_lower_address(ctx, pattern3_0, pattern4_0, pattern5_0)?;
        let expr1_0 = constructor_vec_storerev(ctx, pattern2_0, &expr0_0)?;
        return Some(expr1_0);
    }
    let pattern0_0 = arg0;
    if let Some(()) = C::vxrs_ext2_disabled(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        // Rule at src/isa/s390x/lower.isle line 2729.
        let expr0_0: u8 = 0i128 as u8;
        let expr1_0 =
            constructor_lower_address_bias(ctx, pattern3_0, pattern4_0, pattern5_0, expr0_0)?;
        let expr2_0: u8 = 8i128 as u8;
        let expr3_0 =
            constructor_lower_address_bias(ctx, pattern3_0, pattern4_0, pattern5_0, expr2_0)?;
        let expr4_0: Type = I64X2;
        let expr5_0: u8 = 1i128 as u8;
        let expr6_0 = C::zero_reg(ctx);
        let expr7_0 = constructor_vec_extract_lane(ctx, expr4_0, pattern2_0, expr5_0, expr6_0)?;
        let expr8_0: Type = I64X2;
        let expr9_0: u8 = 0i128 as u8;
        let expr10_0 = C::zero_reg(ctx);
        let expr11_0 = constructor_vec_extract_lane(ctx, expr8_0, pattern2_0, expr9_0, expr10_0)?;
        let expr12_0 = constructor_storerev64(ctx, expr7_0, &expr1_0)?;
        let expr13_0 = constructor_storerev64(ctx, expr11_0, &expr3_0)?;
        let expr14_0 = constructor_side_effect_concat(ctx, &expr12_0, &expr13_0)?;
        return Some(expr14_0);
    }
    return None;
}

// Generated as internal constructor for term vec_store_byte_rev.
pub fn constructor_vec_store_byte_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: MemFlags,
    arg3: Value,
    arg4: Offset32,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    if let Some(()) = C::vxrs_ext2_enabled(ctx, pattern0_0) {
        if let Some((pattern2_0, pattern2_1)) = C::multi_lane(ctx, pattern0_0) {
            if pattern2_0 == 16i128 as u32 {
                if pattern2_1 == 8i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    let pattern8_0 = arg4;
                    // Rule at src/isa/s390x/lower.isle line 2756.
                    let expr0_0 =
                        constructor_lower_address(ctx, pattern6_0, pattern7_0, pattern8_0)?;
                    let expr1_0 = constructor_vec_store_byte16rev(ctx, pattern5_0, &expr0_0)?;
                    return Some(expr1_0);
                }
            }
            if pattern2_0 == 32i128 as u32 {
                if pattern2_1 == 4i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    let pattern8_0 = arg4;
                    // Rule at src/isa/s390x/lower.isle line 2753.
                    let expr0_0 =
                        constructor_lower_address(ctx, pattern6_0, pattern7_0, pattern8_0)?;
                    let expr1_0 = constructor_vec_store_byte32rev(ctx, pattern5_0, &expr0_0)?;
                    return Some(expr1_0);
                }
            }
            if pattern2_0 == 64i128 as u32 {
                if pattern2_1 == 2i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    let pattern8_0 = arg4;
                    // Rule at src/isa/s390x/lower.isle line 2750.
                    let expr0_0 =
                        constructor_lower_address(ctx, pattern6_0, pattern7_0, pattern8_0)?;
                    let expr1_0 = constructor_vec_store_byte64rev(ctx, pattern5_0, &expr0_0)?;
                    return Some(expr1_0);
                }
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(()) = C::vxrs_ext2_disabled(ctx, pattern0_0) {
        if let Some((pattern2_0, pattern2_1)) = C::multi_lane(ctx, pattern0_0) {
            if pattern2_0 == 16i128 as u32 {
                if pattern2_1 == 8i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    let pattern8_0 = arg4;
                    // Rule at src/isa/s390x/lower.isle line 2767.
                    let expr0_0 = constructor_vec_elt_rev(ctx, pattern0_0, pattern5_0)?;
                    let expr1_0 = constructor_vec_store_full_rev(
                        ctx, pattern0_0, expr0_0, pattern6_0, pattern7_0, pattern8_0,
                    )?;
                    return Some(expr1_0);
                }
            }
            if pattern2_0 == 32i128 as u32 {
                if pattern2_1 == 4i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    let pattern8_0 = arg4;
                    // Rule at src/isa/s390x/lower.isle line 2764.
                    let expr0_0 = constructor_vec_elt_rev(ctx, pattern0_0, pattern5_0)?;
                    let expr1_0 = constructor_vec_store_full_rev(
                        ctx, pattern0_0, expr0_0, pattern6_0, pattern7_0, pattern8_0,
                    )?;
                    return Some(expr1_0);
                }
            }
            if pattern2_0 == 64i128 as u32 {
                if pattern2_1 == 2i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    let pattern8_0 = arg4;
                    // Rule at src/isa/s390x/lower.isle line 2761.
                    let expr0_0 = constructor_vec_elt_rev(ctx, pattern0_0, pattern5_0)?;
                    let expr1_0 = constructor_vec_store_full_rev(
                        ctx, pattern0_0, expr0_0, pattern6_0, pattern7_0, pattern8_0,
                    )?;
                    return Some(expr1_0);
                }
            }
        }
    }
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 8i128 as u32 {
            if pattern1_1 == 16i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                let pattern6_0 = arg3;
                let pattern7_0 = arg4;
                // Rule at src/isa/s390x/lower.isle line 2746.
                let expr0_0 = constructor_lower_address(ctx, pattern5_0, pattern6_0, pattern7_0)?;
                let expr1_0 = constructor_vec_store(ctx, pattern4_0, &expr0_0)?;
                return Some(expr1_0);
            }
        }
    }
    let pattern0_0 = arg0;
    if pattern0_0 == I128 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        // Rule at src/isa/s390x/lower.isle line 2742.
        let expr0_0: Type = I128;
        let expr1_0 = constructor_vec_store_full_rev(
            ctx, expr0_0, pattern2_0, pattern3_0, pattern4_0, pattern5_0,
        )?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term vec_store_elt_rev.
pub fn constructor_vec_store_elt_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: MemFlags,
    arg3: Value,
    arg4: Offset32,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    if let Some(()) = C::vxrs_ext2_enabled(ctx, pattern0_0) {
        if let Some((pattern2_0, pattern2_1)) = C::multi_lane(ctx, pattern0_0) {
            if pattern2_0 == 16i128 as u32 {
                if pattern2_1 == 8i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    let pattern8_0 = arg4;
                    // Rule at src/isa/s390x/lower.isle line 2790.
                    let expr0_0 =
                        constructor_lower_address(ctx, pattern6_0, pattern7_0, pattern8_0)?;
                    let expr1_0 = constructor_vec_store_elt16rev(ctx, pattern5_0, &expr0_0)?;
                    return Some(expr1_0);
                }
            }
            if pattern2_0 == 32i128 as u32 {
                if pattern2_1 == 4i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    let pattern8_0 = arg4;
                    // Rule at src/isa/s390x/lower.isle line 2787.
                    let expr0_0 =
                        constructor_lower_address(ctx, pattern6_0, pattern7_0, pattern8_0)?;
                    let expr1_0 = constructor_vec_store_elt32rev(ctx, pattern5_0, &expr0_0)?;
                    return Some(expr1_0);
                }
            }
            if pattern2_0 == 64i128 as u32 {
                if pattern2_1 == 2i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    let pattern8_0 = arg4;
                    // Rule at src/isa/s390x/lower.isle line 2784.
                    let expr0_0 =
                        constructor_lower_address(ctx, pattern6_0, pattern7_0, pattern8_0)?;
                    let expr1_0 = constructor_vec_store_elt64rev(ctx, pattern5_0, &expr0_0)?;
                    return Some(expr1_0);
                }
            }
        }
    }
    let pattern0_0 = arg0;
    if let Some(()) = C::vxrs_ext2_disabled(ctx, pattern0_0) {
        if let Some((pattern2_0, pattern2_1)) = C::multi_lane(ctx, pattern0_0) {
            if pattern2_0 == 16i128 as u32 {
                if pattern2_1 == 8i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    let pattern8_0 = arg4;
                    // Rule at src/isa/s390x/lower.isle line 2801.
                    let expr0_0 = constructor_vec_elt_rev(ctx, pattern0_0, pattern5_0)?;
                    let expr1_0 =
                        constructor_lower_address(ctx, pattern6_0, pattern7_0, pattern8_0)?;
                    let expr2_0 = constructor_vec_store(ctx, expr0_0, &expr1_0)?;
                    return Some(expr2_0);
                }
            }
            if pattern2_0 == 32i128 as u32 {
                if pattern2_1 == 4i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    let pattern8_0 = arg4;
                    // Rule at src/isa/s390x/lower.isle line 2798.
                    let expr0_0 = constructor_vec_elt_rev(ctx, pattern0_0, pattern5_0)?;
                    let expr1_0 =
                        constructor_lower_address(ctx, pattern6_0, pattern7_0, pattern8_0)?;
                    let expr2_0 = constructor_vec_store(ctx, expr0_0, &expr1_0)?;
                    return Some(expr2_0);
                }
            }
            if pattern2_0 == 64i128 as u32 {
                if pattern2_1 == 2i128 as u32 {
                    let pattern5_0 = arg1;
                    let pattern6_0 = arg2;
                    let pattern7_0 = arg3;
                    let pattern8_0 = arg4;
                    // Rule at src/isa/s390x/lower.isle line 2795.
                    let expr0_0 = constructor_vec_elt_rev(ctx, pattern0_0, pattern5_0)?;
                    let expr1_0 =
                        constructor_lower_address(ctx, pattern6_0, pattern7_0, pattern8_0)?;
                    let expr2_0 = constructor_vec_store(ctx, expr0_0, &expr1_0)?;
                    return Some(expr2_0);
                }
            }
        }
    }
    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
        if pattern1_0 == 8i128 as u32 {
            if pattern1_1 == 16i128 as u32 {
                let pattern4_0 = arg1;
                let pattern5_0 = arg2;
                let pattern6_0 = arg3;
                let pattern7_0 = arg4;
                // Rule at src/isa/s390x/lower.isle line 2780.
                let expr0_0 = constructor_vec_store_full_rev(
                    ctx, pattern0_0, pattern4_0, pattern5_0, pattern6_0, pattern7_0,
                )?;
                return Some(expr0_0);
            }
        }
    }
    let pattern0_0 = arg0;
    if pattern0_0 == I128 {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        // Rule at src/isa/s390x/lower.isle line 2776.
        let expr0_0 = constructor_lower_address(ctx, pattern3_0, pattern4_0, pattern5_0)?;
        let expr1_0 = constructor_vec_store(ctx, pattern2_0, &expr0_0)?;
        return Some(expr1_0);
    }
    return None;
}

// Generated as internal constructor for term istore8_impl.
pub fn constructor_istore8_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(pattern2_0) = C::u8_from_value(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/lower.isle line 2820.
        let expr0_0 = constructor_lower_address(ctx, pattern0_0, pattern3_0, pattern4_0)?;
        let expr1_0 = constructor_store8_imm(ctx, pattern2_0, &expr0_0)?;
        return Some(expr1_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    // Rule at src/isa/s390x/lower.isle line 2816.
    let expr0_0 = C::put_in_reg(ctx, pattern1_0);
    let expr1_0 = constructor_lower_address(ctx, pattern0_0, pattern2_0, pattern3_0)?;
    let expr2_0 = constructor_store8(ctx, expr0_0, &expr1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term istore16_impl.
pub fn constructor_istore16_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    if let Some(()) = C::bigendian(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        if let Some(pattern3_0) = C::i16_from_value(ctx, pattern2_0) {
            let pattern4_0 = arg2;
            let pattern5_0 = arg3;
            // Rule at src/isa/s390x/lower.isle line 2842.
            let expr0_0 = constructor_lower_address(ctx, pattern0_0, pattern4_0, pattern5_0)?;
            let expr1_0 = constructor_store16_imm(ctx, pattern3_0, &expr0_0)?;
            return Some(expr1_0);
        }
    }
    let pattern0_0 = arg0;
    if let Some(()) = C::bigendian(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/lower.isle line 2834.
        let expr0_0 = C::put_in_reg(ctx, pattern2_0);
        let expr1_0 = constructor_lower_address(ctx, pattern0_0, pattern3_0, pattern4_0)?;
        let expr2_0 = constructor_store16(ctx, expr0_0, &expr1_0)?;
        return Some(expr2_0);
    }
    let pattern0_0 = arg0;
    if let Some(()) = C::littleendian(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        if let Some(pattern3_0) = C::i16_from_swapped_value(ctx, pattern2_0) {
            let pattern4_0 = arg2;
            let pattern5_0 = arg3;
            // Rule at src/isa/s390x/lower.isle line 2846.
            let expr0_0 = constructor_lower_address(ctx, pattern0_0, pattern4_0, pattern5_0)?;
            let expr1_0 = constructor_store16_imm(ctx, pattern3_0, &expr0_0)?;
            return Some(expr1_0);
        }
    }
    let pattern0_0 = arg0;
    if let Some(()) = C::littleendian(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/lower.isle line 2838.
        let expr0_0 = C::put_in_reg(ctx, pattern2_0);
        let expr1_0 = constructor_lower_address(ctx, pattern0_0, pattern3_0, pattern4_0)?;
        let expr2_0 = constructor_storerev16(ctx, expr0_0, &expr1_0)?;
        return Some(expr2_0);
    }
    return None;
}

// Generated as internal constructor for term istore32_impl.
pub fn constructor_istore32_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    if let Some(()) = C::bigendian(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        if let Some(pattern3_0) = C::i16_from_value(ctx, pattern2_0) {
            let pattern4_0 = arg2;
            let pattern5_0 = arg3;
            // Rule at src/isa/s390x/lower.isle line 2864.
            let expr0_0 = constructor_lower_address(ctx, pattern0_0, pattern4_0, pattern5_0)?;
            let expr1_0 = constructor_store32_simm16(ctx, pattern3_0, &expr0_0)?;
            return Some(expr1_0);
        }
    }
    let pattern0_0 = arg0;
    if let Some(()) = C::bigendian(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/lower.isle line 2860.
        let expr0_0 = C::put_in_reg(ctx, pattern2_0);
        let expr1_0 = constructor_lower_address(ctx, pattern0_0, pattern3_0, pattern4_0)?;
        let expr2_0 = constructor_store32(ctx, expr0_0, &expr1_0)?;
        return Some(expr2_0);
    }
    let pattern0_0 = arg0;
    if let Some(()) = C::littleendian(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/lower.isle line 2868.
        let expr0_0 = C::put_in_reg(ctx, pattern2_0);
        let expr1_0 = constructor_lower_address(ctx, pattern0_0, pattern3_0, pattern4_0)?;
        let expr2_0 = constructor_storerev32(ctx, expr0_0, &expr1_0)?;
        return Some(expr2_0);
    }
    return None;
}

// Generated as internal constructor for term istore64_impl.
pub fn constructor_istore64_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> Option<SideEffectNoResult> {
    let pattern0_0 = arg0;
    if let Some(()) = C::bigendian(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        if let Some(pattern3_0) = C::i16_from_value(ctx, pattern2_0) {
            let pattern4_0 = arg2;
            let pattern5_0 = arg3;
            // Rule at src/isa/s390x/lower.isle line 2882.
            let expr0_0 = constructor_lower_address(ctx, pattern0_0, pattern4_0, pattern5_0)?;
            let expr1_0 = constructor_store64_simm16(ctx, pattern3_0, &expr0_0)?;
            return Some(expr1_0);
        }
    }
    let pattern0_0 = arg0;
    if let Some(()) = C::bigendian(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/lower.isle line 2878.
        let expr0_0 = C::put_in_reg(ctx, pattern2_0);
        let expr1_0 = constructor_lower_address(ctx, pattern0_0, pattern3_0, pattern4_0)?;
        let expr2_0 = constructor_store64(ctx, expr0_0, &expr1_0)?;
        return Some(expr2_0);
    }
    let pattern0_0 = arg0;
    if let Some(()) = C::littleendian(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        // Rule at src/isa/s390x/lower.isle line 2886.
        let expr0_0 = C::put_in_reg(ctx, pattern2_0);
        let expr1_0 = constructor_lower_address(ctx, pattern0_0, pattern3_0, pattern4_0)?;
        let expr2_0 = constructor_storerev64(ctx, expr0_0, &expr1_0)?;
        return Some(expr2_0);
    }
    return None;
}

// Generated as internal constructor for term atomic_rmw_body.
pub fn constructor_atomic_rmw_body<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &AtomicRmwOp,
    arg4: WritableReg,
    arg5: Reg,
    arg6: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(()) = C::mie2_enabled(ctx, pattern1_0) {
        if let Some(pattern3_0) = C::ty_32_or_64(ctx, pattern1_0) {
            let pattern4_0 = arg2;
            if let Some(()) = C::bigendian(ctx, pattern4_0) {
                let pattern6_0 = arg3;
                if let &AtomicRmwOp::Nand = pattern6_0 {
                    let pattern8_0 = arg4;
                    let pattern9_0 = arg5;
                    let pattern10_0 = arg6;
                    // Rule at src/isa/s390x/lower.isle line 2991.
                    let expr0_0 = constructor_aluop_not_and(ctx, pattern3_0)?;
                    let expr1_0 = constructor_push_alu_reg(
                        ctx,
                        pattern0_0,
                        &expr0_0,
                        pattern8_0,
                        pattern9_0,
                        pattern10_0,
                    )?;
                    return Some(expr1_0);
                }
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(()) = C::mie2_enabled(ctx, pattern1_0) {
        if let Some(pattern3_0) = C::ty_32_or_64(ctx, pattern1_0) {
            let pattern4_0 = arg2;
            if let Some(()) = C::littleendian(ctx, pattern4_0) {
                let pattern6_0 = arg3;
                if let &AtomicRmwOp::Nand = pattern6_0 {
                    let pattern8_0 = arg4;
                    let pattern9_0 = arg5;
                    let pattern10_0 = arg6;
                    // Rule at src/isa/s390x/lower.isle line 2994.
                    let expr0_0 = constructor_aluop_not_and(ctx, pattern3_0)?;
                    let expr1_0 = constructor_bswap_reg(ctx, pattern3_0, pattern10_0)?;
                    let expr2_0 = constructor_push_alu_reg(
                        ctx, pattern0_0, &expr0_0, pattern8_0, pattern9_0, expr1_0,
                    )?;
                    return Some(expr2_0);
                }
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(()) = C::mie2_disabled(ctx, pattern1_0) {
        if let Some(pattern3_0) = C::ty_32_or_64(ctx, pattern1_0) {
            let pattern4_0 = arg2;
            if let Some(()) = C::bigendian(ctx, pattern4_0) {
                let pattern6_0 = arg3;
                if let &AtomicRmwOp::Nand = pattern6_0 {
                    let pattern8_0 = arg4;
                    let pattern9_0 = arg5;
                    let pattern10_0 = arg6;
                    // Rule at src/isa/s390x/lower.isle line 2997.
                    let expr0_0 = constructor_aluop_and(ctx, pattern3_0)?;
                    let expr1_0 = constructor_push_alu_reg(
                        ctx,
                        pattern0_0,
                        &expr0_0,
                        pattern8_0,
                        pattern9_0,
                        pattern10_0,
                    )?;
                    let expr2_0 =
                        constructor_push_not_reg(ctx, pattern0_0, pattern3_0, pattern8_0, expr1_0)?;
                    return Some(expr2_0);
                }
            }
        }
    }
    if let Some(pattern2_0) = C::ty_32_or_64(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        if let Some(()) = C::bigendian(ctx, pattern3_0) {
            let pattern5_0 = arg3;
            if let &AtomicRmwOp::Xchg = pattern5_0 {
                let pattern7_0 = arg4;
                let pattern8_0 = arg5;
                let pattern9_0 = arg6;
                // Rule at src/isa/s390x/lower.isle line 2980.
                return Some(pattern9_0);
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(()) = C::mie2_disabled(ctx, pattern1_0) {
        if let Some(pattern3_0) = C::ty_32_or_64(ctx, pattern1_0) {
            let pattern4_0 = arg2;
            if let Some(()) = C::littleendian(ctx, pattern4_0) {
                let pattern6_0 = arg3;
                if let &AtomicRmwOp::Nand = pattern6_0 {
                    let pattern8_0 = arg4;
                    let pattern9_0 = arg5;
                    let pattern10_0 = arg6;
                    // Rule at src/isa/s390x/lower.isle line 3001.
                    let expr0_0 = constructor_aluop_and(ctx, pattern3_0)?;
                    let expr1_0 = constructor_bswap_reg(ctx, pattern3_0, pattern10_0)?;
                    let expr2_0 = constructor_push_alu_reg(
                        ctx, pattern0_0, &expr0_0, pattern8_0, pattern9_0, expr1_0,
                    )?;
                    let expr3_0 =
                        constructor_push_not_reg(ctx, pattern0_0, pattern3_0, pattern8_0, expr2_0)?;
                    return Some(expr3_0);
                }
            }
        }
    }
    if let Some(pattern2_0) = C::ty_32_or_64(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        if let Some(()) = C::littleendian(ctx, pattern3_0) {
            let pattern5_0 = arg3;
            if let &AtomicRmwOp::Xchg = pattern5_0 {
                let pattern7_0 = arg4;
                let pattern8_0 = arg5;
                let pattern9_0 = arg6;
                // Rule at src/isa/s390x/lower.isle line 2983.
                let expr0_0 = constructor_bswap_reg(ctx, pattern2_0, pattern9_0)?;
                return Some(expr0_0);
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(pattern2_0) = C::ty_8_or_16(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        match pattern4_0 {
            &AtomicRmwOp::And => {
                let pattern6_0 = arg4;
                let pattern7_0 = arg5;
                let pattern8_0 = arg6;
                // Rule at src/isa/s390x/lower.isle line 3011.
                let expr0_0 = RxSBGOp::And;
                let expr1_0 = constructor_atomic_rmw_body_rxsbg(
                    ctx, pattern0_0, pattern2_0, pattern3_0, &expr0_0, pattern6_0, pattern7_0,
                    pattern8_0,
                )?;
                return Some(expr1_0);
            }
            &AtomicRmwOp::Nand => {
                let pattern6_0 = arg4;
                let pattern7_0 = arg5;
                let pattern8_0 = arg6;
                // Rule at src/isa/s390x/lower.isle line 3017.
                let expr0_0 = RxSBGOp::And;
                let expr1_0 = constructor_atomic_rmw_body_rxsbg(
                    ctx, pattern0_0, pattern2_0, pattern3_0, &expr0_0, pattern6_0, pattern7_0,
                    pattern8_0,
                )?;
                let expr2_0 = constructor_atomic_rmw_body_invert(
                    ctx, pattern0_0, pattern2_0, pattern3_0, pattern6_0, expr1_0,
                )?;
                return Some(expr2_0);
            }
            &AtomicRmwOp::Or => {
                let pattern6_0 = arg4;
                let pattern7_0 = arg5;
                let pattern8_0 = arg6;
                // Rule at src/isa/s390x/lower.isle line 3013.
                let expr0_0 = RxSBGOp::Or;
                let expr1_0 = constructor_atomic_rmw_body_rxsbg(
                    ctx, pattern0_0, pattern2_0, pattern3_0, &expr0_0, pattern6_0, pattern7_0,
                    pattern8_0,
                )?;
                return Some(expr1_0);
            }
            &AtomicRmwOp::Xchg => {
                let pattern6_0 = arg4;
                let pattern7_0 = arg5;
                let pattern8_0 = arg6;
                // Rule at src/isa/s390x/lower.isle line 3009.
                let expr0_0 = RxSBGOp::Insert;
                let expr1_0 = constructor_atomic_rmw_body_rxsbg(
                    ctx, pattern0_0, pattern2_0, pattern3_0, &expr0_0, pattern6_0, pattern7_0,
                    pattern8_0,
                )?;
                return Some(expr1_0);
            }
            &AtomicRmwOp::Xor => {
                let pattern6_0 = arg4;
                let pattern7_0 = arg5;
                let pattern8_0 = arg6;
                // Rule at src/isa/s390x/lower.isle line 3015.
                let expr0_0 = RxSBGOp::Xor;
                let expr1_0 = constructor_atomic_rmw_body_rxsbg(
                    ctx, pattern0_0, pattern2_0, pattern3_0, &expr0_0, pattern6_0, pattern7_0,
                    pattern8_0,
                )?;
                return Some(expr1_0);
            }
            _ => {}
        }
    }
    let pattern2_0 = arg2;
    let pattern3_0 = arg3;
    match pattern3_0 {
        &AtomicRmwOp::Add => {
            let pattern5_0 = arg4;
            let pattern6_0 = arg5;
            let pattern7_0 = arg6;
            // Rule at src/isa/s390x/lower.isle line 3049.
            let expr0_0 = constructor_ty_ext32(ctx, pattern1_0)?;
            let expr1_0 = constructor_aluop_add(ctx, expr0_0)?;
            let expr2_0 = constructor_atomic_rmw_body_addsub(
                ctx, pattern0_0, pattern1_0, pattern2_0, &expr1_0, pattern5_0, pattern6_0,
                pattern7_0,
            )?;
            return Some(expr2_0);
        }
        &AtomicRmwOp::Smax => {
            let pattern5_0 = arg4;
            let pattern6_0 = arg5;
            let pattern7_0 = arg6;
            // Rule at src/isa/s390x/lower.isle line 3090.
            let expr0_0 = constructor_ty_ext32(ctx, pattern1_0)?;
            let expr1_0 = constructor_cmpop_cmps(ctx, expr0_0)?;
            let expr2_0 = IntCC::SignedGreaterThan;
            let expr3_0 = C::intcc_as_cond(ctx, &expr2_0);
            let expr4_0 = constructor_atomic_rmw_body_minmax(
                ctx, pattern0_0, pattern1_0, pattern2_0, &expr1_0, &expr3_0, pattern5_0,
                pattern6_0, pattern7_0,
            )?;
            return Some(expr4_0);
        }
        &AtomicRmwOp::Smin => {
            let pattern5_0 = arg4;
            let pattern6_0 = arg5;
            let pattern7_0 = arg6;
            // Rule at src/isa/s390x/lower.isle line 3087.
            let expr0_0 = constructor_ty_ext32(ctx, pattern1_0)?;
            let expr1_0 = constructor_cmpop_cmps(ctx, expr0_0)?;
            let expr2_0 = IntCC::SignedLessThan;
            let expr3_0 = C::intcc_as_cond(ctx, &expr2_0);
            let expr4_0 = constructor_atomic_rmw_body_minmax(
                ctx, pattern0_0, pattern1_0, pattern2_0, &expr1_0, &expr3_0, pattern5_0,
                pattern6_0, pattern7_0,
            )?;
            return Some(expr4_0);
        }
        &AtomicRmwOp::Sub => {
            let pattern5_0 = arg4;
            let pattern6_0 = arg5;
            let pattern7_0 = arg6;
            // Rule at src/isa/s390x/lower.isle line 3051.
            let expr0_0 = constructor_ty_ext32(ctx, pattern1_0)?;
            let expr1_0 = constructor_aluop_sub(ctx, expr0_0)?;
            let expr2_0 = constructor_atomic_rmw_body_addsub(
                ctx, pattern0_0, pattern1_0, pattern2_0, &expr1_0, pattern5_0, pattern6_0,
                pattern7_0,
            )?;
            return Some(expr2_0);
        }
        &AtomicRmwOp::Umax => {
            let pattern5_0 = arg4;
            let pattern6_0 = arg5;
            let pattern7_0 = arg6;
            // Rule at src/isa/s390x/lower.isle line 3096.
            let expr0_0 = constructor_ty_ext32(ctx, pattern1_0)?;
            let expr1_0 = constructor_cmpop_cmpu(ctx, expr0_0)?;
            let expr2_0 = IntCC::UnsignedGreaterThan;
            let expr3_0 = C::intcc_as_cond(ctx, &expr2_0);
            let expr4_0 = constructor_atomic_rmw_body_minmax(
                ctx, pattern0_0, pattern1_0, pattern2_0, &expr1_0, &expr3_0, pattern5_0,
                pattern6_0, pattern7_0,
            )?;
            return Some(expr4_0);
        }
        &AtomicRmwOp::Umin => {
            let pattern5_0 = arg4;
            let pattern6_0 = arg5;
            let pattern7_0 = arg6;
            // Rule at src/isa/s390x/lower.isle line 3093.
            let expr0_0 = constructor_ty_ext32(ctx, pattern1_0)?;
            let expr1_0 = constructor_cmpop_cmpu(ctx, expr0_0)?;
            let expr2_0 = IntCC::UnsignedLessThan;
            let expr3_0 = C::intcc_as_cond(ctx, &expr2_0);
            let expr4_0 = constructor_atomic_rmw_body_minmax(
                ctx, pattern0_0, pattern1_0, pattern2_0, &expr1_0, &expr3_0, pattern5_0,
                pattern6_0, pattern7_0,
            )?;
            return Some(expr4_0);
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term atomic_rmw_body_rxsbg.
pub fn constructor_atomic_rmw_body_rxsbg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &RxSBGOp,
    arg4: WritableReg,
    arg5: Reg,
    arg6: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if pattern1_0 == I16 {
        let pattern3_0 = arg2;
        if let Some(()) = C::bigendian(ctx, pattern3_0) {
            let pattern5_0 = arg3;
            let pattern6_0 = arg4;
            let pattern7_0 = arg5;
            let pattern8_0 = arg6;
            // Rule at src/isa/s390x/lower.isle line 3029.
            let expr0_0: u8 = 32i128 as u8;
            let expr1_0: u8 = 48i128 as u8;
            let expr2_0: i8 = 16i128 as i8;
            let expr3_0 = constructor_push_rxsbg(
                ctx, pattern0_0, pattern5_0, pattern6_0, pattern7_0, pattern8_0, expr0_0, expr1_0,
                expr2_0,
            )?;
            return Some(expr3_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if pattern1_0 == I8 {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        let pattern6_0 = arg5;
        let pattern7_0 = arg6;
        // Rule at src/isa/s390x/lower.isle line 3025.
        let expr0_0: u8 = 32i128 as u8;
        let expr1_0: u8 = 40i128 as u8;
        let expr2_0: i8 = 24i128 as i8;
        let expr3_0 = constructor_push_rxsbg(
            ctx, pattern0_0, pattern4_0, pattern5_0, pattern6_0, pattern7_0, expr0_0, expr1_0,
            expr2_0,
        )?;
        return Some(expr3_0);
    }
    if pattern1_0 == I16 {
        let pattern3_0 = arg2;
        if let Some(()) = C::littleendian(ctx, pattern3_0) {
            let pattern5_0 = arg3;
            let pattern6_0 = arg4;
            let pattern7_0 = arg5;
            let pattern8_0 = arg6;
            // Rule at src/isa/s390x/lower.isle line 3033.
            let expr0_0: Type = I32;
            let expr1_0 = constructor_bswap_reg(ctx, expr0_0, pattern8_0)?;
            let expr2_0: u8 = 48i128 as u8;
            let expr3_0: u8 = 64i128 as u8;
            let expr4_0: i8 = -16i128 as i8;
            let expr5_0 = constructor_push_rxsbg(
                ctx, pattern0_0, pattern5_0, pattern6_0, pattern7_0, expr1_0, expr2_0, expr3_0,
                expr4_0,
            )?;
            return Some(expr5_0);
        }
    }
    return None;
}

// Generated as internal constructor for term atomic_rmw_body_invert.
pub fn constructor_atomic_rmw_body_invert<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: WritableReg,
    arg4: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if pattern1_0 == I16 {
        let pattern3_0 = arg2;
        if let Some(()) = C::bigendian(ctx, pattern3_0) {
            let pattern5_0 = arg3;
            let pattern6_0 = arg4;
            // Rule at src/isa/s390x/lower.isle line 3042.
            let expr0_0: Type = I32;
            let expr1_0: u32 = 4294901760i128 as u32;
            let expr2_0: u8 = 0i128 as u8;
            let expr3_0 = C::uimm32shifted(ctx, expr1_0, expr2_0);
            let expr4_0 = constructor_push_xor_uimm32shifted(
                ctx, pattern0_0, expr0_0, pattern5_0, pattern6_0, expr3_0,
            )?;
            return Some(expr4_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if pattern1_0 == I8 {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        // Rule at src/isa/s390x/lower.isle line 3039.
        let expr0_0: Type = I32;
        let expr1_0: u32 = 4278190080i128 as u32;
        let expr2_0: u8 = 0i128 as u8;
        let expr3_0 = C::uimm32shifted(ctx, expr1_0, expr2_0);
        let expr4_0 = constructor_push_xor_uimm32shifted(
            ctx, pattern0_0, expr0_0, pattern4_0, pattern5_0, expr3_0,
        )?;
        return Some(expr4_0);
    }
    if pattern1_0 == I16 {
        let pattern3_0 = arg2;
        if let Some(()) = C::littleendian(ctx, pattern3_0) {
            let pattern5_0 = arg3;
            let pattern6_0 = arg4;
            // Rule at src/isa/s390x/lower.isle line 3045.
            let expr0_0: Type = I32;
            let expr1_0: u32 = 65535i128 as u32;
            let expr2_0: u8 = 0i128 as u8;
            let expr3_0 = C::uimm32shifted(ctx, expr1_0, expr2_0);
            let expr4_0 = constructor_push_xor_uimm32shifted(
                ctx, pattern0_0, expr0_0, pattern5_0, pattern6_0, expr3_0,
            )?;
            return Some(expr4_0);
        }
    }
    return None;
}

// Generated as internal constructor for term atomic_rmw_body_addsub.
pub fn constructor_atomic_rmw_body_addsub<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &ALUOp,
    arg4: WritableReg,
    arg5: Reg,
    arg6: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if pattern1_0 == I16 {
        let pattern3_0 = arg2;
        if let Some(()) = C::bigendian(ctx, pattern3_0) {
            let pattern5_0 = arg3;
            let pattern6_0 = arg4;
            let pattern7_0 = arg5;
            let pattern8_0 = arg6;
            // Rule at src/isa/s390x/lower.isle line 3072.
            let expr0_0: Type = I32;
            let expr1_0: u8 = 16i128 as u8;
            let expr2_0 = constructor_lshl_imm(ctx, expr0_0, pattern8_0, expr1_0)?;
            let expr3_0 = constructor_push_alu_reg(
                ctx, pattern0_0, pattern5_0, pattern6_0, pattern7_0, expr2_0,
            )?;
            return Some(expr3_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(pattern2_0) = C::ty_32_or_64(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        if let Some(()) = C::bigendian(ctx, pattern3_0) {
            let pattern5_0 = arg3;
            let pattern6_0 = arg4;
            let pattern7_0 = arg5;
            let pattern8_0 = arg6;
            // Rule at src/isa/s390x/lower.isle line 3058.
            let expr0_0 = constructor_push_alu_reg(
                ctx, pattern0_0, pattern5_0, pattern6_0, pattern7_0, pattern8_0,
            )?;
            return Some(expr0_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(pattern2_0) = C::ty_32_or_64(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        if let Some(()) = C::littleendian(ctx, pattern3_0) {
            let pattern5_0 = arg3;
            let pattern6_0 = arg4;
            let pattern7_0 = arg5;
            let pattern8_0 = arg6;
            // Rule at src/isa/s390x/lower.isle line 3062.
            let expr0_0 =
                constructor_push_bswap_reg(ctx, pattern0_0, pattern2_0, pattern6_0, pattern7_0)?;
            let expr1_0 = constructor_push_alu_reg(
                ctx, pattern0_0, pattern5_0, pattern6_0, expr0_0, pattern8_0,
            )?;
            let expr2_0 =
                constructor_push_bswap_reg(ctx, pattern0_0, pattern2_0, pattern6_0, expr1_0)?;
            return Some(expr2_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if pattern1_0 == I8 {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        let pattern6_0 = arg5;
        let pattern7_0 = arg6;
        // Rule at src/isa/s390x/lower.isle line 3068.
        let expr0_0: Type = I32;
        let expr1_0: u8 = 24i128 as u8;
        let expr2_0 = constructor_lshl_imm(ctx, expr0_0, pattern7_0, expr1_0)?;
        let expr3_0 =
            constructor_push_alu_reg(ctx, pattern0_0, pattern4_0, pattern5_0, pattern6_0, expr2_0)?;
        return Some(expr3_0);
    }
    if pattern1_0 == I16 {
        let pattern3_0 = arg2;
        if let Some(()) = C::littleendian(ctx, pattern3_0) {
            let pattern5_0 = arg3;
            let pattern6_0 = arg4;
            let pattern7_0 = arg5;
            let pattern8_0 = arg6;
            // Rule at src/isa/s390x/lower.isle line 3080.
            let expr0_0: Type = I32;
            let expr1_0: u8 = 16i128 as u8;
            let expr2_0 = constructor_lshl_imm(ctx, expr0_0, pattern8_0, expr1_0)?;
            let expr3_0: Type = I32;
            let expr4_0 =
                constructor_push_bswap_reg(ctx, pattern0_0, expr3_0, pattern6_0, pattern7_0)?;
            let expr5_0 = constructor_push_alu_reg(
                ctx, pattern0_0, pattern5_0, pattern6_0, expr4_0, expr2_0,
            )?;
            let expr6_0: Type = I32;
            let expr7_0 =
                constructor_push_bswap_reg(ctx, pattern0_0, expr6_0, pattern6_0, expr5_0)?;
            return Some(expr7_0);
        }
    }
    return None;
}

// Generated as internal constructor for term atomic_rmw_body_minmax.
pub fn constructor_atomic_rmw_body_minmax<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &CmpOp,
    arg4: &Cond,
    arg5: WritableReg,
    arg6: Reg,
    arg7: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if pattern1_0 == I16 {
        let pattern3_0 = arg2;
        if let Some(()) = C::bigendian(ctx, pattern3_0) {
            let pattern5_0 = arg3;
            let pattern6_0 = arg4;
            let pattern7_0 = arg5;
            let pattern8_0 = arg6;
            let pattern9_0 = arg7;
            // Rule at src/isa/s390x/lower.isle line 3131.
            let expr0_0: Type = I32;
            let expr1_0: u8 = 16i128 as u8;
            let expr2_0 = constructor_lshl_imm(ctx, expr0_0, pattern9_0, expr1_0)?;
            let expr3_0 = constructor_cmp_rr(ctx, pattern5_0, expr2_0, pattern8_0)?;
            let expr4_0 = C::invert_cond(ctx, pattern6_0);
            let expr5_0 = constructor_push_break_if(ctx, pattern0_0, &expr3_0, &expr4_0)?;
            let expr6_0 = RxSBGOp::Insert;
            let expr7_0: u8 = 32i128 as u8;
            let expr8_0: u8 = 48i128 as u8;
            let expr9_0: i8 = 0i128 as i8;
            let expr10_0 = constructor_push_rxsbg(
                ctx, pattern0_0, &expr6_0, pattern7_0, pattern8_0, expr2_0, expr7_0, expr8_0,
                expr9_0,
            )?;
            return Some(expr10_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(pattern2_0) = C::ty_32_or_64(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        if let Some(()) = C::bigendian(ctx, pattern3_0) {
            let pattern5_0 = arg3;
            let pattern6_0 = arg4;
            let pattern7_0 = arg5;
            let pattern8_0 = arg6;
            let pattern9_0 = arg7;
            // Rule at src/isa/s390x/lower.isle line 3106.
            let expr0_0 = constructor_cmp_rr(ctx, pattern5_0, pattern9_0, pattern8_0)?;
            let expr1_0 = C::invert_cond(ctx, pattern6_0);
            let expr2_0 = constructor_push_break_if(ctx, pattern0_0, &expr0_0, &expr1_0)?;
            return Some(pattern9_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(pattern2_0) = C::ty_32_or_64(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        if let Some(()) = C::littleendian(ctx, pattern3_0) {
            let pattern5_0 = arg3;
            let pattern6_0 = arg4;
            let pattern7_0 = arg5;
            let pattern8_0 = arg6;
            let pattern9_0 = arg7;
            // Rule at src/isa/s390x/lower.isle line 3113.
            let expr0_0 =
                constructor_push_bswap_reg(ctx, pattern0_0, pattern2_0, pattern7_0, pattern8_0)?;
            let expr1_0 = constructor_cmp_rr(ctx, pattern5_0, pattern9_0, expr0_0)?;
            let expr2_0 = C::invert_cond(ctx, pattern6_0);
            let expr3_0 = constructor_push_break_if(ctx, pattern0_0, &expr1_0, &expr2_0)?;
            let expr4_0 =
                constructor_push_bswap_reg(ctx, pattern0_0, pattern2_0, pattern7_0, pattern9_0)?;
            return Some(expr4_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if pattern1_0 == I8 {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        let pattern6_0 = arg5;
        let pattern7_0 = arg6;
        let pattern8_0 = arg7;
        // Rule at src/isa/s390x/lower.isle line 3125.
        let expr0_0: Type = I32;
        let expr1_0: u8 = 24i128 as u8;
        let expr2_0 = constructor_lshl_imm(ctx, expr0_0, pattern8_0, expr1_0)?;
        let expr3_0 = constructor_cmp_rr(ctx, pattern4_0, expr2_0, pattern7_0)?;
        let expr4_0 = C::invert_cond(ctx, pattern5_0);
        let expr5_0 = constructor_push_break_if(ctx, pattern0_0, &expr3_0, &expr4_0)?;
        let expr6_0 = RxSBGOp::Insert;
        let expr7_0: u8 = 32i128 as u8;
        let expr8_0: u8 = 40i128 as u8;
        let expr9_0: i8 = 0i128 as i8;
        let expr10_0 = constructor_push_rxsbg(
            ctx, pattern0_0, &expr6_0, pattern6_0, pattern7_0, expr2_0, expr7_0, expr8_0, expr9_0,
        )?;
        return Some(expr10_0);
    }
    if pattern1_0 == I16 {
        let pattern3_0 = arg2;
        if let Some(()) = C::littleendian(ctx, pattern3_0) {
            let pattern5_0 = arg3;
            let pattern6_0 = arg4;
            let pattern7_0 = arg5;
            let pattern8_0 = arg6;
            let pattern9_0 = arg7;
            // Rule at src/isa/s390x/lower.isle line 3138.
            let expr0_0: Type = I32;
            let expr1_0: u8 = 16i128 as u8;
            let expr2_0 = constructor_lshl_imm(ctx, expr0_0, pattern9_0, expr1_0)?;
            let expr3_0: Type = I32;
            let expr4_0 =
                constructor_push_bswap_reg(ctx, pattern0_0, expr3_0, pattern7_0, pattern8_0)?;
            let expr5_0 = constructor_cmp_rr(ctx, pattern5_0, expr2_0, expr4_0)?;
            let expr6_0 = C::invert_cond(ctx, pattern6_0);
            let expr7_0 = constructor_push_break_if(ctx, pattern0_0, &expr5_0, &expr6_0)?;
            let expr8_0 = RxSBGOp::Insert;
            let expr9_0: u8 = 32i128 as u8;
            let expr10_0: u8 = 48i128 as u8;
            let expr11_0: i8 = 0i128 as i8;
            let expr12_0 = constructor_push_rxsbg(
                ctx, pattern0_0, &expr8_0, pattern7_0, expr4_0, expr2_0, expr9_0, expr10_0,
                expr11_0,
            )?;
            let expr13_0: Type = I32;
            let expr14_0 =
                constructor_push_bswap_reg(ctx, pattern0_0, expr13_0, pattern7_0, expr12_0)?;
            return Some(expr14_0);
        }
    }
    return None;
}

// Generated as internal constructor for term atomic_cas_body.
pub fn constructor_atomic_cas_body<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: WritableReg,
    arg4: Reg,
    arg5: Reg,
    arg6: Reg,
) -> Option<Reg> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if pattern1_0 == I16 {
        let pattern3_0 = arg2;
        if let Some(()) = C::bigendian(ctx, pattern3_0) {
            let pattern5_0 = arg3;
            let pattern6_0 = arg4;
            let pattern7_0 = arg5;
            let pattern8_0 = arg6;
            // Rule at src/isa/s390x/lower.isle line 3197.
            let expr0_0 = RxSBGOp::Xor;
            let expr1_0: u8 = 32i128 as u8;
            let expr2_0: u8 = 48i128 as u8;
            let expr3_0: i8 = 16i128 as i8;
            let expr4_0 = constructor_rxsbg_test(
                ctx, &expr0_0, pattern6_0, pattern7_0, expr1_0, expr2_0, expr3_0,
            )?;
            let expr5_0 = IntCC::NotEqual;
            let expr6_0 = C::intcc_as_cond(ctx, &expr5_0);
            let expr7_0 = constructor_push_break_if(ctx, pattern0_0, &expr4_0, &expr6_0)?;
            let expr8_0 = RxSBGOp::Insert;
            let expr9_0: u8 = 32i128 as u8;
            let expr10_0: u8 = 48i128 as u8;
            let expr11_0: i8 = 16i128 as i8;
            let expr12_0 = constructor_push_rxsbg(
                ctx, pattern0_0, &expr8_0, pattern5_0, pattern6_0, pattern8_0, expr9_0, expr10_0,
                expr11_0,
            )?;
            return Some(expr12_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if pattern1_0 == I8 {
        let pattern3_0 = arg2;
        let pattern4_0 = arg3;
        let pattern5_0 = arg4;
        let pattern6_0 = arg5;
        let pattern7_0 = arg6;
        // Rule at src/isa/s390x/lower.isle line 3190.
        let expr0_0 = RxSBGOp::Xor;
        let expr1_0: u8 = 32i128 as u8;
        let expr2_0: u8 = 40i128 as u8;
        let expr3_0: i8 = 24i128 as i8;
        let expr4_0 = constructor_rxsbg_test(
            ctx, &expr0_0, pattern5_0, pattern6_0, expr1_0, expr2_0, expr3_0,
        )?;
        let expr5_0 = IntCC::NotEqual;
        let expr6_0 = C::intcc_as_cond(ctx, &expr5_0);
        let expr7_0 = constructor_push_break_if(ctx, pattern0_0, &expr4_0, &expr6_0)?;
        let expr8_0 = RxSBGOp::Insert;
        let expr9_0: u8 = 32i128 as u8;
        let expr10_0: u8 = 40i128 as u8;
        let expr11_0: i8 = 24i128 as i8;
        let expr12_0 = constructor_push_rxsbg(
            ctx, pattern0_0, &expr8_0, pattern4_0, pattern5_0, pattern7_0, expr9_0, expr10_0,
            expr11_0,
        )?;
        return Some(expr12_0);
    }
    if pattern1_0 == I16 {
        let pattern3_0 = arg2;
        if let Some(()) = C::littleendian(ctx, pattern3_0) {
            let pattern5_0 = arg3;
            let pattern6_0 = arg4;
            let pattern7_0 = arg5;
            let pattern8_0 = arg6;
            // Rule at src/isa/s390x/lower.isle line 3208.
            let expr0_0: Type = I32;
            let expr1_0 = constructor_bswap_reg(ctx, expr0_0, pattern7_0)?;
            let expr2_0: Type = I32;
            let expr3_0 = constructor_bswap_reg(ctx, expr2_0, pattern8_0)?;
            let expr4_0 = RxSBGOp::Xor;
            let expr5_0: u8 = 48i128 as u8;
            let expr6_0: u8 = 64i128 as u8;
            let expr7_0: i8 = -16i128 as i8;
            let expr8_0 = constructor_rxsbg_test(
                ctx, &expr4_0, pattern6_0, expr1_0, expr5_0, expr6_0, expr7_0,
            )?;
            let expr9_0 = IntCC::NotEqual;
            let expr10_0 = C::intcc_as_cond(ctx, &expr9_0);
            let expr11_0 = constructor_push_break_if(ctx, pattern0_0, &expr8_0, &expr10_0)?;
            let expr12_0 = RxSBGOp::Insert;
            let expr13_0: u8 = 48i128 as u8;
            let expr14_0: u8 = 64i128 as u8;
            let expr15_0: i8 = -16i128 as i8;
            let expr16_0 = constructor_push_rxsbg(
                ctx, pattern0_0, &expr12_0, pattern5_0, pattern6_0, expr3_0, expr13_0, expr14_0,
                expr15_0,
            )?;
            return Some(expr16_0);
        }
    }
    return None;
}

// Generated as internal constructor for term atomic_store_impl.
pub fn constructor_atomic_store_impl<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    // Rule at src/isa/s390x/lower.isle line 3254.
    let expr0_0 = constructor_side_effect(ctx, pattern0_0)?;
    let expr1_0 = constructor_fence_impl(ctx)?;
    let expr2_0 = constructor_side_effect(ctx, &expr1_0)?;
    return Some(expr2_0);
}

// Generated as internal constructor for term icmp_val.
pub fn constructor_icmp_val<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: &IntCC,
    arg2: Value,
    arg3: Value,
) -> Option<ProducesBool> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    match pattern1_0 {
        &IntCC::Equal => {
            let pattern3_0 = arg2;
            let pattern4_0 = C::value_type(ctx, pattern3_0);
            if let Some(pattern5_0) = C::vr128_ty(ctx, pattern4_0) {
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 3400.
                let expr0_0: Type = I64X2;
                let expr1_0 = C::put_in_reg(ctx, pattern3_0);
                let expr2_0 = C::put_in_reg(ctx, pattern6_0);
                let expr3_0 = constructor_vec_cmpeqs(ctx, expr0_0, expr1_0, expr2_0)?;
                let expr4_0 = FloatCC::Equal;
                let expr5_0 = C::floatcc_as_cond(ctx, &expr4_0);
                let expr6_0 = constructor_bool(ctx, &expr3_0, &expr5_0)?;
                return Some(expr6_0);
            }
        }
        &IntCC::NotEqual => {
            let pattern3_0 = arg2;
            let pattern4_0 = C::value_type(ctx, pattern3_0);
            if let Some(pattern5_0) = C::vr128_ty(ctx, pattern4_0) {
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 3403.
                let expr0_0: Type = I64X2;
                let expr1_0 = C::put_in_reg(ctx, pattern3_0);
                let expr2_0 = C::put_in_reg(ctx, pattern6_0);
                let expr3_0 = constructor_vec_cmpeqs(ctx, expr0_0, expr1_0, expr2_0)?;
                let expr4_0 = FloatCC::NotEqual;
                let expr5_0 = C::floatcc_as_cond(ctx, &expr4_0);
                let expr6_0 = constructor_bool(ctx, &expr3_0, &expr5_0)?;
                return Some(expr6_0);
            }
        }
        &IntCC::SignedGreaterThan => {
            let pattern3_0 = arg2;
            let pattern4_0 = C::value_type(ctx, pattern3_0);
            if let Some(pattern5_0) = C::vr128_ty(ctx, pattern4_0) {
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 3409.
                let expr0_0 = C::put_in_reg(ctx, pattern3_0);
                let expr1_0 = C::put_in_reg(ctx, pattern6_0);
                let expr2_0 = constructor_vec_int128_scmphi(ctx, expr0_0, expr1_0)?;
                return Some(expr2_0);
            }
        }
        &IntCC::SignedGreaterThanOrEqual => {
            let pattern3_0 = arg2;
            let pattern4_0 = C::value_type(ctx, pattern3_0);
            if let Some(pattern5_0) = C::vr128_ty(ctx, pattern4_0) {
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 3413.
                let expr0_0 = C::put_in_reg(ctx, pattern6_0);
                let expr1_0 = C::put_in_reg(ctx, pattern3_0);
                let expr2_0 = constructor_vec_int128_scmphi(ctx, expr0_0, expr1_0)?;
                let expr3_0 = constructor_invert_bool(ctx, &expr2_0)?;
                return Some(expr3_0);
            }
        }
        &IntCC::SignedLessThan => {
            let pattern3_0 = arg2;
            let pattern4_0 = C::value_type(ctx, pattern3_0);
            if let Some(pattern5_0) = C::vr128_ty(ctx, pattern4_0) {
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 3411.
                let expr0_0 = C::put_in_reg(ctx, pattern6_0);
                let expr1_0 = C::put_in_reg(ctx, pattern3_0);
                let expr2_0 = constructor_vec_int128_scmphi(ctx, expr0_0, expr1_0)?;
                return Some(expr2_0);
            }
        }
        &IntCC::SignedLessThanOrEqual => {
            let pattern3_0 = arg2;
            let pattern4_0 = C::value_type(ctx, pattern3_0);
            if let Some(pattern5_0) = C::vr128_ty(ctx, pattern4_0) {
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 3415.
                let expr0_0 = C::put_in_reg(ctx, pattern3_0);
                let expr1_0 = C::put_in_reg(ctx, pattern6_0);
                let expr2_0 = constructor_vec_int128_scmphi(ctx, expr0_0, expr1_0)?;
                let expr3_0 = constructor_invert_bool(ctx, &expr2_0)?;
                return Some(expr3_0);
            }
        }
        &IntCC::UnsignedGreaterThan => {
            let pattern3_0 = arg2;
            let pattern4_0 = C::value_type(ctx, pattern3_0);
            if let Some(pattern5_0) = C::vr128_ty(ctx, pattern4_0) {
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 3420.
                let expr0_0 = C::put_in_reg(ctx, pattern3_0);
                let expr1_0 = C::put_in_reg(ctx, pattern6_0);
                let expr2_0 = constructor_vec_int128_ucmphi(ctx, expr0_0, expr1_0)?;
                return Some(expr2_0);
            }
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            let pattern3_0 = arg2;
            let pattern4_0 = C::value_type(ctx, pattern3_0);
            if let Some(pattern5_0) = C::vr128_ty(ctx, pattern4_0) {
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 3424.
                let expr0_0 = C::put_in_reg(ctx, pattern6_0);
                let expr1_0 = C::put_in_reg(ctx, pattern3_0);
                let expr2_0 = constructor_vec_int128_ucmphi(ctx, expr0_0, expr1_0)?;
                let expr3_0 = constructor_invert_bool(ctx, &expr2_0)?;
                return Some(expr3_0);
            }
        }
        &IntCC::UnsignedLessThan => {
            let pattern3_0 = arg2;
            let pattern4_0 = C::value_type(ctx, pattern3_0);
            if let Some(pattern5_0) = C::vr128_ty(ctx, pattern4_0) {
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 3422.
                let expr0_0 = C::put_in_reg(ctx, pattern6_0);
                let expr1_0 = C::put_in_reg(ctx, pattern3_0);
                let expr2_0 = constructor_vec_int128_ucmphi(ctx, expr0_0, expr1_0)?;
                return Some(expr2_0);
            }
        }
        &IntCC::UnsignedLessThanOrEqual => {
            let pattern3_0 = arg2;
            let pattern4_0 = C::value_type(ctx, pattern3_0);
            if let Some(pattern5_0) = C::vr128_ty(ctx, pattern4_0) {
                let pattern6_0 = arg3;
                // Rule at src/isa/s390x/lower.isle line 3426.
                let expr0_0 = C::put_in_reg(ctx, pattern3_0);
                let expr1_0 = C::put_in_reg(ctx, pattern6_0);
                let expr2_0 = constructor_vec_int128_ucmphi(ctx, expr0_0, expr1_0)?;
                let expr3_0 = constructor_invert_bool(ctx, &expr2_0)?;
                return Some(expr3_0);
            }
        }
        _ => {}
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(()) = C::signed(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        let pattern4_0 = C::value_type(ctx, pattern3_0);
        if let Some(pattern5_0) = C::fits_in_64(ctx, pattern4_0) {
            let pattern6_0 = arg3;
            // Rule at src/isa/s390x/lower.isle line 3321.
            let expr0_0 = constructor_icmps_val(ctx, pattern0_0, pattern3_0, pattern6_0)?;
            let expr1_0 = C::intcc_as_cond(ctx, pattern1_0);
            let expr2_0 = constructor_bool(ctx, &expr0_0, &expr1_0)?;
            return Some(expr2_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    if let Some(()) = C::unsigned(ctx, pattern1_0) {
        let pattern3_0 = arg2;
        let pattern4_0 = C::value_type(ctx, pattern3_0);
        if let Some(pattern5_0) = C::fits_in_64(ctx, pattern4_0) {
            let pattern6_0 = arg3;
            // Rule at src/isa/s390x/lower.isle line 3324.
            let expr0_0 = constructor_icmpu_val(ctx, pattern0_0, pattern3_0, pattern6_0)?;
            let expr1_0 = C::intcc_as_cond(ctx, pattern1_0);
            let expr2_0 = constructor_bool(ctx, &expr0_0, &expr1_0)?;
            return Some(expr2_0);
        }
    }
    return None;
}

// Generated as internal constructor for term icmps_val.
pub fn constructor_icmps_val<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Value,
    arg2: Value,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    if pattern0_0 == true {
        let pattern2_0 = arg1;
        let pattern3_0 = C::value_type(ctx, pattern2_0);
        if let Some(pattern4_0) = C::fits_in_64(ctx, pattern3_0) {
            let pattern5_0 = arg2;
            let pattern6_0 = C::value_type(ctx, pattern5_0);
            if pattern6_0 == I16 {
                if let Some(pattern8_0) = C::sinkable_inst(ctx, pattern5_0) {
                    let pattern9_0 = C::inst_data(ctx, pattern8_0);
                    if let &InstructionData::Load {
                        opcode: ref pattern10_0,
                        arg: pattern10_1,
                        flags: pattern10_2,
                        offset: pattern10_3,
                    } = &pattern9_0
                    {
                        if let &Opcode::Load = pattern10_0 {
                            if let Some(()) = C::bigendian(ctx, pattern10_2) {
                                // Rule at src/isa/s390x/lower.isle line 3350.
                                let expr0_0 = constructor_ty_ext32(ctx, pattern4_0)?;
                                let expr1_0 = constructor_put_in_reg_sext32(ctx, pattern2_0)?;
                                let expr2_0 = constructor_sink_load(ctx, pattern8_0)?;
                                let expr3_0 =
                                    constructor_icmps_mem_sext16(ctx, expr0_0, expr1_0, &expr2_0)?;
                                return Some(expr3_0);
                            }
                        }
                    }
                }
            }
        }
    }
    let pattern0_0 = arg0;
    if pattern0_0 == true {
        let pattern2_0 = arg1;
        let pattern3_0 = C::value_type(ctx, pattern2_0);
        if let Some(pattern4_0) = C::fits_in_64(ctx, pattern3_0) {
            let pattern5_0 = arg2;
            if let Some(pattern6_0) = C::sinkable_inst(ctx, pattern5_0) {
                let pattern7_0 = C::inst_data(ctx, pattern6_0);
                if let &InstructionData::Load {
                    opcode: ref pattern8_0,
                    arg: pattern8_1,
                    flags: pattern8_2,
                    offset: pattern8_3,
                } = &pattern7_0
                {
                    match pattern8_0 {
                        &Opcode::Sload16 => {
                            if let Some(()) = C::bigendian(ctx, pattern8_2) {
                                // Rule at src/isa/s390x/lower.isle line 3354.
                                let expr0_0 = C::put_in_reg(ctx, pattern2_0);
                                let expr1_0 = constructor_sink_sload16(ctx, pattern6_0)?;
                                let expr2_0 = constructor_icmps_mem_sext16(
                                    ctx, pattern4_0, expr0_0, &expr1_0,
                                )?;
                                return Some(expr2_0);
                            }
                        }
                        &Opcode::Sload32 => {
                            if let Some(()) = C::bigendian(ctx, pattern8_2) {
                                // Rule at src/isa/s390x/lower.isle line 3356.
                                let expr0_0 = C::put_in_reg(ctx, pattern2_0);
                                let expr1_0 = constructor_sink_sload32(ctx, pattern6_0)?;
                                let expr2_0 = constructor_icmps_mem_sext32(
                                    ctx, pattern4_0, expr0_0, &expr1_0,
                                )?;
                                return Some(expr2_0);
                            }
                        }
                        _ => {}
                    }
                }
            }
            let pattern6_0 = C::value_type(ctx, pattern5_0);
            if let Some(pattern7_0) = C::ty_32_or_64(ctx, pattern6_0) {
                if let Some(pattern8_0) = C::sinkable_inst(ctx, pattern5_0) {
                    let pattern9_0 = C::inst_data(ctx, pattern8_0);
                    if let &InstructionData::Load {
                        opcode: ref pattern10_0,
                        arg: pattern10_1,
                        flags: pattern10_2,
                        offset: pattern10_3,
                    } = &pattern9_0
                    {
                        if let &Opcode::Load = pattern10_0 {
                            if let Some(()) = C::bigendian(ctx, pattern10_2) {
                                // Rule at src/isa/s390x/lower.isle line 3346.
                                let expr0_0 = C::put_in_reg(ctx, pattern2_0);
                                let expr1_0 = constructor_sink_load(ctx, pattern8_0)?;
                                let expr2_0 =
                                    constructor_icmps_mem(ctx, pattern4_0, expr0_0, &expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                    }
                }
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = C::value_type(ctx, pattern1_0);
    if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
        let pattern4_0 = arg2;
        if let Some(pattern5_0) = C::def_inst(ctx, pattern4_0) {
            let pattern6_0 = C::inst_data(ctx, pattern5_0);
            if let &InstructionData::Unary {
                opcode: ref pattern7_0,
                arg: pattern7_1,
            } = &pattern6_0
            {
                if let &Opcode::Sextend = pattern7_0 {
                    let pattern9_0 = C::value_type(ctx, pattern7_1);
                    if pattern9_0 == I32 {
                        // Rule at src/isa/s390x/lower.isle line 3336.
                        let expr0_0 = C::put_in_reg(ctx, pattern1_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr2_0 =
                            constructor_icmps_reg_sext32(ctx, pattern3_0, expr0_0, expr1_0)?;
                        return Some(expr2_0);
                    }
                }
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = C::value_type(ctx, pattern1_0);
    if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
        let pattern4_0 = arg2;
        if let Some(pattern5_0) = C::i16_from_value(ctx, pattern4_0) {
            // Rule at src/isa/s390x/lower.isle line 3340.
            let expr0_0 = constructor_ty_ext32(ctx, pattern3_0)?;
            let expr1_0 = constructor_put_in_reg_sext32(ctx, pattern1_0)?;
            let expr2_0 = constructor_icmps_simm16(ctx, expr0_0, expr1_0, pattern5_0)?;
            return Some(expr2_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = C::value_type(ctx, pattern1_0);
    if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
        let pattern4_0 = arg2;
        if let Some(pattern5_0) = C::i32_from_value(ctx, pattern4_0) {
            // Rule at src/isa/s390x/lower.isle line 3342.
            let expr0_0 = constructor_ty_ext32(ctx, pattern3_0)?;
            let expr1_0 = constructor_put_in_reg_sext32(ctx, pattern1_0)?;
            let expr2_0 = constructor_icmps_simm32(ctx, expr0_0, expr1_0, pattern5_0)?;
            return Some(expr2_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = C::value_type(ctx, pattern1_0);
    if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
        let pattern4_0 = arg2;
        // Rule at src/isa/s390x/lower.isle line 3332.
        let expr0_0 = constructor_ty_ext32(ctx, pattern3_0)?;
        let expr1_0 = constructor_put_in_reg_sext32(ctx, pattern1_0)?;
        let expr2_0 = constructor_put_in_reg_sext32(ctx, pattern4_0)?;
        let expr3_0 = constructor_icmps_reg(ctx, expr0_0, expr1_0, expr2_0)?;
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term icmpu_val.
pub fn constructor_icmpu_val<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Value,
    arg2: Value,
) -> Option<ProducesFlags> {
    let pattern0_0 = arg0;
    if pattern0_0 == true {
        let pattern2_0 = arg1;
        let pattern3_0 = C::value_type(ctx, pattern2_0);
        if let Some(pattern4_0) = C::fits_in_64(ctx, pattern3_0) {
            let pattern5_0 = arg2;
            let pattern6_0 = C::value_type(ctx, pattern5_0);
            if let Some(pattern7_0) = C::ty_32_or_64(ctx, pattern6_0) {
                if let Some(pattern8_0) = C::sinkable_inst(ctx, pattern5_0) {
                    let pattern9_0 = C::inst_data(ctx, pattern8_0);
                    if let &InstructionData::Load {
                        opcode: ref pattern10_0,
                        arg: pattern10_1,
                        flags: pattern10_2,
                        offset: pattern10_3,
                    } = &pattern9_0
                    {
                        if let &Opcode::Load = pattern10_0 {
                            if let Some(()) = C::bigendian(ctx, pattern10_2) {
                                // Rule at src/isa/s390x/lower.isle line 3376.
                                let expr0_0 = C::put_in_reg(ctx, pattern2_0);
                                let expr1_0 = constructor_sink_load(ctx, pattern8_0)?;
                                let expr2_0 =
                                    constructor_icmpu_mem(ctx, pattern4_0, expr0_0, &expr1_0)?;
                                return Some(expr2_0);
                            }
                        }
                    }
                }
            }
        }
    }
    let pattern0_0 = arg0;
    if pattern0_0 == true {
        let pattern2_0 = arg1;
        let pattern3_0 = C::value_type(ctx, pattern2_0);
        if let Some(pattern4_0) = C::fits_in_64(ctx, pattern3_0) {
            let pattern5_0 = arg2;
            if let Some(pattern6_0) = C::sinkable_inst(ctx, pattern5_0) {
                let pattern7_0 = C::inst_data(ctx, pattern6_0);
                if let &InstructionData::Load {
                    opcode: ref pattern8_0,
                    arg: pattern8_1,
                    flags: pattern8_2,
                    offset: pattern8_3,
                } = &pattern7_0
                {
                    match pattern8_0 {
                        &Opcode::Uload16 => {
                            if let Some(()) = C::bigendian(ctx, pattern8_2) {
                                let mut closure11 = || {
                                    let expr0_0 = constructor_uload16_sym(ctx, pattern6_0)?;
                                    return Some(expr0_0);
                                };
                                if let Some(pattern11_0) = closure11() {
                                    // Rule at src/isa/s390x/lower.isle line 3390.
                                    let expr0_0 = C::put_in_reg(ctx, pattern2_0);
                                    let expr1_0 = constructor_sink_uload16(ctx, pattern11_0)?;
                                    let expr2_0 = constructor_icmpu_mem_zext16(
                                        ctx, pattern4_0, expr0_0, &expr1_0,
                                    )?;
                                    return Some(expr2_0);
                                }
                            }
                        }
                        &Opcode::Uload32 => {
                            if let Some(()) = C::bigendian(ctx, pattern8_2) {
                                // Rule at src/isa/s390x/lower.isle line 3394.
                                let expr0_0 = C::put_in_reg(ctx, pattern2_0);
                                let expr1_0 = constructor_sink_uload32(ctx, pattern6_0)?;
                                let expr2_0 = constructor_icmpu_mem_zext32(
                                    ctx, pattern4_0, expr0_0, &expr1_0,
                                )?;
                                return Some(expr2_0);
                            }
                        }
                        _ => {}
                    }
                }
            }
            let pattern6_0 = C::value_type(ctx, pattern5_0);
            if pattern6_0 == I16 {
                if let Some(pattern8_0) = C::sinkable_inst(ctx, pattern5_0) {
                    let pattern9_0 = C::inst_data(ctx, pattern8_0);
                    if let &InstructionData::Load {
                        opcode: ref pattern10_0,
                        arg: pattern10_1,
                        flags: pattern10_2,
                        offset: pattern10_3,
                    } = &pattern9_0
                    {
                        if let &Opcode::Load = pattern10_0 {
                            if let Some(()) = C::bigendian(ctx, pattern10_2) {
                                let mut closure13 = || {
                                    let expr0_0 = constructor_load_sym(ctx, pattern8_0)?;
                                    return Some(expr0_0);
                                };
                                if let Some(pattern13_0) = closure13() {
                                    // Rule at src/isa/s390x/lower.isle line 3382.
                                    let expr0_0 = constructor_ty_ext32(ctx, pattern4_0)?;
                                    let expr1_0 = constructor_put_in_reg_zext32(ctx, pattern2_0)?;
                                    let expr2_0 = constructor_sink_load(ctx, pattern13_0)?;
                                    let expr3_0 = constructor_icmpu_mem_zext16(
                                        ctx, expr0_0, expr1_0, &expr2_0,
                                    )?;
                                    return Some(expr3_0);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = C::value_type(ctx, pattern1_0);
    if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
        let pattern4_0 = arg2;
        if let Some(pattern5_0) = C::u32_from_value(ctx, pattern4_0) {
            // Rule at src/isa/s390x/lower.isle line 3372.
            let expr0_0 = constructor_ty_ext32(ctx, pattern3_0)?;
            let expr1_0 = constructor_put_in_reg_zext32(ctx, pattern1_0)?;
            let expr2_0 = constructor_icmpu_uimm32(ctx, expr0_0, expr1_0, pattern5_0)?;
            return Some(expr2_0);
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = C::value_type(ctx, pattern1_0);
    if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
        let pattern4_0 = arg2;
        if let Some(pattern5_0) = C::def_inst(ctx, pattern4_0) {
            let pattern6_0 = C::inst_data(ctx, pattern5_0);
            if let &InstructionData::Unary {
                opcode: ref pattern7_0,
                arg: pattern7_1,
            } = &pattern6_0
            {
                if let &Opcode::Uextend = pattern7_0 {
                    let pattern9_0 = C::value_type(ctx, pattern7_1);
                    if pattern9_0 == I32 {
                        // Rule at src/isa/s390x/lower.isle line 3368.
                        let expr0_0 = C::put_in_reg(ctx, pattern1_0);
                        let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                        let expr2_0 =
                            constructor_icmpu_reg_zext32(ctx, pattern3_0, expr0_0, expr1_0)?;
                        return Some(expr2_0);
                    }
                }
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = C::value_type(ctx, pattern1_0);
    if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
        let pattern4_0 = arg2;
        // Rule at src/isa/s390x/lower.isle line 3364.
        let expr0_0 = constructor_ty_ext32(ctx, pattern3_0)?;
        let expr1_0 = constructor_put_in_reg_zext32(ctx, pattern1_0)?;
        let expr2_0 = constructor_put_in_reg_zext32(ctx, pattern4_0)?;
        let expr3_0 = constructor_icmpu_reg(ctx, expr0_0, expr1_0, expr2_0)?;
        return Some(expr3_0);
    }
    return None;
}

// Generated as internal constructor for term fcmp_val.
pub fn constructor_fcmp_val<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Value,
    arg2: Value,
) -> Option<ProducesBool> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = C::value_type(ctx, pattern1_0);
    let pattern3_0 = arg2;
    // Rule at src/isa/s390x/lower.isle line 3464.
    let expr0_0 = C::put_in_reg(ctx, pattern1_0);
    let expr1_0 = C::put_in_reg(ctx, pattern3_0);
    let expr2_0 = constructor_fcmp_reg(ctx, pattern2_0, expr0_0, expr1_0)?;
    let expr3_0 = C::floatcc_as_cond(ctx, pattern0_0);
    let expr4_0 = constructor_bool(ctx, &expr2_0, &expr3_0)?;
    return Some(expr4_0);
}

// Generated as internal constructor for term vall_true_val.
pub fn constructor_vall_true_val<C: Context>(ctx: &mut C, arg0: Value) -> Option<ProducesBool> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::def_inst(ctx, pattern0_0) {
        if let Some(pattern2_0) = C::first_result(ctx, pattern1_0) {
            let pattern3_0 = C::value_type(ctx, pattern2_0);
            let pattern4_0 = C::inst_data(ctx, pattern1_0);
            match &pattern4_0 {
                &InstructionData::FloatCompare {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    cond: ref pattern5_2,
                } => {
                    if let &Opcode::Fcmp = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        match pattern5_2 {
                            &FloatCC::Equal => {
                                // Rule at src/isa/s390x/lower.isle line 3547.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_fcmpeqs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Equal;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &FloatCC::GreaterThan => {
                                // Rule at src/isa/s390x/lower.isle line 3553.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_fcmphs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Equal;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &FloatCC::GreaterThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3559.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_fcmphes(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Equal;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &FloatCC::LessThan => {
                                // Rule at src/isa/s390x/lower.isle line 3565.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_fcmphs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Equal;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &FloatCC::LessThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3571.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_fcmphes(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Equal;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &FloatCC::NotEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3550.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_fcmpeqs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Unordered;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &FloatCC::UnorderedOrGreaterThan => {
                                // Rule at src/isa/s390x/lower.isle line 3574.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_fcmphes(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Unordered;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &FloatCC::UnorderedOrGreaterThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3568.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_fcmphs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Unordered;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &FloatCC::UnorderedOrLessThan => {
                                // Rule at src/isa/s390x/lower.isle line 3562.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_fcmphes(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Unordered;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &FloatCC::UnorderedOrLessThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3556.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_fcmphs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Unordered;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            _ => {}
                        }
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    cond: ref pattern5_2,
                } => {
                    if let &Opcode::Icmp = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        match pattern5_2 {
                            &IntCC::Equal => {
                                // Rule at src/isa/s390x/lower.isle line 3515.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_cmpeqs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Equal;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &IntCC::NotEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3518.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_cmpeqs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Unordered;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &IntCC::SignedGreaterThan => {
                                // Rule at src/isa/s390x/lower.isle line 3521.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_cmphs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Equal;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &IntCC::SignedGreaterThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3530.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_cmphs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Unordered;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &IntCC::SignedLessThan => {
                                // Rule at src/isa/s390x/lower.isle line 3527.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_cmphs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Equal;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &IntCC::SignedLessThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3524.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_cmphs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Unordered;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &IntCC::UnsignedGreaterThan => {
                                // Rule at src/isa/s390x/lower.isle line 3533.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_cmphls(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Equal;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &IntCC::UnsignedGreaterThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3542.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_cmphls(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Unordered;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &IntCC::UnsignedLessThan => {
                                // Rule at src/isa/s390x/lower.isle line 3539.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_cmphls(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Equal;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &IntCC::UnsignedLessThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3536.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_cmphls(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Unordered;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    // Rule at src/isa/s390x/lower.isle line 3510.
    let expr0_0 = C::put_in_reg(ctx, pattern0_0);
    let expr1_0: u128 = 0i128 as u128;
    let expr2_0 = constructor_vec_imm(ctx, pattern1_0, expr1_0)?;
    let expr3_0 = constructor_vec_cmpeqs(ctx, pattern1_0, expr0_0, expr2_0)?;
    let expr4_0 = FloatCC::Unordered;
    let expr5_0 = C::floatcc_as_cond(ctx, &expr4_0);
    let expr6_0 = constructor_bool(ctx, &expr3_0, &expr5_0)?;
    return Some(expr6_0);
}

// Generated as internal constructor for term vany_true_val.
pub fn constructor_vany_true_val<C: Context>(ctx: &mut C, arg0: Value) -> Option<ProducesBool> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::def_inst(ctx, pattern0_0) {
        if let Some(pattern2_0) = C::first_result(ctx, pattern1_0) {
            let pattern3_0 = C::value_type(ctx, pattern2_0);
            let pattern4_0 = C::inst_data(ctx, pattern1_0);
            match &pattern4_0 {
                &InstructionData::FloatCompare {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    cond: ref pattern5_2,
                } => {
                    if let &Opcode::Fcmp = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        match pattern5_2 {
                            &FloatCC::Equal => {
                                // Rule at src/isa/s390x/lower.isle line 3625.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_fcmpeqs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Ordered;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &FloatCC::GreaterThan => {
                                // Rule at src/isa/s390x/lower.isle line 3631.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_fcmphs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Ordered;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &FloatCC::GreaterThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3637.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_fcmphes(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Ordered;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &FloatCC::LessThan => {
                                // Rule at src/isa/s390x/lower.isle line 3643.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_fcmphs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Ordered;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &FloatCC::LessThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3649.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_fcmphes(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Ordered;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &FloatCC::NotEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3628.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_fcmpeqs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::NotEqual;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &FloatCC::UnorderedOrGreaterThan => {
                                // Rule at src/isa/s390x/lower.isle line 3652.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_fcmphes(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::NotEqual;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &FloatCC::UnorderedOrGreaterThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3646.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_fcmphs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::NotEqual;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &FloatCC::UnorderedOrLessThan => {
                                // Rule at src/isa/s390x/lower.isle line 3640.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_fcmphes(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::NotEqual;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &FloatCC::UnorderedOrLessThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3634.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_fcmphs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::NotEqual;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            _ => {}
                        }
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref pattern5_0,
                    args: ref pattern5_1,
                    cond: ref pattern5_2,
                } => {
                    if let &Opcode::Icmp = pattern5_0 {
                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
                        match pattern5_2 {
                            &IntCC::Equal => {
                                // Rule at src/isa/s390x/lower.isle line 3593.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_cmpeqs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Ordered;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &IntCC::NotEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3596.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_cmpeqs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::NotEqual;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &IntCC::SignedGreaterThan => {
                                // Rule at src/isa/s390x/lower.isle line 3599.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_cmphs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Ordered;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &IntCC::SignedGreaterThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3608.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_cmphs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::NotEqual;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &IntCC::SignedLessThan => {
                                // Rule at src/isa/s390x/lower.isle line 3605.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_cmphs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Ordered;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &IntCC::SignedLessThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3602.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_cmphs(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::NotEqual;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &IntCC::UnsignedGreaterThan => {
                                // Rule at src/isa/s390x/lower.isle line 3611.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_cmphls(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Ordered;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &IntCC::UnsignedGreaterThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3620.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_cmphls(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::NotEqual;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &IntCC::UnsignedLessThan => {
                                // Rule at src/isa/s390x/lower.isle line 3617.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr2_0 =
                                    constructor_vec_cmphls(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::Ordered;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            &IntCC::UnsignedLessThanOrEqual => {
                                // Rule at src/isa/s390x/lower.isle line 3614.
                                let expr0_0 = C::put_in_reg(ctx, pattern7_0);
                                let expr1_0 = C::put_in_reg(ctx, pattern7_1);
                                let expr2_0 =
                                    constructor_vec_cmphls(ctx, pattern3_0, expr0_0, expr1_0)?;
                                let expr3_0 = FloatCC::NotEqual;
                                let expr4_0 = C::floatcc_as_cond(ctx, &expr3_0);
                                let expr5_0 = constructor_bool(ctx, &expr2_0, &expr4_0)?;
                                return Some(expr5_0);
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    // Rule at src/isa/s390x/lower.isle line 3588.
    let expr0_0 = C::put_in_reg(ctx, pattern0_0);
    let expr1_0: u128 = 0i128 as u128;
    let expr2_0 = constructor_vec_imm(ctx, pattern1_0, expr1_0)?;
    let expr3_0 = constructor_vec_cmpeqs(ctx, pattern1_0, expr0_0, expr2_0)?;
    let expr4_0 = FloatCC::NotEqual;
    let expr5_0 = C::floatcc_as_cond(ctx, &expr4_0);
    let expr6_0 = constructor_bool(ctx, &expr3_0, &expr5_0)?;
    return Some(expr6_0);
}

// Generated as internal constructor for term value_nonzero.
pub fn constructor_value_nonzero<C: Context>(ctx: &mut C, arg0: Value) -> Option<ProducesBool> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::def_inst(ctx, pattern0_0) {
        let pattern2_0 = C::inst_data(ctx, pattern1_0);
        match &pattern2_0 {
            &InstructionData::FloatCompare {
                opcode: ref pattern3_0,
                args: ref pattern3_1,
                cond: ref pattern3_2,
            } => {
                if let &Opcode::Fcmp = pattern3_0 {
                    let (pattern5_0, pattern5_1) = C::unpack_value_array_2(ctx, pattern3_1);
                    // Rule at src/isa/s390x/lower.isle line 3726.
                    let expr0_0 = constructor_fcmp_val(ctx, pattern3_2, pattern5_0, pattern5_1)?;
                    return Some(expr0_0);
                }
            }
            &InstructionData::IntCompare {
                opcode: ref pattern3_0,
                args: ref pattern3_1,
                cond: ref pattern3_2,
            } => {
                if let &Opcode::Icmp = pattern3_0 {
                    let (pattern5_0, pattern5_1) = C::unpack_value_array_2(ctx, pattern3_1);
                    // Rule at src/isa/s390x/lower.isle line 3725.
                    let expr0_0: bool = false;
                    let expr1_0 =
                        constructor_icmp_val(ctx, expr0_0, pattern3_2, pattern5_0, pattern5_1)?;
                    return Some(expr1_0);
                }
            }
            _ => {}
        }
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::gpr32_ty(ctx, pattern1_0) {
        // Rule at src/isa/s390x/lower.isle line 3727.
        let expr0_0: Type = I32;
        let expr1_0 = constructor_put_in_reg_sext32(ctx, pattern0_0)?;
        let expr2_0: i16 = 0i128 as i16;
        let expr3_0 = constructor_icmps_simm16(ctx, expr0_0, expr1_0, expr2_0)?;
        let expr4_0 = IntCC::NotEqual;
        let expr5_0 = C::intcc_as_cond(ctx, &expr4_0);
        let expr6_0 = constructor_bool(ctx, &expr3_0, &expr5_0)?;
        return Some(expr6_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::gpr64_ty(ctx, pattern1_0) {
        // Rule at src/isa/s390x/lower.isle line 3730.
        let expr0_0: Type = I64;
        let expr1_0 = C::put_in_reg(ctx, pattern0_0);
        let expr2_0: i16 = 0i128 as i16;
        let expr3_0 = constructor_icmps_simm16(ctx, expr0_0, expr1_0, expr2_0)?;
        let expr4_0 = IntCC::NotEqual;
        let expr5_0 = C::intcc_as_cond(ctx, &expr4_0);
        let expr6_0 = constructor_bool(ctx, &expr3_0, &expr5_0)?;
        return Some(expr6_0);
    }
    let pattern0_0 = arg0;
    let pattern1_0 = C::value_type(ctx, pattern0_0);
    if let Some(pattern2_0) = C::vr128_ty(ctx, pattern1_0) {
        // Rule at src/isa/s390x/lower.isle line 3733.
        let expr0_0: Type = I64X2;
        let expr1_0 = C::put_in_reg(ctx, pattern0_0);
        let expr2_0: Type = I64X2;
        let expr3_0: u128 = 0i128 as u128;
        let expr4_0 = constructor_vec_imm(ctx, expr2_0, expr3_0)?;
        let expr5_0 = constructor_vec_cmpeqs(ctx, expr0_0, expr1_0, expr4_0)?;
        let expr6_0 = FloatCC::NotEqual;
        let expr7_0 = C::floatcc_as_cond(ctx, &expr6_0);
        let expr8_0 = constructor_bool(ctx, &expr5_0, &expr7_0)?;
        return Some(expr8_0);
    }
    return None;
}

// Generated as internal constructor for term lower_call_args.
pub fn constructor_lower_call_args<C: Context>(
    ctx: &mut C,
    arg0: &Sig,
    arg1: Range,
    arg2: ValueSlice,
) -> Option<CallArgList> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    // Rule at src/isa/s390x/lower.isle line 3964.
    let expr0_0 = C::args_builder_new(ctx);
    let expr1_0 = constructor_lower_call_args_buffer(ctx, pattern0_0, pattern1_0, pattern2_0)?;
    let expr2_0 =
        constructor_lower_call_args_slots(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
    let expr3_0 = constructor_lower_call_ret_arg(ctx, pattern0_0, &expr0_0)?;
    let expr4_0 = C::args_builder_finish(ctx, &expr0_0);
    return Some(expr4_0);
}

// Generated as internal constructor for term lower_call_args_buffer.
pub fn constructor_lower_call_args_buffer<C: Context>(
    ctx: &mut C,
    arg0: &Sig,
    arg1: Range,
    arg2: ValueSlice,
) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = C::range_view(ctx, pattern1_0);
    match &pattern2_0 {
        &RangeView::Empty => {
            let pattern4_0 = arg2;
            // Rule at src/isa/s390x/lower.isle line 3973.
            let expr0_0 = C::output_none(ctx);
            return Some(expr0_0);
        }
        &RangeView::NonEmpty {
            index: pattern3_0,
            rest: pattern3_1,
        } => {
            let pattern4_0 = arg2;
            // Rule at src/isa/s390x/lower.isle line 3974.
            let expr0_0: i64 = 0i128 as i64;
            let expr1_0 = C::abi_get_arg(ctx, pattern0_0, pattern3_0);
            let expr2_0 = C::value_slice_get(ctx, pattern4_0, pattern3_0);
            let expr3_0 = constructor_copy_to_buffer(ctx, expr0_0, &expr1_0, expr2_0)?;
            let expr4_0 =
                constructor_lower_call_args_buffer(ctx, pattern0_0, pattern3_1, pattern4_0)?;
            return Some(expr4_0);
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term lower_call_args_slots.
pub fn constructor_lower_call_args_slots<C: Context>(
    ctx: &mut C,
    arg0: &Sig,
    arg1: &CallArgListBuilder,
    arg2: Range,
    arg3: ValueSlice,
) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = C::range_view(ctx, pattern2_0);
    match &pattern3_0 {
        &RangeView::Empty => {
            let pattern5_0 = arg3;
            // Rule at src/isa/s390x/lower.isle line 3981.
            let expr0_0 = C::output_none(ctx);
            return Some(expr0_0);
        }
        &RangeView::NonEmpty {
            index: pattern4_0,
            rest: pattern4_1,
        } => {
            let pattern5_0 = arg3;
            // Rule at src/isa/s390x/lower.isle line 3982.
            let expr0_0 = C::abi_lane_order(ctx, pattern0_0);
            let expr1_0: i64 = 0i128 as i64;
            let expr2_0 = C::abi_get_arg(ctx, pattern0_0, pattern4_0);
            let expr3_0 = C::value_slice_get(ctx, pattern5_0, pattern4_0);
            let expr4_0 =
                constructor_copy_to_arg(ctx, pattern1_0, &expr0_0, expr1_0, &expr2_0, expr3_0)?;
            let expr5_0 = constructor_lower_call_args_slots(
                ctx, pattern0_0, pattern1_0, pattern4_1, pattern5_0,
            )?;
            return Some(expr5_0);
        }
        _ => {}
    }
    return None;
}

// Generated as internal constructor for term lower_call_ret_arg.
pub fn constructor_lower_call_ret_arg<C: Context>(
    ctx: &mut C,
    arg0: &Sig,
    arg1: &CallArgListBuilder,
) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    if let Some(pattern1_0) = C::abi_ret_arg(ctx, pattern0_0) {
        if let Some(pattern2_0) = C::abi_arg_only_slot(ctx, &pattern1_0) {
            let pattern3_0 = arg1;
            // Rule at src/isa/s390x/lower.isle line 3991.
            let expr0_0 = C::abi_sized_stack_arg_space(ctx, pattern0_0);
            let expr1_0: i64 = 0i128 as i64;
            let expr2_0 = C::memarg_stack_off(ctx, expr0_0, expr1_0);
            let expr3_0 = C::abi_lane_order(ctx, pattern0_0);
            let expr4_0: i64 = 0i128 as i64;
            let expr5_0 = constructor_load_addr(ctx, &expr2_0)?;
            let expr6_0 = constructor_copy_reg_to_arg_slot(
                ctx,
                pattern3_0,
                &expr3_0,
                expr4_0,
                &pattern2_0,
                expr5_0,
            )?;
            return Some(expr6_0);
        }
    }
    let pattern0_0 = arg0;
    if let Some(()) = C::abi_no_ret_arg(ctx, pattern0_0) {
        let pattern2_0 = arg1;
        // Rule at src/isa/s390x/lower.isle line 3990.
        let expr0_0 = C::output_none(ctx);
        return Some(expr0_0);
    }
    return None;
}

// Generated as internal constructor for term lower_call_rets.
pub fn constructor_lower_call_rets<C: Context>(
    ctx: &mut C,
    arg0: &Sig,
    arg1: &CallRetList,
    arg2: Range,
    arg3: &InstOutputBuilder,
) -> Option<InstOutput> {
    let pattern0_0 = arg0;
    let pattern1_0 = arg1;
    let pattern2_0 = arg2;
    let pattern3_0 = C::range_view(ctx, pattern2_0);
    match &pattern3_0 {
        &RangeView::Empty => {
            let pattern5_0 = arg3;
            // Rule at src/isa/s390x/lower.isle line 3997.
            let expr0_0 = C::output_builder_finish(ctx, pattern5_0);
            return Some(expr0_0);
        }
        &RangeView::NonEmpty {
            index: pattern4_0,
            rest: pattern4_1,
        } => {
            let pattern5_0 = arg3;
            // Rule at src/isa/s390x/lower.isle line 3998.
            let expr0_0 = C::abi_lane_order(ctx, pattern0_0);
            let expr1_0 = C::abi_sized_stack_arg_space(ctx, pattern0_0);
            let expr2_0 = C::abi_get_ret(ctx, pattern0_0, pattern4_0);
            let expr3_0 = constructor_copy_from_arg(ctx, pattern1_0, &expr0_0, expr1_0, &expr2_0)?;
            let expr4_0 = C::output_builder_push(ctx, pattern5_0, expr3_0);
            let expr5_0 =
                constructor_lower_call_rets(ctx, pattern0_0, pattern1_0, pattern4_1, pattern5_0)?;
            return Some(expr5_0);
        }
        _ => {}
    }
    return None;
}
