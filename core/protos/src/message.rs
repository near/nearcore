// This file is generated by rust-protobuf 2.2.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Status {
    // message fields
    version: ::std::option::Option<u32>,
    best_index: ::std::option::Option<u64>,
    best_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    genesis_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    account_id: ::protobuf::SingularField<::std::string::String>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl Status {
    pub fn new() -> Status {
        ::std::default::Default::default()
    }

    // required uint32 version = 1;

    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = ::std::option::Option::Some(v);
    }

    pub fn get_version(&self) -> u32 {
        self.version.unwrap_or(0)
    }

    // required uint64 best_index = 2;

    pub fn clear_best_index(&mut self) {
        self.best_index = ::std::option::Option::None;
    }

    pub fn has_best_index(&self) -> bool {
        self.best_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_best_index(&mut self, v: u64) {
        self.best_index = ::std::option::Option::Some(v);
    }

    pub fn get_best_index(&self) -> u64 {
        self.best_index.unwrap_or(0)
    }

    // required bytes best_hash = 3;

    pub fn clear_best_hash(&mut self) {
        self.best_hash.clear();
    }

    pub fn has_best_hash(&self) -> bool {
        self.best_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_best_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.best_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_best_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.best_hash.is_none() {
            self.best_hash.set_default();
        }
        self.best_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_best_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.best_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_best_hash(&self) -> &[u8] {
        match self.best_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // required bytes genesis_hash = 4;

    pub fn clear_genesis_hash(&mut self) {
        self.genesis_hash.clear();
    }

    pub fn has_genesis_hash(&self) -> bool {
        self.genesis_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_genesis_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.genesis_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_genesis_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.genesis_hash.is_none() {
            self.genesis_hash.set_default();
        }
        self.genesis_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_genesis_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.genesis_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_genesis_hash(&self) -> &[u8] {
        match self.genesis_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional string account_id = 5;

    pub fn clear_account_id(&mut self) {
        self.account_id.clear();
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: ::std::string::String) {
        self.account_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_id(&mut self) -> &mut ::std::string::String {
        if self.account_id.is_none() {
            self.account_id.set_default();
        }
        self.account_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_account_id(&mut self) -> ::std::string::String {
        self.account_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_account_id(&self) -> &str {
        match self.account_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for Status {
    fn is_initialized(&self) -> bool {
        if self.version.is_none() {
            return false;
        }
        if self.best_index.is_none() {
            return false;
        }
        if self.best_hash.is_none() {
            return false;
        }
        if self.genesis_hash.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.version = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.best_index = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.best_hash)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.genesis_hash)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.account_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.version {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.best_index {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.best_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(ref v) = self.genesis_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        if let Some(ref v) = self.account_id.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.version {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.best_index {
            os.write_uint64(2, v)?;
        }
        if let Some(ref v) = self.best_hash.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let Some(ref v) = self.genesis_hash.as_ref() {
            os.write_bytes(4, &v)?;
        }
        if let Some(ref v) = self.account_id.as_ref() {
            os.write_string(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Status {
        Status::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "version",
                    |m: &Status| { &m.version },
                    |m: &mut Status| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "best_index",
                    |m: &Status| { &m.best_index },
                    |m: &mut Status| { &mut m.best_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "best_hash",
                    |m: &Status| { &m.best_hash },
                    |m: &mut Status| { &mut m.best_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "genesis_hash",
                    |m: &Status| { &m.genesis_hash },
                    |m: &mut Status| { &mut m.genesis_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "account_id",
                    |m: &Status| { &m.account_id },
                    |m: &mut Status| { &mut m.account_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Status>(
                    "Status",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Status {
        static mut instance: ::protobuf::lazy::Lazy<Status> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Status,
        };
        unsafe {
            instance.get(Status::new)
        }
    }
}

impl ::protobuf::Clear for Status {
    fn clear(&mut self) {
        self.clear_version();
        self.clear_best_index();
        self.clear_best_hash();
        self.clear_genesis_hash();
        self.clear_account_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Status {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Status {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Message {
    // message oneof groups
    pub message_type: ::std::option::Option<Message_oneof_message_type>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum Message_oneof_message_type {
    transaction(::std::vec::Vec<u8>),
    receipt(::std::vec::Vec<u8>),
    status(Status),
    block_request(::std::vec::Vec<u8>),
    block_response(::std::vec::Vec<u8>),
    block_announce(::std::vec::Vec<u8>),
    gossip(::std::vec::Vec<u8>),
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    // optional bytes transaction = 1;

    pub fn clear_transaction(&mut self) {
        self.message_type = ::std::option::Option::None;
    }

    pub fn has_transaction(&self) -> bool {
        match self.message_type {
            ::std::option::Option::Some(Message_oneof_message_type::transaction(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: ::std::vec::Vec<u8>) {
        self.message_type = ::std::option::Option::Some(Message_oneof_message_type::transaction(v))
    }

    // Mutable pointer to the field.
    pub fn mut_transaction(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(Message_oneof_message_type::transaction(_)) = self.message_type {
        } else {
            self.message_type = ::std::option::Option::Some(Message_oneof_message_type::transaction(::std::vec::Vec::new()));
        }
        match self.message_type {
            ::std::option::Option::Some(Message_oneof_message_type::transaction(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_transaction(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_transaction() {
            match self.message_type.take() {
                ::std::option::Option::Some(Message_oneof_message_type::transaction(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    pub fn get_transaction(&self) -> &[u8] {
        match self.message_type {
            ::std::option::Option::Some(Message_oneof_message_type::transaction(ref v)) => v,
            _ => &[],
        }
    }

    // optional bytes receipt = 2;

    pub fn clear_receipt(&mut self) {
        self.message_type = ::std::option::Option::None;
    }

    pub fn has_receipt(&self) -> bool {
        match self.message_type {
            ::std::option::Option::Some(Message_oneof_message_type::receipt(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_receipt(&mut self, v: ::std::vec::Vec<u8>) {
        self.message_type = ::std::option::Option::Some(Message_oneof_message_type::receipt(v))
    }

    // Mutable pointer to the field.
    pub fn mut_receipt(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(Message_oneof_message_type::receipt(_)) = self.message_type {
        } else {
            self.message_type = ::std::option::Option::Some(Message_oneof_message_type::receipt(::std::vec::Vec::new()));
        }
        match self.message_type {
            ::std::option::Option::Some(Message_oneof_message_type::receipt(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_receipt(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_receipt() {
            match self.message_type.take() {
                ::std::option::Option::Some(Message_oneof_message_type::receipt(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    pub fn get_receipt(&self) -> &[u8] {
        match self.message_type {
            ::std::option::Option::Some(Message_oneof_message_type::receipt(ref v)) => v,
            _ => &[],
        }
    }

    // optional .Status status = 3;

    pub fn clear_status(&mut self) {
        self.message_type = ::std::option::Option::None;
    }

    pub fn has_status(&self) -> bool {
        match self.message_type {
            ::std::option::Option::Some(Message_oneof_message_type::status(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: Status) {
        self.message_type = ::std::option::Option::Some(Message_oneof_message_type::status(v))
    }

    // Mutable pointer to the field.
    pub fn mut_status(&mut self) -> &mut Status {
        if let ::std::option::Option::Some(Message_oneof_message_type::status(_)) = self.message_type {
        } else {
            self.message_type = ::std::option::Option::Some(Message_oneof_message_type::status(Status::new()));
        }
        match self.message_type {
            ::std::option::Option::Some(Message_oneof_message_type::status(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_status(&mut self) -> Status {
        if self.has_status() {
            match self.message_type.take() {
                ::std::option::Option::Some(Message_oneof_message_type::status(v)) => v,
                _ => panic!(),
            }
        } else {
            Status::new()
        }
    }

    pub fn get_status(&self) -> &Status {
        match self.message_type {
            ::std::option::Option::Some(Message_oneof_message_type::status(ref v)) => v,
            _ => Status::default_instance(),
        }
    }

    // optional bytes block_request = 4;

    pub fn clear_block_request(&mut self) {
        self.message_type = ::std::option::Option::None;
    }

    pub fn has_block_request(&self) -> bool {
        match self.message_type {
            ::std::option::Option::Some(Message_oneof_message_type::block_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_block_request(&mut self, v: ::std::vec::Vec<u8>) {
        self.message_type = ::std::option::Option::Some(Message_oneof_message_type::block_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_block_request(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(Message_oneof_message_type::block_request(_)) = self.message_type {
        } else {
            self.message_type = ::std::option::Option::Some(Message_oneof_message_type::block_request(::std::vec::Vec::new()));
        }
        match self.message_type {
            ::std::option::Option::Some(Message_oneof_message_type::block_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_block_request(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_block_request() {
            match self.message_type.take() {
                ::std::option::Option::Some(Message_oneof_message_type::block_request(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    pub fn get_block_request(&self) -> &[u8] {
        match self.message_type {
            ::std::option::Option::Some(Message_oneof_message_type::block_request(ref v)) => v,
            _ => &[],
        }
    }

    // optional bytes block_response = 5;

    pub fn clear_block_response(&mut self) {
        self.message_type = ::std::option::Option::None;
    }

    pub fn has_block_response(&self) -> bool {
        match self.message_type {
            ::std::option::Option::Some(Message_oneof_message_type::block_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_block_response(&mut self, v: ::std::vec::Vec<u8>) {
        self.message_type = ::std::option::Option::Some(Message_oneof_message_type::block_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_block_response(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(Message_oneof_message_type::block_response(_)) = self.message_type {
        } else {
            self.message_type = ::std::option::Option::Some(Message_oneof_message_type::block_response(::std::vec::Vec::new()));
        }
        match self.message_type {
            ::std::option::Option::Some(Message_oneof_message_type::block_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_block_response(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_block_response() {
            match self.message_type.take() {
                ::std::option::Option::Some(Message_oneof_message_type::block_response(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    pub fn get_block_response(&self) -> &[u8] {
        match self.message_type {
            ::std::option::Option::Some(Message_oneof_message_type::block_response(ref v)) => v,
            _ => &[],
        }
    }

    // optional bytes block_announce = 6;

    pub fn clear_block_announce(&mut self) {
        self.message_type = ::std::option::Option::None;
    }

    pub fn has_block_announce(&self) -> bool {
        match self.message_type {
            ::std::option::Option::Some(Message_oneof_message_type::block_announce(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_block_announce(&mut self, v: ::std::vec::Vec<u8>) {
        self.message_type = ::std::option::Option::Some(Message_oneof_message_type::block_announce(v))
    }

    // Mutable pointer to the field.
    pub fn mut_block_announce(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(Message_oneof_message_type::block_announce(_)) = self.message_type {
        } else {
            self.message_type = ::std::option::Option::Some(Message_oneof_message_type::block_announce(::std::vec::Vec::new()));
        }
        match self.message_type {
            ::std::option::Option::Some(Message_oneof_message_type::block_announce(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_block_announce(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_block_announce() {
            match self.message_type.take() {
                ::std::option::Option::Some(Message_oneof_message_type::block_announce(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    pub fn get_block_announce(&self) -> &[u8] {
        match self.message_type {
            ::std::option::Option::Some(Message_oneof_message_type::block_announce(ref v)) => v,
            _ => &[],
        }
    }

    // optional bytes gossip = 7;

    pub fn clear_gossip(&mut self) {
        self.message_type = ::std::option::Option::None;
    }

    pub fn has_gossip(&self) -> bool {
        match self.message_type {
            ::std::option::Option::Some(Message_oneof_message_type::gossip(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_gossip(&mut self, v: ::std::vec::Vec<u8>) {
        self.message_type = ::std::option::Option::Some(Message_oneof_message_type::gossip(v))
    }

    // Mutable pointer to the field.
    pub fn mut_gossip(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(Message_oneof_message_type::gossip(_)) = self.message_type {
        } else {
            self.message_type = ::std::option::Option::Some(Message_oneof_message_type::gossip(::std::vec::Vec::new()));
        }
        match self.message_type {
            ::std::option::Option::Some(Message_oneof_message_type::gossip(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_gossip(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_gossip() {
            match self.message_type.take() {
                ::std::option::Option::Some(Message_oneof_message_type::gossip(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    pub fn get_gossip(&self) -> &[u8] {
        match self.message_type {
            ::std::option::Option::Some(Message_oneof_message_type::gossip(ref v)) => v,
            _ => &[],
        }
    }
}

impl ::protobuf::Message for Message {
    fn is_initialized(&self) -> bool {
        if let Some(Message_oneof_message_type::status(ref v)) = self.message_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message_type = ::std::option::Option::Some(Message_oneof_message_type::transaction(is.read_bytes()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message_type = ::std::option::Option::Some(Message_oneof_message_type::receipt(is.read_bytes()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message_type = ::std::option::Option::Some(Message_oneof_message_type::status(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message_type = ::std::option::Option::Some(Message_oneof_message_type::block_request(is.read_bytes()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message_type = ::std::option::Option::Some(Message_oneof_message_type::block_response(is.read_bytes()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message_type = ::std::option::Option::Some(Message_oneof_message_type::block_announce(is.read_bytes()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message_type = ::std::option::Option::Some(Message_oneof_message_type::gossip(is.read_bytes()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.message_type {
            match v {
                &Message_oneof_message_type::transaction(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(1, &v);
                },
                &Message_oneof_message_type::receipt(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(2, &v);
                },
                &Message_oneof_message_type::status(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Message_oneof_message_type::block_request(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(4, &v);
                },
                &Message_oneof_message_type::block_response(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(5, &v);
                },
                &Message_oneof_message_type::block_announce(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(6, &v);
                },
                &Message_oneof_message_type::gossip(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(7, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.message_type {
            match v {
                &Message_oneof_message_type::transaction(ref v) => {
                    os.write_bytes(1, v)?;
                },
                &Message_oneof_message_type::receipt(ref v) => {
                    os.write_bytes(2, v)?;
                },
                &Message_oneof_message_type::status(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Message_oneof_message_type::block_request(ref v) => {
                    os.write_bytes(4, v)?;
                },
                &Message_oneof_message_type::block_response(ref v) => {
                    os.write_bytes(5, v)?;
                },
                &Message_oneof_message_type::block_announce(ref v) => {
                    os.write_bytes(6, v)?;
                },
                &Message_oneof_message_type::gossip(ref v) => {
                    os.write_bytes(7, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Message {
        Message::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "transaction",
                    Message::has_transaction,
                    Message::get_transaction,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "receipt",
                    Message::has_receipt,
                    Message::get_receipt,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Status>(
                    "status",
                    Message::has_status,
                    Message::get_status,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "block_request",
                    Message::has_block_request,
                    Message::get_block_request,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "block_response",
                    Message::has_block_response,
                    Message::get_block_response,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "block_announce",
                    Message::has_block_announce,
                    Message::get_block_announce,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "gossip",
                    Message::has_gossip,
                    Message::get_gossip,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Message>(
                    "Message",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Message {
        static mut instance: ::protobuf::lazy::Lazy<Message> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Message,
        };
        unsafe {
            instance.get(Message::new)
        }
    }
}

impl ::protobuf::Clear for Message {
    fn clear(&mut self) {
        self.clear_transaction();
        self.clear_receipt();
        self.clear_status();
        self.clear_block_request();
        self.clear_block_response();
        self.clear_block_announce();
        self.clear_gossip();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmessage.proto\x1a\x11transaction.proto\"j\n\x06Status\x12\x0f\n\x07v\
    ersion\x18\x01\x20\x02(\r\x12\x12\n\nbest_index\x18\x02\x20\x02(\x04\x12\
    \x11\n\tbest_hash\x18\x03\x20\x02(\x0c\x12\x14\n\x0cgenesis_hash\x18\x04\
    \x20\x02(\x0c\x12\x12\n\naccount_id\x18\x05\x20\x01(\t\"\xbd\x01\n\x07Me\
    ssage\x12\x15\n\x0btransaction\x18\x01\x20\x01(\x0cH\0\x12\x11\n\x07rece\
    ipt\x18\x02\x20\x01(\x0cH\0\x12\x19\n\x06status\x18\x03\x20\x01(\x0b2\
    \x07.StatusH\0\x12\x17\n\rblock_request\x18\x04\x20\x01(\x0cH\0\x12\x18\
    \n\x0eblock_response\x18\x05\x20\x01(\x0cH\0\x12\x18\n\x0eblock_announce\
    \x18\x06\x20\x01(\x0cH\0\x12\x10\n\x06gossip\x18\x07\x20\x01(\x0cH\0B\
    \x0e\n\x0cmessage_type\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
