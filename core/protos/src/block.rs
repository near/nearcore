// This file is generated by rust-protobuf 2.2.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ShardBlockHeader {
    // message fields
    parent_hash: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    shard_id: ::std::option::Option<u32>,
    index: ::std::option::Option<u64>,
    merkle_root_state: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl ShardBlockHeader {
    pub fn new() -> ShardBlockHeader {
        ::std::default::Default::default()
    }

    // required bytes parent_hash = 1;

    pub fn clear_parent_hash(&mut self) {
        self.parent_hash.clear();
    }

    pub fn has_parent_hash(&self) -> bool {
        self.parent_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_parent_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.parent_hash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.parent_hash.is_none() {
            self.parent_hash.set_default();
        }
        self.parent_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_parent_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.parent_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_parent_hash(&self) -> &[u8] {
        match self.parent_hash.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // required uint32 shard_id = 2;

    pub fn clear_shard_id(&mut self) {
        self.shard_id = ::std::option::Option::None;
    }

    pub fn has_shard_id(&self) -> bool {
        self.shard_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shard_id(&mut self, v: u32) {
        self.shard_id = ::std::option::Option::Some(v);
    }

    pub fn get_shard_id(&self) -> u32 {
        self.shard_id.unwrap_or(0)
    }

    // required uint64 index = 3;

    pub fn clear_index(&mut self) {
        self.index = ::std::option::Option::None;
    }

    pub fn has_index(&self) -> bool {
        self.index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u64) {
        self.index = ::std::option::Option::Some(v);
    }

    pub fn get_index(&self) -> u64 {
        self.index.unwrap_or(0)
    }

    // required bytes merkle_root_state = 4;

    pub fn clear_merkle_root_state(&mut self) {
        self.merkle_root_state.clear();
    }

    pub fn has_merkle_root_state(&self) -> bool {
        self.merkle_root_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_merkle_root_state(&mut self, v: ::std::vec::Vec<u8>) {
        self.merkle_root_state = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_merkle_root_state(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.merkle_root_state.is_none() {
            self.merkle_root_state.set_default();
        }
        self.merkle_root_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_merkle_root_state(&mut self) -> ::std::vec::Vec<u8> {
        self.merkle_root_state.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_merkle_root_state(&self) -> &[u8] {
        match self.merkle_root_state.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for ShardBlockHeader {
    fn is_initialized(&self) -> bool {
        if self.parent_hash.is_none() {
            return false;
        }
        if self.shard_id.is_none() {
            return false;
        }
        if self.index.is_none() {
            return false;
        }
        if self.merkle_root_state.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.parent_hash)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.shard_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.index = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.merkle_root_state)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.parent_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.shard_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.index {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.merkle_root_state.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.parent_hash.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(v) = self.shard_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.index {
            os.write_uint64(3, v)?;
        }
        if let Some(ref v) = self.merkle_root_state.as_ref() {
            os.write_bytes(4, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShardBlockHeader {
        ShardBlockHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "parent_hash",
                    |m: &ShardBlockHeader| { &m.parent_hash },
                    |m: &mut ShardBlockHeader| { &mut m.parent_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "shard_id",
                    |m: &ShardBlockHeader| { &m.shard_id },
                    |m: &mut ShardBlockHeader| { &mut m.shard_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "index",
                    |m: &ShardBlockHeader| { &m.index },
                    |m: &mut ShardBlockHeader| { &mut m.index },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "merkle_root_state",
                    |m: &ShardBlockHeader| { &m.merkle_root_state },
                    |m: &mut ShardBlockHeader| { &mut m.merkle_root_state },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ShardBlockHeader>(
                    "ShardBlockHeader",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ShardBlockHeader {
        static mut instance: ::protobuf::lazy::Lazy<ShardBlockHeader> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ShardBlockHeader,
        };
        unsafe {
            instance.get(ShardBlockHeader::new)
        }
    }
}

impl ::protobuf::Clear for ShardBlockHeader {
    fn clear(&mut self) {
        self.clear_parent_hash();
        self.clear_shard_id();
        self.clear_index();
        self.clear_merkle_root_state();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShardBlockHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShardBlockHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SignedShardBlockHeader {
    // message fields
    body: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    authority_mask: ::std::vec::Vec<bool>,
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl SignedShardBlockHeader {
    pub fn new() -> SignedShardBlockHeader {
        ::std::default::Default::default()
    }

    // required bytes body = 1;

    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    pub fn has_body(&self) -> bool {
        self.body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.body = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.body.is_none() {
            self.body.set_default();
        }
        self.body.as_mut().unwrap()
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::vec::Vec<u8> {
        self.body.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_body(&self) -> &[u8] {
        match self.body.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // repeated bool authority_mask = 2;

    pub fn clear_authority_mask(&mut self) {
        self.authority_mask.clear();
    }

    // Param is passed by value, moved
    pub fn set_authority_mask(&mut self, v: ::std::vec::Vec<bool>) {
        self.authority_mask = v;
    }

    // Mutable pointer to the field.
    pub fn mut_authority_mask(&mut self) -> &mut ::std::vec::Vec<bool> {
        &mut self.authority_mask
    }

    // Take field
    pub fn take_authority_mask(&mut self) -> ::std::vec::Vec<bool> {
        ::std::mem::replace(&mut self.authority_mask, ::std::vec::Vec::new())
    }

    pub fn get_authority_mask(&self) -> &[bool] {
        &self.authority_mask
    }

    // required bytes signature = 3;

    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for SignedShardBlockHeader {
    fn is_initialized(&self) -> bool {
        if self.body.is_none() {
            return false;
        }
        if self.signature.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.body)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_bool_into(wire_type, is, &mut self.authority_mask)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.body.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += 2 * self.authority_mask.len() as u32;
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.body.as_ref() {
            os.write_bytes(1, &v)?;
        }
        for v in &self.authority_mask {
            os.write_bool(2, *v)?;
        };
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignedShardBlockHeader {
        SignedShardBlockHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "body",
                    |m: &SignedShardBlockHeader| { &m.body },
                    |m: &mut SignedShardBlockHeader| { &mut m.body },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "authority_mask",
                    |m: &SignedShardBlockHeader| { &m.authority_mask },
                    |m: &mut SignedShardBlockHeader| { &mut m.authority_mask },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "signature",
                    |m: &SignedShardBlockHeader| { &m.signature },
                    |m: &mut SignedShardBlockHeader| { &mut m.signature },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SignedShardBlockHeader>(
                    "SignedShardBlockHeader",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SignedShardBlockHeader {
        static mut instance: ::protobuf::lazy::Lazy<SignedShardBlockHeader> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SignedShardBlockHeader,
        };
        unsafe {
            instance.get(SignedShardBlockHeader::new)
        }
    }
}

impl ::protobuf::Clear for SignedShardBlockHeader {
    fn clear(&mut self) {
        self.clear_body();
        self.clear_authority_mask();
        self.clear_signature();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignedShardBlockHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedShardBlockHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SignedShardBlock {
    // message fields
    header: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    transactions: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    new_receipts: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    authority_mask: ::std::vec::Vec<bool>,
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl SignedShardBlock {
    pub fn new() -> SignedShardBlock {
        ::std::default::Default::default()
    }

    // required bytes header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: ::std::vec::Vec<u8>) {
        self.header = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> ::std::vec::Vec<u8> {
        self.header.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_header(&self) -> &[u8] {
        match self.header.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // repeated bytes transactions = 2;

    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }

    pub fn get_transactions(&self) -> &[::std::vec::Vec<u8>] {
        &self.transactions
    }

    // repeated bytes new_receipts = 3;

    pub fn clear_new_receipts(&mut self) {
        self.new_receipts.clear();
    }

    // Param is passed by value, moved
    pub fn set_new_receipts(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.new_receipts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_new_receipts(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.new_receipts
    }

    // Take field
    pub fn take_new_receipts(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.new_receipts, ::protobuf::RepeatedField::new())
    }

    pub fn get_new_receipts(&self) -> &[::std::vec::Vec<u8>] {
        &self.new_receipts
    }

    // repeated bool authority_mask = 4;

    pub fn clear_authority_mask(&mut self) {
        self.authority_mask.clear();
    }

    // Param is passed by value, moved
    pub fn set_authority_mask(&mut self, v: ::std::vec::Vec<bool>) {
        self.authority_mask = v;
    }

    // Mutable pointer to the field.
    pub fn mut_authority_mask(&mut self) -> &mut ::std::vec::Vec<bool> {
        &mut self.authority_mask
    }

    // Take field
    pub fn take_authority_mask(&mut self) -> ::std::vec::Vec<bool> {
        ::std::mem::replace(&mut self.authority_mask, ::std::vec::Vec::new())
    }

    pub fn get_authority_mask(&self) -> &[bool] {
        &self.authority_mask
    }

    // required bytes signature = 5;

    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for SignedShardBlock {
    fn is_initialized(&self) -> bool {
        if self.header.is_none() {
            return false;
        }
        if self.signature.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.transactions)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.new_receipts)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_bool_into(wire_type, is, &mut self.authority_mask)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        for value in &self.transactions {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        for value in &self.new_receipts {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        my_size += 2 * self.authority_mask.len() as u32;
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_bytes(1, &v)?;
        }
        for v in &self.transactions {
            os.write_bytes(2, &v)?;
        };
        for v in &self.new_receipts {
            os.write_bytes(3, &v)?;
        };
        for v in &self.authority_mask {
            os.write_bool(4, *v)?;
        };
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignedShardBlock {
        SignedShardBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "header",
                    |m: &SignedShardBlock| { &m.header },
                    |m: &mut SignedShardBlock| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "transactions",
                    |m: &SignedShardBlock| { &m.transactions },
                    |m: &mut SignedShardBlock| { &mut m.transactions },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "new_receipts",
                    |m: &SignedShardBlock| { &m.new_receipts },
                    |m: &mut SignedShardBlock| { &mut m.new_receipts },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "authority_mask",
                    |m: &SignedShardBlock| { &m.authority_mask },
                    |m: &mut SignedShardBlock| { &mut m.authority_mask },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "signature",
                    |m: &SignedShardBlock| { &m.signature },
                    |m: &mut SignedShardBlock| { &mut m.signature },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SignedShardBlock>(
                    "SignedShardBlock",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SignedShardBlock {
        static mut instance: ::protobuf::lazy::Lazy<SignedShardBlock> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SignedShardBlock,
        };
        unsafe {
            instance.get(SignedShardBlock::new)
        }
    }
}

impl ::protobuf::Clear for SignedShardBlock {
    fn clear(&mut self) {
        self.clear_header();
        self.clear_transactions();
        self.clear_new_receipts();
        self.clear_authority_mask();
        self.clear_signature();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignedShardBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedShardBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct BlockIndex {
    // message fields
    block: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    cumulative_weight: ::std::option::Option<u64>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl BlockIndex {
    pub fn new() -> BlockIndex {
        ::std::default::Default::default()
    }

    // required bytes block = 1;

    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: ::std::vec::Vec<u8>) {
        self.block = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> ::std::vec::Vec<u8> {
        self.block.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_block(&self) -> &[u8] {
        match self.block.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // required uint64 cumulative_weight = 2;

    pub fn clear_cumulative_weight(&mut self) {
        self.cumulative_weight = ::std::option::Option::None;
    }

    pub fn has_cumulative_weight(&self) -> bool {
        self.cumulative_weight.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cumulative_weight(&mut self, v: u64) {
        self.cumulative_weight = ::std::option::Option::Some(v);
    }

    pub fn get_cumulative_weight(&self) -> u64 {
        self.cumulative_weight.unwrap_or(0)
    }
}

impl ::protobuf::Message for BlockIndex {
    fn is_initialized(&self) -> bool {
        if self.block.is_none() {
            return false;
        }
        if self.cumulative_weight.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.block)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.cumulative_weight = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.block.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.cumulative_weight {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.block.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(v) = self.cumulative_weight {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockIndex {
        BlockIndex::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "block",
                    |m: &BlockIndex| { &m.block },
                    |m: &mut BlockIndex| { &mut m.block },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "cumulative_weight",
                    |m: &BlockIndex| { &m.cumulative_weight },
                    |m: &mut BlockIndex| { &mut m.cumulative_weight },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BlockIndex>(
                    "BlockIndex",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BlockIndex {
        static mut instance: ::protobuf::lazy::Lazy<BlockIndex> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BlockIndex,
        };
        unsafe {
            instance.get(BlockIndex::new)
        }
    }
}

impl ::protobuf::Clear for BlockIndex {
    fn clear(&mut self) {
        self.clear_block();
        self.clear_cumulative_weight();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockIndex {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockIndex {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bblock.proto\"\x90\x01\n\x10ShardBlockHeader\x12\x1f\n\x0bparent_ha\
    sh\x18\x01\x20\x02(\x0cR\nparentHash\x12\x19\n\x08shard_id\x18\x02\x20\
    \x02(\rR\x07shardId\x12\x14\n\x05index\x18\x03\x20\x02(\x04R\x05index\
    \x12*\n\x11merkle_root_state\x18\x04\x20\x02(\x0cR\x0fmerkleRootState\"q\
    \n\x16SignedShardBlockHeader\x12\x12\n\x04body\x18\x01\x20\x02(\x0cR\x04\
    body\x12%\n\x0eauthority_mask\x18\x02\x20\x03(\x08R\rauthorityMask\x12\
    \x1c\n\tsignature\x18\x03\x20\x02(\x0cR\tsignature\"\xb6\x01\n\x10Signed\
    ShardBlock\x12\x16\n\x06header\x18\x01\x20\x02(\x0cR\x06header\x12\"\n\
    \x0ctransactions\x18\x02\x20\x03(\x0cR\x0ctransactions\x12!\n\x0cnew_rec\
    eipts\x18\x03\x20\x03(\x0cR\x0bnewReceipts\x12%\n\x0eauthority_mask\x18\
    \x04\x20\x03(\x08R\rauthorityMask\x12\x1c\n\tsignature\x18\x05\x20\x02(\
    \x0cR\tsignature\"O\n\nBlockIndex\x12\x14\n\x05block\x18\x01\x20\x02(\
    \x0cR\x05block\x12+\n\x11cumulative_weight\x18\x02\x20\x02(\x04R\x10cumu\
    lativeWeight\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
