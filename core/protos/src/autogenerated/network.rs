// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct PeerInfo {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    pub addr: ::protobuf::SingularPtrField<::protobuf::well_known_types::StringValue>,
    pub account_id: ::protobuf::SingularPtrField<::protobuf::well_known_types::StringValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl PeerInfo {
    pub fn new() -> PeerInfo {
        ::std::default::Default::default()
    }

    // bytes id = 1;

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }

    pub fn get_id(&self) -> &[u8] {
        &self.id
    }

    // .google.protobuf.StringValue addr = 2;

    pub fn clear_addr(&mut self) {
        self.addr.clear();
    }

    pub fn has_addr(&self) -> bool {
        self.addr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_addr(&mut self, v: ::protobuf::well_known_types::StringValue) {
        self.addr = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addr(&mut self) -> &mut ::protobuf::well_known_types::StringValue {
        if self.addr.is_none() {
            self.addr.set_default();
        }
        self.addr.as_mut().unwrap()
    }

    // Take field
    pub fn take_addr(&mut self) -> ::protobuf::well_known_types::StringValue {
        self.addr.take().unwrap_or_else(|| ::protobuf::well_known_types::StringValue::new())
    }

    pub fn get_addr(&self) -> &::protobuf::well_known_types::StringValue {
        self.addr.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::StringValue::default_instance())
    }

    // .google.protobuf.StringValue account_id = 3;

    pub fn clear_account_id(&mut self) {
        self.account_id.clear();
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: ::protobuf::well_known_types::StringValue) {
        self.account_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_id(&mut self) -> &mut ::protobuf::well_known_types::StringValue {
        if self.account_id.is_none() {
            self.account_id.set_default();
        }
        self.account_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_account_id(&mut self) -> ::protobuf::well_known_types::StringValue {
        self.account_id.take().unwrap_or_else(|| ::protobuf::well_known_types::StringValue::new())
    }

    pub fn get_account_id(&self) -> &::protobuf::well_known_types::StringValue {
        self.account_id.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::StringValue::default_instance())
    }
}

impl ::protobuf::Message for PeerInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.addr {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.account_id {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.addr)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.account_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        if let Some(ref v) = self.addr.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.account_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        if let Some(ref v) = self.addr.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.account_id.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeerInfo {
        PeerInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &PeerInfo| { &m.id },
                    |m: &mut PeerInfo| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::StringValue>>(
                    "addr",
                    |m: &PeerInfo| { &m.addr },
                    |m: &mut PeerInfo| { &mut m.addr },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::StringValue>>(
                    "account_id",
                    |m: &PeerInfo| { &m.account_id },
                    |m: &mut PeerInfo| { &mut m.account_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PeerInfo>(
                    "PeerInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PeerInfo {
        static mut instance: ::protobuf::lazy::Lazy<PeerInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PeerInfo,
        };
        unsafe {
            instance.get(PeerInfo::new)
        }
    }
}

impl ::protobuf::Clear for PeerInfo {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_addr();
        self.clear_account_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeerInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeerInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConnectedInfo {
    // message fields
    pub chain_state: ::protobuf::SingularPtrField<super::chain::ChainState>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ConnectedInfo {
    pub fn new() -> ConnectedInfo {
        ::std::default::Default::default()
    }

    // .ChainState chain_state = 1;

    pub fn clear_chain_state(&mut self) {
        self.chain_state.clear();
    }

    pub fn has_chain_state(&self) -> bool {
        self.chain_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chain_state(&mut self, v: super::chain::ChainState) {
        self.chain_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chain_state(&mut self) -> &mut super::chain::ChainState {
        if self.chain_state.is_none() {
            self.chain_state.set_default();
        }
        self.chain_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_chain_state(&mut self) -> super::chain::ChainState {
        self.chain_state.take().unwrap_or_else(|| super::chain::ChainState::new())
    }

    pub fn get_chain_state(&self) -> &super::chain::ChainState {
        self.chain_state.as_ref().unwrap_or_else(|| super::chain::ChainState::default_instance())
    }
}

impl ::protobuf::Message for ConnectedInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.chain_state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.chain_state)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.chain_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.chain_state.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConnectedInfo {
        ConnectedInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::chain::ChainState>>(
                    "chain_state",
                    |m: &ConnectedInfo| { &m.chain_state },
                    |m: &mut ConnectedInfo| { &mut m.chain_state },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConnectedInfo>(
                    "ConnectedInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConnectedInfo {
        static mut instance: ::protobuf::lazy::Lazy<ConnectedInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConnectedInfo,
        };
        unsafe {
            instance.get(ConnectedInfo::new)
        }
    }
}

impl ::protobuf::Clear for ConnectedInfo {
    fn clear(&mut self) {
        self.clear_chain_state();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConnectedInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectedInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HandShake {
    // message fields
    pub version: u32,
    pub peer_id: ::std::vec::Vec<u8>,
    pub account_id: ::protobuf::SingularPtrField<::protobuf::well_known_types::StringValue>,
    pub listen_port: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub peers_info: ::protobuf::RepeatedField<PeerInfo>,
    pub connected_info: ::protobuf::SingularPtrField<ConnectedInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl HandShake {
    pub fn new() -> HandShake {
        ::std::default::Default::default()
    }

    // uint32 version = 1;

    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = v;
    }

    pub fn get_version(&self) -> u32 {
        self.version
    }

    // bytes peer_id = 2;

    pub fn clear_peer_id(&mut self) {
        self.peer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_peer_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.peer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peer_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.peer_id
    }

    // Take field
    pub fn take_peer_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.peer_id, ::std::vec::Vec::new())
    }

    pub fn get_peer_id(&self) -> &[u8] {
        &self.peer_id
    }

    // .google.protobuf.StringValue account_id = 3;

    pub fn clear_account_id(&mut self) {
        self.account_id.clear();
    }

    pub fn has_account_id(&self) -> bool {
        self.account_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account_id(&mut self, v: ::protobuf::well_known_types::StringValue) {
        self.account_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_id(&mut self) -> &mut ::protobuf::well_known_types::StringValue {
        if self.account_id.is_none() {
            self.account_id.set_default();
        }
        self.account_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_account_id(&mut self) -> ::protobuf::well_known_types::StringValue {
        self.account_id.take().unwrap_or_else(|| ::protobuf::well_known_types::StringValue::new())
    }

    pub fn get_account_id(&self) -> &::protobuf::well_known_types::StringValue {
        self.account_id.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::StringValue::default_instance())
    }

    // .google.protobuf.UInt32Value listen_port = 4;

    pub fn clear_listen_port(&mut self) {
        self.listen_port.clear();
    }

    pub fn has_listen_port(&self) -> bool {
        self.listen_port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_listen_port(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.listen_port = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_listen_port(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.listen_port.is_none() {
            self.listen_port.set_default();
        }
        self.listen_port.as_mut().unwrap()
    }

    // Take field
    pub fn take_listen_port(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.listen_port.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    pub fn get_listen_port(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.listen_port.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::default_instance())
    }

    // repeated .PeerInfo peers_info = 5;

    pub fn clear_peers_info(&mut self) {
        self.peers_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_peers_info(&mut self, v: ::protobuf::RepeatedField<PeerInfo>) {
        self.peers_info = v;
    }

    // Mutable pointer to the field.
    pub fn mut_peers_info(&mut self) -> &mut ::protobuf::RepeatedField<PeerInfo> {
        &mut self.peers_info
    }

    // Take field
    pub fn take_peers_info(&mut self) -> ::protobuf::RepeatedField<PeerInfo> {
        ::std::mem::replace(&mut self.peers_info, ::protobuf::RepeatedField::new())
    }

    pub fn get_peers_info(&self) -> &[PeerInfo] {
        &self.peers_info
    }

    // .ConnectedInfo connected_info = 6;

    pub fn clear_connected_info(&mut self) {
        self.connected_info.clear();
    }

    pub fn has_connected_info(&self) -> bool {
        self.connected_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connected_info(&mut self, v: ConnectedInfo) {
        self.connected_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connected_info(&mut self) -> &mut ConnectedInfo {
        if self.connected_info.is_none() {
            self.connected_info.set_default();
        }
        self.connected_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_connected_info(&mut self) -> ConnectedInfo {
        self.connected_info.take().unwrap_or_else(|| ConnectedInfo::new())
    }

    pub fn get_connected_info(&self) -> &ConnectedInfo {
        self.connected_info.as_ref().unwrap_or_else(|| ConnectedInfo::default_instance())
    }
}

impl ::protobuf::Message for HandShake {
    fn is_initialized(&self) -> bool {
        for v in &self.account_id {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.listen_port {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.peers_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.connected_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.version = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.peer_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.account_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.listen_port)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.peers_info)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.connected_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.peer_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.peer_id);
        }
        if let Some(ref v) = self.account_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.listen_port.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.peers_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.connected_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.version != 0 {
            os.write_uint32(1, self.version)?;
        }
        if !self.peer_id.is_empty() {
            os.write_bytes(2, &self.peer_id)?;
        }
        if let Some(ref v) = self.account_id.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.listen_port.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.peers_info {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.connected_info.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HandShake {
        HandShake::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "version",
                    |m: &HandShake| { &m.version },
                    |m: &mut HandShake| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "peer_id",
                    |m: &HandShake| { &m.peer_id },
                    |m: &mut HandShake| { &mut m.peer_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::StringValue>>(
                    "account_id",
                    |m: &HandShake| { &m.account_id },
                    |m: &mut HandShake| { &mut m.account_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                    "listen_port",
                    |m: &HandShake| { &m.listen_port },
                    |m: &mut HandShake| { &mut m.listen_port },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PeerInfo>>(
                    "peers_info",
                    |m: &HandShake| { &m.peers_info },
                    |m: &mut HandShake| { &mut m.peers_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConnectedInfo>>(
                    "connected_info",
                    |m: &HandShake| { &m.connected_info },
                    |m: &mut HandShake| { &mut m.connected_info },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HandShake>(
                    "HandShake",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HandShake {
        static mut instance: ::protobuf::lazy::Lazy<HandShake> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HandShake,
        };
        unsafe {
            instance.get(HandShake::new)
        }
    }
}

impl ::protobuf::Clear for HandShake {
    fn clear(&mut self) {
        self.clear_version();
        self.clear_peer_id();
        self.clear_account_id();
        self.clear_listen_port();
        self.clear_peers_info();
        self.clear_connected_info();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HandShake {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HandShake {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InfoGossip {
    // message fields
    pub info_gossip: ::protobuf::RepeatedField<PeerInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl InfoGossip {
    pub fn new() -> InfoGossip {
        ::std::default::Default::default()
    }

    // repeated .PeerInfo info_gossip = 1;

    pub fn clear_info_gossip(&mut self) {
        self.info_gossip.clear();
    }

    // Param is passed by value, moved
    pub fn set_info_gossip(&mut self, v: ::protobuf::RepeatedField<PeerInfo>) {
        self.info_gossip = v;
    }

    // Mutable pointer to the field.
    pub fn mut_info_gossip(&mut self) -> &mut ::protobuf::RepeatedField<PeerInfo> {
        &mut self.info_gossip
    }

    // Take field
    pub fn take_info_gossip(&mut self) -> ::protobuf::RepeatedField<PeerInfo> {
        ::std::mem::replace(&mut self.info_gossip, ::protobuf::RepeatedField::new())
    }

    pub fn get_info_gossip(&self) -> &[PeerInfo] {
        &self.info_gossip
    }
}

impl ::protobuf::Message for InfoGossip {
    fn is_initialized(&self) -> bool {
        for v in &self.info_gossip {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.info_gossip)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.info_gossip {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.info_gossip {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InfoGossip {
        InfoGossip::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PeerInfo>>(
                    "info_gossip",
                    |m: &InfoGossip| { &m.info_gossip },
                    |m: &mut InfoGossip| { &mut m.info_gossip },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<InfoGossip>(
                    "InfoGossip",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static InfoGossip {
        static mut instance: ::protobuf::lazy::Lazy<InfoGossip> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const InfoGossip,
        };
        unsafe {
            instance.get(InfoGossip::new)
        }
    }
}

impl ::protobuf::Clear for InfoGossip {
    fn clear(&mut self) {
        self.clear_info_gossip();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InfoGossip {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InfoGossip {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PeerMessage {
    // message oneof groups
    pub message_type: ::std::option::Option<PeerMessage_oneof_message_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum PeerMessage_oneof_message_type {
    hand_shake(HandShake),
    info_gossip(InfoGossip),
    message(::std::vec::Vec<u8>),
}

impl PeerMessage {
    pub fn new() -> PeerMessage {
        ::std::default::Default::default()
    }

    // .HandShake hand_shake = 1;

    pub fn clear_hand_shake(&mut self) {
        self.message_type = ::std::option::Option::None;
    }

    pub fn has_hand_shake(&self) -> bool {
        match self.message_type {
            ::std::option::Option::Some(PeerMessage_oneof_message_type::hand_shake(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_hand_shake(&mut self, v: HandShake) {
        self.message_type = ::std::option::Option::Some(PeerMessage_oneof_message_type::hand_shake(v))
    }

    // Mutable pointer to the field.
    pub fn mut_hand_shake(&mut self) -> &mut HandShake {
        if let ::std::option::Option::Some(PeerMessage_oneof_message_type::hand_shake(_)) = self.message_type {
        } else {
            self.message_type = ::std::option::Option::Some(PeerMessage_oneof_message_type::hand_shake(HandShake::new()));
        }
        match self.message_type {
            ::std::option::Option::Some(PeerMessage_oneof_message_type::hand_shake(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_hand_shake(&mut self) -> HandShake {
        if self.has_hand_shake() {
            match self.message_type.take() {
                ::std::option::Option::Some(PeerMessage_oneof_message_type::hand_shake(v)) => v,
                _ => panic!(),
            }
        } else {
            HandShake::new()
        }
    }

    pub fn get_hand_shake(&self) -> &HandShake {
        match self.message_type {
            ::std::option::Option::Some(PeerMessage_oneof_message_type::hand_shake(ref v)) => v,
            _ => HandShake::default_instance(),
        }
    }

    // .InfoGossip info_gossip = 2;

    pub fn clear_info_gossip(&mut self) {
        self.message_type = ::std::option::Option::None;
    }

    pub fn has_info_gossip(&self) -> bool {
        match self.message_type {
            ::std::option::Option::Some(PeerMessage_oneof_message_type::info_gossip(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_info_gossip(&mut self, v: InfoGossip) {
        self.message_type = ::std::option::Option::Some(PeerMessage_oneof_message_type::info_gossip(v))
    }

    // Mutable pointer to the field.
    pub fn mut_info_gossip(&mut self) -> &mut InfoGossip {
        if let ::std::option::Option::Some(PeerMessage_oneof_message_type::info_gossip(_)) = self.message_type {
        } else {
            self.message_type = ::std::option::Option::Some(PeerMessage_oneof_message_type::info_gossip(InfoGossip::new()));
        }
        match self.message_type {
            ::std::option::Option::Some(PeerMessage_oneof_message_type::info_gossip(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_info_gossip(&mut self) -> InfoGossip {
        if self.has_info_gossip() {
            match self.message_type.take() {
                ::std::option::Option::Some(PeerMessage_oneof_message_type::info_gossip(v)) => v,
                _ => panic!(),
            }
        } else {
            InfoGossip::new()
        }
    }

    pub fn get_info_gossip(&self) -> &InfoGossip {
        match self.message_type {
            ::std::option::Option::Some(PeerMessage_oneof_message_type::info_gossip(ref v)) => v,
            _ => InfoGossip::default_instance(),
        }
    }

    // bytes message = 3;

    pub fn clear_message(&mut self) {
        self.message_type = ::std::option::Option::None;
    }

    pub fn has_message(&self) -> bool {
        match self.message_type {
            ::std::option::Option::Some(PeerMessage_oneof_message_type::message(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::vec::Vec<u8>) {
        self.message_type = ::std::option::Option::Some(PeerMessage_oneof_message_type::message(v))
    }

    // Mutable pointer to the field.
    pub fn mut_message(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(PeerMessage_oneof_message_type::message(_)) = self.message_type {
        } else {
            self.message_type = ::std::option::Option::Some(PeerMessage_oneof_message_type::message(::std::vec::Vec::new()));
        }
        match self.message_type {
            ::std::option::Option::Some(PeerMessage_oneof_message_type::message(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_message() {
            match self.message_type.take() {
                ::std::option::Option::Some(PeerMessage_oneof_message_type::message(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    pub fn get_message(&self) -> &[u8] {
        match self.message_type {
            ::std::option::Option::Some(PeerMessage_oneof_message_type::message(ref v)) => v,
            _ => &[],
        }
    }
}

impl ::protobuf::Message for PeerMessage {
    fn is_initialized(&self) -> bool {
        if let Some(PeerMessage_oneof_message_type::hand_shake(ref v)) = self.message_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(PeerMessage_oneof_message_type::info_gossip(ref v)) = self.message_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message_type = ::std::option::Option::Some(PeerMessage_oneof_message_type::hand_shake(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message_type = ::std::option::Option::Some(PeerMessage_oneof_message_type::info_gossip(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message_type = ::std::option::Option::Some(PeerMessage_oneof_message_type::message(is.read_bytes()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.message_type {
            match v {
                &PeerMessage_oneof_message_type::hand_shake(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &PeerMessage_oneof_message_type::info_gossip(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &PeerMessage_oneof_message_type::message(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(3, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.message_type {
            match v {
                &PeerMessage_oneof_message_type::hand_shake(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &PeerMessage_oneof_message_type::info_gossip(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &PeerMessage_oneof_message_type::message(ref v) => {
                    os.write_bytes(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeerMessage {
        PeerMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HandShake>(
                    "hand_shake",
                    PeerMessage::has_hand_shake,
                    PeerMessage::get_hand_shake,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, InfoGossip>(
                    "info_gossip",
                    PeerMessage::has_info_gossip,
                    PeerMessage::get_info_gossip,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "message",
                    PeerMessage::has_message,
                    PeerMessage::get_message,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PeerMessage>(
                    "PeerMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PeerMessage {
        static mut instance: ::protobuf::lazy::Lazy<PeerMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PeerMessage,
        };
        unsafe {
            instance.get(PeerMessage::new)
        }
    }
}

impl ::protobuf::Clear for PeerMessage {
    fn clear(&mut self) {
        self.clear_hand_shake();
        self.clear_info_gossip();
        self.clear_message();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeerMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeerMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14protos/network.proto\x1a\x12protos/chain.proto\x1a\x1egoogle/proto\
    buf/wrappers.proto\"\x89\x01\n\x08PeerInfo\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\x0cR\x02id\x120\n\x04addr\x18\x02\x20\x01(\x0b2\x1c.google.protobu\
    f.StringValueR\x04addr\x12;\n\naccount_id\x18\x03\x20\x01(\x0b2\x1c.goog\
    le.protobuf.StringValueR\taccountId\"=\n\rConnectedInfo\x12,\n\x0bchain_\
    state\x18\x01\x20\x01(\x0b2\x0b.ChainStateR\nchainState\"\x9b\x02\n\tHan\
    dShake\x12\x18\n\x07version\x18\x01\x20\x01(\rR\x07version\x12\x17\n\x07\
    peer_id\x18\x02\x20\x01(\x0cR\x06peerId\x12;\n\naccount_id\x18\x03\x20\
    \x01(\x0b2\x1c.google.protobuf.StringValueR\taccountId\x12=\n\x0blisten_\
    port\x18\x04\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\nlistenPort\
    \x12(\n\npeers_info\x18\x05\x20\x03(\x0b2\t.PeerInfoR\tpeersInfo\x125\n\
    \x0econnected_info\x18\x06\x20\x01(\x0b2\x0e.ConnectedInfoR\rconnectedIn\
    fo\"8\n\nInfoGossip\x12*\n\x0binfo_gossip\x18\x01\x20\x03(\x0b2\t.PeerIn\
    foR\ninfoGossip\"\x96\x01\n\x0bPeerMessage\x12+\n\nhand_shake\x18\x01\
    \x20\x01(\x0b2\n.HandShakeH\0R\thandShake\x12.\n\x0binfo_gossip\x18\x02\
    \x20\x01(\x0b2\x0b.InfoGossipH\0R\ninfoGossip\x12\x1a\n\x07message\x18\
    \x03\x20\x01(\x0cH\0R\x07messageB\x0e\n\x0cmessage_typeb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
