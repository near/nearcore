// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct CallbackInfo {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    pub result_index: u64,
    pub receiver: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CallbackInfo {
    pub fn new() -> CallbackInfo {
        ::std::default::Default::default()
    }

    // bytes id = 1;

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }

    pub fn get_id(&self) -> &[u8] {
        &self.id
    }

    // uint64 result_index = 2;

    pub fn clear_result_index(&mut self) {
        self.result_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_result_index(&mut self, v: u64) {
        self.result_index = v;
    }

    pub fn get_result_index(&self) -> u64 {
        self.result_index
    }

    // string receiver = 3;

    pub fn clear_receiver(&mut self) {
        self.receiver.clear();
    }

    // Param is passed by value, moved
    pub fn set_receiver(&mut self, v: ::std::string::String) {
        self.receiver = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receiver(&mut self) -> &mut ::std::string::String {
        &mut self.receiver
    }

    // Take field
    pub fn take_receiver(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.receiver, ::std::string::String::new())
    }

    pub fn get_receiver(&self) -> &str {
        &self.receiver
    }
}

impl ::protobuf::Message for CallbackInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.result_index = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.receiver)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        if self.result_index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.result_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.receiver.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.receiver);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        if self.result_index != 0 {
            os.write_uint64(2, self.result_index)?;
        }
        if !self.receiver.is_empty() {
            os.write_string(3, &self.receiver)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CallbackInfo {
        CallbackInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &CallbackInfo| { &m.id },
                    |m: &mut CallbackInfo| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "result_index",
                    |m: &CallbackInfo| { &m.result_index },
                    |m: &mut CallbackInfo| { &mut m.result_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "receiver",
                    |m: &CallbackInfo| { &m.receiver },
                    |m: &mut CallbackInfo| { &mut m.receiver },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CallbackInfo>(
                    "CallbackInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CallbackInfo {
        static mut instance: ::protobuf::lazy::Lazy<CallbackInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CallbackInfo,
        };
        unsafe {
            instance.get(CallbackInfo::new)
        }
    }
}

impl ::protobuf::Clear for CallbackInfo {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_result_index();
        self.clear_receiver();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CallbackInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CallbackInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountingInfo {
    // message fields
    pub originator: ::std::string::String,
    pub contract_id: ::protobuf::SingularPtrField<::protobuf::well_known_types::StringValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountingInfo {
    pub fn new() -> AccountingInfo {
        ::std::default::Default::default()
    }

    // string originator = 1;

    pub fn clear_originator(&mut self) {
        self.originator.clear();
    }

    // Param is passed by value, moved
    pub fn set_originator(&mut self, v: ::std::string::String) {
        self.originator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_originator(&mut self) -> &mut ::std::string::String {
        &mut self.originator
    }

    // Take field
    pub fn take_originator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.originator, ::std::string::String::new())
    }

    pub fn get_originator(&self) -> &str {
        &self.originator
    }

    // .google.protobuf.StringValue contract_id = 2;

    pub fn clear_contract_id(&mut self) {
        self.contract_id.clear();
    }

    pub fn has_contract_id(&self) -> bool {
        self.contract_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contract_id(&mut self, v: ::protobuf::well_known_types::StringValue) {
        self.contract_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_id(&mut self) -> &mut ::protobuf::well_known_types::StringValue {
        if self.contract_id.is_none() {
            self.contract_id.set_default();
        }
        self.contract_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_contract_id(&mut self) -> ::protobuf::well_known_types::StringValue {
        self.contract_id.take().unwrap_or_else(|| ::protobuf::well_known_types::StringValue::new())
    }

    pub fn get_contract_id(&self) -> &::protobuf::well_known_types::StringValue {
        self.contract_id.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::StringValue::default_instance())
    }
}

impl ::protobuf::Message for AccountingInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.contract_id {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.originator)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.contract_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.originator.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.originator);
        }
        if let Some(ref v) = self.contract_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.originator.is_empty() {
            os.write_string(1, &self.originator)?;
        }
        if let Some(ref v) = self.contract_id.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountingInfo {
        AccountingInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "originator",
                    |m: &AccountingInfo| { &m.originator },
                    |m: &mut AccountingInfo| { &mut m.originator },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::StringValue>>(
                    "contract_id",
                    |m: &AccountingInfo| { &m.contract_id },
                    |m: &mut AccountingInfo| { &mut m.contract_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountingInfo>(
                    "AccountingInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountingInfo {
        static mut instance: ::protobuf::lazy::Lazy<AccountingInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountingInfo,
        };
        unsafe {
            instance.get(AccountingInfo::new)
        }
    }
}

impl ::protobuf::Clear for AccountingInfo {
    fn clear(&mut self) {
        self.clear_originator();
        self.clear_contract_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountingInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountingInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AsyncCall {
    // message fields
    pub amount: u64,
    pub mana: u32,
    pub method_name: ::std::vec::Vec<u8>,
    pub args: ::std::vec::Vec<u8>,
    pub callback: ::protobuf::SingularPtrField<CallbackInfo>,
    pub accounting_info: ::protobuf::SingularPtrField<AccountingInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AsyncCall {
    pub fn new() -> AsyncCall {
        ::std::default::Default::default()
    }

    // uint64 amount = 1;

    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = v;
    }

    pub fn get_amount(&self) -> u64 {
        self.amount
    }

    // uint32 mana = 2;

    pub fn clear_mana(&mut self) {
        self.mana = 0;
    }

    // Param is passed by value, moved
    pub fn set_mana(&mut self, v: u32) {
        self.mana = v;
    }

    pub fn get_mana(&self) -> u32 {
        self.mana
    }

    // bytes method_name = 3;

    pub fn clear_method_name(&mut self) {
        self.method_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_method_name(&mut self, v: ::std::vec::Vec<u8>) {
        self.method_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_method_name(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.method_name
    }

    // Take field
    pub fn take_method_name(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.method_name, ::std::vec::Vec::new())
    }

    pub fn get_method_name(&self) -> &[u8] {
        &self.method_name
    }

    // bytes args = 4;

    pub fn clear_args(&mut self) {
        self.args.clear();
    }

    // Param is passed by value, moved
    pub fn set_args(&mut self, v: ::std::vec::Vec<u8>) {
        self.args = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_args(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.args
    }

    // Take field
    pub fn take_args(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.args, ::std::vec::Vec::new())
    }

    pub fn get_args(&self) -> &[u8] {
        &self.args
    }

    // .CallbackInfo callback = 5;

    pub fn clear_callback(&mut self) {
        self.callback.clear();
    }

    pub fn has_callback(&self) -> bool {
        self.callback.is_some()
    }

    // Param is passed by value, moved
    pub fn set_callback(&mut self, v: CallbackInfo) {
        self.callback = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_callback(&mut self) -> &mut CallbackInfo {
        if self.callback.is_none() {
            self.callback.set_default();
        }
        self.callback.as_mut().unwrap()
    }

    // Take field
    pub fn take_callback(&mut self) -> CallbackInfo {
        self.callback.take().unwrap_or_else(|| CallbackInfo::new())
    }

    pub fn get_callback(&self) -> &CallbackInfo {
        self.callback.as_ref().unwrap_or_else(|| CallbackInfo::default_instance())
    }

    // .AccountingInfo accounting_info = 6;

    pub fn clear_accounting_info(&mut self) {
        self.accounting_info.clear();
    }

    pub fn has_accounting_info(&self) -> bool {
        self.accounting_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accounting_info(&mut self, v: AccountingInfo) {
        self.accounting_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accounting_info(&mut self) -> &mut AccountingInfo {
        if self.accounting_info.is_none() {
            self.accounting_info.set_default();
        }
        self.accounting_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_accounting_info(&mut self) -> AccountingInfo {
        self.accounting_info.take().unwrap_or_else(|| AccountingInfo::new())
    }

    pub fn get_accounting_info(&self) -> &AccountingInfo {
        self.accounting_info.as_ref().unwrap_or_else(|| AccountingInfo::default_instance())
    }
}

impl ::protobuf::Message for AsyncCall {
    fn is_initialized(&self) -> bool {
        for v in &self.callback {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.accounting_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.mana = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.method_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.args)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.callback)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.accounting_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(1, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mana != 0 {
            my_size += ::protobuf::rt::value_size(2, self.mana, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.method_name.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.method_name);
        }
        if !self.args.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.args);
        }
        if let Some(ref v) = self.callback.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.accounting_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.amount != 0 {
            os.write_uint64(1, self.amount)?;
        }
        if self.mana != 0 {
            os.write_uint32(2, self.mana)?;
        }
        if !self.method_name.is_empty() {
            os.write_bytes(3, &self.method_name)?;
        }
        if !self.args.is_empty() {
            os.write_bytes(4, &self.args)?;
        }
        if let Some(ref v) = self.callback.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.accounting_info.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AsyncCall {
        AsyncCall::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "amount",
                    |m: &AsyncCall| { &m.amount },
                    |m: &mut AsyncCall| { &mut m.amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "mana",
                    |m: &AsyncCall| { &m.mana },
                    |m: &mut AsyncCall| { &mut m.mana },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "method_name",
                    |m: &AsyncCall| { &m.method_name },
                    |m: &mut AsyncCall| { &mut m.method_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "args",
                    |m: &AsyncCall| { &m.args },
                    |m: &mut AsyncCall| { &mut m.args },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CallbackInfo>>(
                    "callback",
                    |m: &AsyncCall| { &m.callback },
                    |m: &mut AsyncCall| { &mut m.callback },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccountingInfo>>(
                    "accounting_info",
                    |m: &AsyncCall| { &m.accounting_info },
                    |m: &mut AsyncCall| { &mut m.accounting_info },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AsyncCall>(
                    "AsyncCall",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AsyncCall {
        static mut instance: ::protobuf::lazy::Lazy<AsyncCall> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AsyncCall,
        };
        unsafe {
            instance.get(AsyncCall::new)
        }
    }
}

impl ::protobuf::Clear for AsyncCall {
    fn clear(&mut self) {
        self.clear_amount();
        self.clear_mana();
        self.clear_method_name();
        self.clear_args();
        self.clear_callback();
        self.clear_accounting_info();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AsyncCall {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AsyncCall {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CallbackResult {
    // message fields
    pub info: ::protobuf::SingularPtrField<CallbackInfo>,
    pub result: ::protobuf::SingularPtrField<::protobuf::well_known_types::BytesValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CallbackResult {
    pub fn new() -> CallbackResult {
        ::std::default::Default::default()
    }

    // .CallbackInfo info = 1;

    pub fn clear_info(&mut self) {
        self.info.clear();
    }

    pub fn has_info(&self) -> bool {
        self.info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_info(&mut self, v: CallbackInfo) {
        self.info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_info(&mut self) -> &mut CallbackInfo {
        if self.info.is_none() {
            self.info.set_default();
        }
        self.info.as_mut().unwrap()
    }

    // Take field
    pub fn take_info(&mut self) -> CallbackInfo {
        self.info.take().unwrap_or_else(|| CallbackInfo::new())
    }

    pub fn get_info(&self) -> &CallbackInfo {
        self.info.as_ref().unwrap_or_else(|| CallbackInfo::default_instance())
    }

    // .google.protobuf.BytesValue result = 2;

    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ::protobuf::well_known_types::BytesValue) {
        self.result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result(&mut self) -> &mut ::protobuf::well_known_types::BytesValue {
        if self.result.is_none() {
            self.result.set_default();
        }
        self.result.as_mut().unwrap()
    }

    // Take field
    pub fn take_result(&mut self) -> ::protobuf::well_known_types::BytesValue {
        self.result.take().unwrap_or_else(|| ::protobuf::well_known_types::BytesValue::new())
    }

    pub fn get_result(&self) -> &::protobuf::well_known_types::BytesValue {
        self.result.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::BytesValue::default_instance())
    }
}

impl ::protobuf::Message for CallbackResult {
    fn is_initialized(&self) -> bool {
        for v in &self.info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.info)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.result.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CallbackResult {
        CallbackResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CallbackInfo>>(
                    "info",
                    |m: &CallbackResult| { &m.info },
                    |m: &mut CallbackResult| { &mut m.info },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BytesValue>>(
                    "result",
                    |m: &CallbackResult| { &m.result },
                    |m: &mut CallbackResult| { &mut m.result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CallbackResult>(
                    "CallbackResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CallbackResult {
        static mut instance: ::protobuf::lazy::Lazy<CallbackResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CallbackResult,
        };
        unsafe {
            instance.get(CallbackResult::new)
        }
    }
}

impl ::protobuf::Clear for CallbackResult {
    fn clear(&mut self) {
        self.clear_info();
        self.clear_result();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CallbackResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CallbackResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ManaAccounting {
    // message fields
    pub accounting_info: ::protobuf::SingularPtrField<AccountingInfo>,
    pub mana_refund: u32,
    pub gas_used: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ManaAccounting {
    pub fn new() -> ManaAccounting {
        ::std::default::Default::default()
    }

    // .AccountingInfo accounting_info = 1;

    pub fn clear_accounting_info(&mut self) {
        self.accounting_info.clear();
    }

    pub fn has_accounting_info(&self) -> bool {
        self.accounting_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accounting_info(&mut self, v: AccountingInfo) {
        self.accounting_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accounting_info(&mut self) -> &mut AccountingInfo {
        if self.accounting_info.is_none() {
            self.accounting_info.set_default();
        }
        self.accounting_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_accounting_info(&mut self) -> AccountingInfo {
        self.accounting_info.take().unwrap_or_else(|| AccountingInfo::new())
    }

    pub fn get_accounting_info(&self) -> &AccountingInfo {
        self.accounting_info.as_ref().unwrap_or_else(|| AccountingInfo::default_instance())
    }

    // uint32 mana_refund = 2;

    pub fn clear_mana_refund(&mut self) {
        self.mana_refund = 0;
    }

    // Param is passed by value, moved
    pub fn set_mana_refund(&mut self, v: u32) {
        self.mana_refund = v;
    }

    pub fn get_mana_refund(&self) -> u32 {
        self.mana_refund
    }

    // uint64 gas_used = 3;

    pub fn clear_gas_used(&mut self) {
        self.gas_used = 0;
    }

    // Param is passed by value, moved
    pub fn set_gas_used(&mut self, v: u64) {
        self.gas_used = v;
    }

    pub fn get_gas_used(&self) -> u64 {
        self.gas_used
    }
}

impl ::protobuf::Message for ManaAccounting {
    fn is_initialized(&self) -> bool {
        for v in &self.accounting_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.accounting_info)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.mana_refund = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gas_used = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.accounting_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.mana_refund != 0 {
            my_size += ::protobuf::rt::value_size(2, self.mana_refund, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gas_used != 0 {
            my_size += ::protobuf::rt::value_size(3, self.gas_used, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.accounting_info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.mana_refund != 0 {
            os.write_uint32(2, self.mana_refund)?;
        }
        if self.gas_used != 0 {
            os.write_uint64(3, self.gas_used)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ManaAccounting {
        ManaAccounting::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccountingInfo>>(
                    "accounting_info",
                    |m: &ManaAccounting| { &m.accounting_info },
                    |m: &mut ManaAccounting| { &mut m.accounting_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "mana_refund",
                    |m: &ManaAccounting| { &m.mana_refund },
                    |m: &mut ManaAccounting| { &mut m.mana_refund },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "gas_used",
                    |m: &ManaAccounting| { &m.gas_used },
                    |m: &mut ManaAccounting| { &mut m.gas_used },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ManaAccounting>(
                    "ManaAccounting",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ManaAccounting {
        static mut instance: ::protobuf::lazy::Lazy<ManaAccounting> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ManaAccounting,
        };
        unsafe {
            instance.get(ManaAccounting::new)
        }
    }
}

impl ::protobuf::Clear for ManaAccounting {
    fn clear(&mut self) {
        self.clear_accounting_info();
        self.clear_mana_refund();
        self.clear_gas_used();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ManaAccounting {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ManaAccounting {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReceiptTransaction {
    // message fields
    pub originator: ::std::string::String,
    pub receiver: ::std::string::String,
    pub nonce: ::std::vec::Vec<u8>,
    // message oneof groups
    pub body: ::std::option::Option<ReceiptTransaction_oneof_body>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum ReceiptTransaction_oneof_body {
    new_call(AsyncCall),
    callback(CallbackResult),
    refund(u64),
    mana_accounting(ManaAccounting),
}

impl ReceiptTransaction {
    pub fn new() -> ReceiptTransaction {
        ::std::default::Default::default()
    }

    // string originator = 1;

    pub fn clear_originator(&mut self) {
        self.originator.clear();
    }

    // Param is passed by value, moved
    pub fn set_originator(&mut self, v: ::std::string::String) {
        self.originator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_originator(&mut self) -> &mut ::std::string::String {
        &mut self.originator
    }

    // Take field
    pub fn take_originator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.originator, ::std::string::String::new())
    }

    pub fn get_originator(&self) -> &str {
        &self.originator
    }

    // string receiver = 2;

    pub fn clear_receiver(&mut self) {
        self.receiver.clear();
    }

    // Param is passed by value, moved
    pub fn set_receiver(&mut self, v: ::std::string::String) {
        self.receiver = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receiver(&mut self) -> &mut ::std::string::String {
        &mut self.receiver
    }

    // Take field
    pub fn take_receiver(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.receiver, ::std::string::String::new())
    }

    pub fn get_receiver(&self) -> &str {
        &self.receiver
    }

    // bytes nonce = 3;

    pub fn clear_nonce(&mut self) {
        self.nonce.clear();
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: ::std::vec::Vec<u8>) {
        self.nonce = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nonce(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.nonce
    }

    // Take field
    pub fn take_nonce(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.nonce, ::std::vec::Vec::new())
    }

    pub fn get_nonce(&self) -> &[u8] {
        &self.nonce
    }

    // .AsyncCall new_call = 4;

    pub fn clear_new_call(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_new_call(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(ReceiptTransaction_oneof_body::new_call(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_new_call(&mut self, v: AsyncCall) {
        self.body = ::std::option::Option::Some(ReceiptTransaction_oneof_body::new_call(v))
    }

    // Mutable pointer to the field.
    pub fn mut_new_call(&mut self) -> &mut AsyncCall {
        if let ::std::option::Option::Some(ReceiptTransaction_oneof_body::new_call(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(ReceiptTransaction_oneof_body::new_call(AsyncCall::new()));
        }
        match self.body {
            ::std::option::Option::Some(ReceiptTransaction_oneof_body::new_call(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_new_call(&mut self) -> AsyncCall {
        if self.has_new_call() {
            match self.body.take() {
                ::std::option::Option::Some(ReceiptTransaction_oneof_body::new_call(v)) => v,
                _ => panic!(),
            }
        } else {
            AsyncCall::new()
        }
    }

    pub fn get_new_call(&self) -> &AsyncCall {
        match self.body {
            ::std::option::Option::Some(ReceiptTransaction_oneof_body::new_call(ref v)) => v,
            _ => AsyncCall::default_instance(),
        }
    }

    // .CallbackResult callback = 5;

    pub fn clear_callback(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_callback(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(ReceiptTransaction_oneof_body::callback(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_callback(&mut self, v: CallbackResult) {
        self.body = ::std::option::Option::Some(ReceiptTransaction_oneof_body::callback(v))
    }

    // Mutable pointer to the field.
    pub fn mut_callback(&mut self) -> &mut CallbackResult {
        if let ::std::option::Option::Some(ReceiptTransaction_oneof_body::callback(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(ReceiptTransaction_oneof_body::callback(CallbackResult::new()));
        }
        match self.body {
            ::std::option::Option::Some(ReceiptTransaction_oneof_body::callback(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_callback(&mut self) -> CallbackResult {
        if self.has_callback() {
            match self.body.take() {
                ::std::option::Option::Some(ReceiptTransaction_oneof_body::callback(v)) => v,
                _ => panic!(),
            }
        } else {
            CallbackResult::new()
        }
    }

    pub fn get_callback(&self) -> &CallbackResult {
        match self.body {
            ::std::option::Option::Some(ReceiptTransaction_oneof_body::callback(ref v)) => v,
            _ => CallbackResult::default_instance(),
        }
    }

    // uint64 refund = 6;

    pub fn clear_refund(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_refund(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(ReceiptTransaction_oneof_body::refund(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_refund(&mut self, v: u64) {
        self.body = ::std::option::Option::Some(ReceiptTransaction_oneof_body::refund(v))
    }

    pub fn get_refund(&self) -> u64 {
        match self.body {
            ::std::option::Option::Some(ReceiptTransaction_oneof_body::refund(v)) => v,
            _ => 0,
        }
    }

    // .ManaAccounting mana_accounting = 7;

    pub fn clear_mana_accounting(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_mana_accounting(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(ReceiptTransaction_oneof_body::mana_accounting(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_mana_accounting(&mut self, v: ManaAccounting) {
        self.body = ::std::option::Option::Some(ReceiptTransaction_oneof_body::mana_accounting(v))
    }

    // Mutable pointer to the field.
    pub fn mut_mana_accounting(&mut self) -> &mut ManaAccounting {
        if let ::std::option::Option::Some(ReceiptTransaction_oneof_body::mana_accounting(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(ReceiptTransaction_oneof_body::mana_accounting(ManaAccounting::new()));
        }
        match self.body {
            ::std::option::Option::Some(ReceiptTransaction_oneof_body::mana_accounting(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_mana_accounting(&mut self) -> ManaAccounting {
        if self.has_mana_accounting() {
            match self.body.take() {
                ::std::option::Option::Some(ReceiptTransaction_oneof_body::mana_accounting(v)) => v,
                _ => panic!(),
            }
        } else {
            ManaAccounting::new()
        }
    }

    pub fn get_mana_accounting(&self) -> &ManaAccounting {
        match self.body {
            ::std::option::Option::Some(ReceiptTransaction_oneof_body::mana_accounting(ref v)) => v,
            _ => ManaAccounting::default_instance(),
        }
    }
}

impl ::protobuf::Message for ReceiptTransaction {
    fn is_initialized(&self) -> bool {
        if let Some(ReceiptTransaction_oneof_body::new_call(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReceiptTransaction_oneof_body::callback(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ReceiptTransaction_oneof_body::mana_accounting(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.originator)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.receiver)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.nonce)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(ReceiptTransaction_oneof_body::new_call(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(ReceiptTransaction_oneof_body::callback(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(ReceiptTransaction_oneof_body::refund(is.read_uint64()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(ReceiptTransaction_oneof_body::mana_accounting(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.originator.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.originator);
        }
        if !self.receiver.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.receiver);
        }
        if !self.nonce.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.nonce);
        }
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &ReceiptTransaction_oneof_body::new_call(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReceiptTransaction_oneof_body::callback(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ReceiptTransaction_oneof_body::refund(v) => {
                    my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &ReceiptTransaction_oneof_body::mana_accounting(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.originator.is_empty() {
            os.write_string(1, &self.originator)?;
        }
        if !self.receiver.is_empty() {
            os.write_string(2, &self.receiver)?;
        }
        if !self.nonce.is_empty() {
            os.write_bytes(3, &self.nonce)?;
        }
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &ReceiptTransaction_oneof_body::new_call(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReceiptTransaction_oneof_body::callback(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ReceiptTransaction_oneof_body::refund(v) => {
                    os.write_uint64(6, v)?;
                },
                &ReceiptTransaction_oneof_body::mana_accounting(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReceiptTransaction {
        ReceiptTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "originator",
                    |m: &ReceiptTransaction| { &m.originator },
                    |m: &mut ReceiptTransaction| { &mut m.originator },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "receiver",
                    |m: &ReceiptTransaction| { &m.receiver },
                    |m: &mut ReceiptTransaction| { &mut m.receiver },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "nonce",
                    |m: &ReceiptTransaction| { &m.nonce },
                    |m: &mut ReceiptTransaction| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AsyncCall>(
                    "new_call",
                    ReceiptTransaction::has_new_call,
                    ReceiptTransaction::get_new_call,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CallbackResult>(
                    "callback",
                    ReceiptTransaction::has_callback,
                    ReceiptTransaction::get_callback,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u64_accessor::<_>(
                    "refund",
                    ReceiptTransaction::has_refund,
                    ReceiptTransaction::get_refund,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ManaAccounting>(
                    "mana_accounting",
                    ReceiptTransaction::has_mana_accounting,
                    ReceiptTransaction::get_mana_accounting,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ReceiptTransaction>(
                    "ReceiptTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReceiptTransaction {
        static mut instance: ::protobuf::lazy::Lazy<ReceiptTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ReceiptTransaction,
        };
        unsafe {
            instance.get(ReceiptTransaction::new)
        }
    }
}

impl ::protobuf::Clear for ReceiptTransaction {
    fn clear(&mut self) {
        self.clear_originator();
        self.clear_receiver();
        self.clear_nonce();
        self.clear_new_call();
        self.clear_callback();
        self.clear_refund();
        self.clear_mana_accounting();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReceiptTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReceiptTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14protos/receipt.proto\x1a\x1egoogle/protobuf/wrappers.proto\"]\n\
    \x0cCallbackInfo\x12\x0e\n\x02id\x18\x01\x20\x01(\x0cR\x02id\x12!\n\x0cr\
    esult_index\x18\x02\x20\x01(\x04R\x0bresultIndex\x12\x1a\n\x08receiver\
    \x18\x03\x20\x01(\tR\x08receiver\"o\n\x0eAccountingInfo\x12\x1e\n\norigi\
    nator\x18\x01\x20\x01(\tR\noriginator\x12=\n\x0bcontract_id\x18\x02\x20\
    \x01(\x0b2\x1c.google.protobuf.StringValueR\ncontractId\"\xd1\x01\n\tAsy\
    ncCall\x12\x16\n\x06amount\x18\x01\x20\x01(\x04R\x06amount\x12\x12\n\x04\
    mana\x18\x02\x20\x01(\rR\x04mana\x12\x1f\n\x0bmethod_name\x18\x03\x20\
    \x01(\x0cR\nmethodName\x12\x12\n\x04args\x18\x04\x20\x01(\x0cR\x04args\
    \x12)\n\x08callback\x18\x05\x20\x01(\x0b2\r.CallbackInfoR\x08callback\
    \x128\n\x0faccounting_info\x18\x06\x20\x01(\x0b2\x0f.AccountingInfoR\x0e\
    accountingInfo\"h\n\x0eCallbackResult\x12!\n\x04info\x18\x01\x20\x01(\
    \x0b2\r.CallbackInfoR\x04info\x123\n\x06result\x18\x02\x20\x01(\x0b2\x1b\
    .google.protobuf.BytesValueR\x06result\"\x86\x01\n\x0eManaAccounting\x12\
    8\n\x0faccounting_info\x18\x01\x20\x01(\x0b2\x0f.AccountingInfoR\x0eacco\
    untingInfo\x12\x1f\n\x0bmana_refund\x18\x02\x20\x01(\rR\nmanaRefund\x12\
    \x19\n\x08gas_used\x18\x03\x20\x01(\x04R\x07gasUsed\"\x9c\x02\n\x12Recei\
    ptTransaction\x12\x1e\n\noriginator\x18\x01\x20\x01(\tR\noriginator\x12\
    \x1a\n\x08receiver\x18\x02\x20\x01(\tR\x08receiver\x12\x14\n\x05nonce\
    \x18\x03\x20\x01(\x0cR\x05nonce\x12'\n\x08new_call\x18\x04\x20\x01(\x0b2\
    \n.AsyncCallH\0R\x07newCall\x12-\n\x08callback\x18\x05\x20\x01(\x0b2\x0f\
    .CallbackResultH\0R\x08callback\x12\x18\n\x06refund\x18\x06\x20\x01(\x04\
    H\0R\x06refund\x12:\n\x0fmana_accounting\x18\x07\x20\x01(\x0b2\x0f.ManaA\
    ccountingH\0R\x0emanaAccountingB\x06\n\x04bodyb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
