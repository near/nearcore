// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct BlockProposal {
    // message fields
    pub hash: ::std::vec::Vec<u8>,
    pub author: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl BlockProposal {
    pub fn new() -> BlockProposal {
        ::std::default::Default::default()
    }

    // bytes hash = 1;

    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }

    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }

    // uint64 author = 2;

    pub fn clear_author(&mut self) {
        self.author = 0;
    }

    // Param is passed by value, moved
    pub fn set_author(&mut self, v: u64) {
        self.author = v;
    }

    pub fn get_author(&self) -> u64 {
        self.author
    }
}

impl ::protobuf::Message for BlockProposal {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.author = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.hash);
        }
        if self.author != 0 {
            my_size += ::protobuf::rt::value_size(2, self.author, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.hash.is_empty() {
            os.write_bytes(1, &self.hash)?;
        }
        if self.author != 0 {
            os.write_uint64(2, self.author)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockProposal {
        BlockProposal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "hash",
                    |m: &BlockProposal| { &m.hash },
                    |m: &mut BlockProposal| { &mut m.hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "author",
                    |m: &BlockProposal| { &m.author },
                    |m: &mut BlockProposal| { &mut m.author },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BlockProposal>(
                    "BlockProposal",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BlockProposal {
        static mut instance: ::protobuf::lazy::Lazy<BlockProposal> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BlockProposal,
        };
        unsafe {
            instance.get(BlockProposal::new)
        }
    }
}

impl ::protobuf::Clear for BlockProposal {
    fn clear(&mut self) {
        self.clear_hash();
        self.clear_author();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockProposal {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BareState {
    // message fields
    pub primary_confidence: i64,
    pub endorses: ::protobuf::SingularPtrField<BlockProposal>,
    pub secondary_confidence: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl BareState {
    pub fn new() -> BareState {
        ::std::default::Default::default()
    }

    // int64 primary_confidence = 1;

    pub fn clear_primary_confidence(&mut self) {
        self.primary_confidence = 0;
    }

    // Param is passed by value, moved
    pub fn set_primary_confidence(&mut self, v: i64) {
        self.primary_confidence = v;
    }

    pub fn get_primary_confidence(&self) -> i64 {
        self.primary_confidence
    }

    // .BlockProposal endorses = 2;

    pub fn clear_endorses(&mut self) {
        self.endorses.clear();
    }

    pub fn has_endorses(&self) -> bool {
        self.endorses.is_some()
    }

    // Param is passed by value, moved
    pub fn set_endorses(&mut self, v: BlockProposal) {
        self.endorses = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_endorses(&mut self) -> &mut BlockProposal {
        if self.endorses.is_none() {
            self.endorses.set_default();
        }
        self.endorses.as_mut().unwrap()
    }

    // Take field
    pub fn take_endorses(&mut self) -> BlockProposal {
        self.endorses.take().unwrap_or_else(|| BlockProposal::new())
    }

    pub fn get_endorses(&self) -> &BlockProposal {
        self.endorses.as_ref().unwrap_or_else(|| BlockProposal::default_instance())
    }

    // int64 secondary_confidence = 3;

    pub fn clear_secondary_confidence(&mut self) {
        self.secondary_confidence = 0;
    }

    // Param is passed by value, moved
    pub fn set_secondary_confidence(&mut self, v: i64) {
        self.secondary_confidence = v;
    }

    pub fn get_secondary_confidence(&self) -> i64 {
        self.secondary_confidence
    }
}

impl ::protobuf::Message for BareState {
    fn is_initialized(&self) -> bool {
        for v in &self.endorses {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.primary_confidence = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.endorses)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.secondary_confidence = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.primary_confidence != 0 {
            my_size += ::protobuf::rt::value_size(1, self.primary_confidence, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.endorses.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.secondary_confidence != 0 {
            my_size += ::protobuf::rt::value_size(3, self.secondary_confidence, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.primary_confidence != 0 {
            os.write_int64(1, self.primary_confidence)?;
        }
        if let Some(ref v) = self.endorses.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.secondary_confidence != 0 {
            os.write_int64(3, self.secondary_confidence)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BareState {
        BareState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "primary_confidence",
                    |m: &BareState| { &m.primary_confidence },
                    |m: &mut BareState| { &mut m.primary_confidence },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlockProposal>>(
                    "endorses",
                    |m: &BareState| { &m.endorses },
                    |m: &mut BareState| { &mut m.endorses },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "secondary_confidence",
                    |m: &BareState| { &m.secondary_confidence },
                    |m: &mut BareState| { &mut m.secondary_confidence },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BareState>(
                    "BareState",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BareState {
        static mut instance: ::protobuf::lazy::Lazy<BareState> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BareState,
        };
        unsafe {
            instance.get(BareState::new)
        }
    }
}

impl ::protobuf::Clear for BareState {
    fn clear(&mut self) {
        self.clear_primary_confidence();
        self.clear_endorses();
        self.clear_secondary_confidence();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BareState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BareState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Proof {
    // message fields
    pub bare_state: ::protobuf::SingularPtrField<BareState>,
    pub mask: ::std::vec::Vec<bool>,
    pub signature: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Proof {
    pub fn new() -> Proof {
        ::std::default::Default::default()
    }

    // .BareState bare_state = 1;

    pub fn clear_bare_state(&mut self) {
        self.bare_state.clear();
    }

    pub fn has_bare_state(&self) -> bool {
        self.bare_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bare_state(&mut self, v: BareState) {
        self.bare_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bare_state(&mut self) -> &mut BareState {
        if self.bare_state.is_none() {
            self.bare_state.set_default();
        }
        self.bare_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_bare_state(&mut self) -> BareState {
        self.bare_state.take().unwrap_or_else(|| BareState::new())
    }

    pub fn get_bare_state(&self) -> &BareState {
        self.bare_state.as_ref().unwrap_or_else(|| BareState::default_instance())
    }

    // repeated bool mask = 2;

    pub fn clear_mask(&mut self) {
        self.mask.clear();
    }

    // Param is passed by value, moved
    pub fn set_mask(&mut self, v: ::std::vec::Vec<bool>) {
        self.mask = v;
    }

    // Mutable pointer to the field.
    pub fn mut_mask(&mut self) -> &mut ::std::vec::Vec<bool> {
        &mut self.mask
    }

    // Take field
    pub fn take_mask(&mut self) -> ::std::vec::Vec<bool> {
        ::std::mem::replace(&mut self.mask, ::std::vec::Vec::new())
    }

    pub fn get_mask(&self) -> &[bool] {
        &self.mask
    }

    // string signature = 3;

    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::string::String) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::string::String {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signature, ::std::string::String::new())
    }

    pub fn get_signature(&self) -> &str {
        &self.signature
    }
}

impl ::protobuf::Message for Proof {
    fn is_initialized(&self) -> bool {
        for v in &self.bare_state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.bare_state)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_bool_into(wire_type, is, &mut self.mask)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.bare_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += 2 * self.mask.len() as u32;
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.bare_state.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.mask {
            os.write_bool(2, *v)?;
        };
        if !self.signature.is_empty() {
            os.write_string(3, &self.signature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Proof {
        Proof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BareState>>(
                    "bare_state",
                    |m: &Proof| { &m.bare_state },
                    |m: &mut Proof| { &mut m.bare_state },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "mask",
                    |m: &Proof| { &m.mask },
                    |m: &mut Proof| { &mut m.mask },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "signature",
                    |m: &Proof| { &m.signature },
                    |m: &mut Proof| { &mut m.signature },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Proof>(
                    "Proof",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Proof {
        static mut instance: ::protobuf::lazy::Lazy<Proof> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Proof,
        };
        unsafe {
            instance.get(Proof::new)
        }
    }
}

impl ::protobuf::Clear for Proof {
    fn clear(&mut self) {
        self.clear_bare_state();
        self.clear_mask();
        self.clear_signature();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Proof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Proof {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct State {
    // message fields
    pub bare_state: ::protobuf::SingularPtrField<BareState>,
    pub primary_proof: ::protobuf::SingularPtrField<Proof>,
    pub secondary_proof: ::protobuf::SingularPtrField<Proof>,
    pub signature: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl State {
    pub fn new() -> State {
        ::std::default::Default::default()
    }

    // .BareState bare_state = 1;

    pub fn clear_bare_state(&mut self) {
        self.bare_state.clear();
    }

    pub fn has_bare_state(&self) -> bool {
        self.bare_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bare_state(&mut self, v: BareState) {
        self.bare_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bare_state(&mut self) -> &mut BareState {
        if self.bare_state.is_none() {
            self.bare_state.set_default();
        }
        self.bare_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_bare_state(&mut self) -> BareState {
        self.bare_state.take().unwrap_or_else(|| BareState::new())
    }

    pub fn get_bare_state(&self) -> &BareState {
        self.bare_state.as_ref().unwrap_or_else(|| BareState::default_instance())
    }

    // .Proof primary_proof = 2;

    pub fn clear_primary_proof(&mut self) {
        self.primary_proof.clear();
    }

    pub fn has_primary_proof(&self) -> bool {
        self.primary_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_primary_proof(&mut self, v: Proof) {
        self.primary_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_primary_proof(&mut self) -> &mut Proof {
        if self.primary_proof.is_none() {
            self.primary_proof.set_default();
        }
        self.primary_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_primary_proof(&mut self) -> Proof {
        self.primary_proof.take().unwrap_or_else(|| Proof::new())
    }

    pub fn get_primary_proof(&self) -> &Proof {
        self.primary_proof.as_ref().unwrap_or_else(|| Proof::default_instance())
    }

    // .Proof secondary_proof = 3;

    pub fn clear_secondary_proof(&mut self) {
        self.secondary_proof.clear();
    }

    pub fn has_secondary_proof(&self) -> bool {
        self.secondary_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_secondary_proof(&mut self, v: Proof) {
        self.secondary_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secondary_proof(&mut self) -> &mut Proof {
        if self.secondary_proof.is_none() {
            self.secondary_proof.set_default();
        }
        self.secondary_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_secondary_proof(&mut self) -> Proof {
        self.secondary_proof.take().unwrap_or_else(|| Proof::new())
    }

    pub fn get_secondary_proof(&self) -> &Proof {
        self.secondary_proof.as_ref().unwrap_or_else(|| Proof::default_instance())
    }

    // string signature = 4;

    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::string::String) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::string::String {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signature, ::std::string::String::new())
    }

    pub fn get_signature(&self) -> &str {
        &self.signature
    }
}

impl ::protobuf::Message for State {
    fn is_initialized(&self) -> bool {
        for v in &self.bare_state {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.primary_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.secondary_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.bare_state)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.primary_proof)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.secondary_proof)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.bare_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.primary_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.secondary_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.bare_state.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.primary_proof.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.secondary_proof.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.signature.is_empty() {
            os.write_string(4, &self.signature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> State {
        State::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BareState>>(
                    "bare_state",
                    |m: &State| { &m.bare_state },
                    |m: &mut State| { &mut m.bare_state },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Proof>>(
                    "primary_proof",
                    |m: &State| { &m.primary_proof },
                    |m: &mut State| { &mut m.primary_proof },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Proof>>(
                    "secondary_proof",
                    |m: &State| { &m.secondary_proof },
                    |m: &mut State| { &mut m.secondary_proof },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "signature",
                    |m: &State| { &m.signature },
                    |m: &mut State| { &mut m.signature },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<State>(
                    "State",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static State {
        static mut instance: ::protobuf::lazy::Lazy<State> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const State,
        };
        unsafe {
            instance.get(State::new)
        }
    }
}

impl ::protobuf::Clear for State {
    fn clear(&mut self) {
        self.clear_bare_state();
        self.clear_primary_proof();
        self.clear_secondary_proof();
        self.clear_signature();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for State {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for State {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignedBlockProposal {
    // message fields
    pub block_proposal: ::protobuf::SingularPtrField<BlockProposal>,
    pub signature: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl SignedBlockProposal {
    pub fn new() -> SignedBlockProposal {
        ::std::default::Default::default()
    }

    // .BlockProposal block_proposal = 1;

    pub fn clear_block_proposal(&mut self) {
        self.block_proposal.clear();
    }

    pub fn has_block_proposal(&self) -> bool {
        self.block_proposal.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block_proposal(&mut self, v: BlockProposal) {
        self.block_proposal = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_proposal(&mut self) -> &mut BlockProposal {
        if self.block_proposal.is_none() {
            self.block_proposal.set_default();
        }
        self.block_proposal.as_mut().unwrap()
    }

    // Take field
    pub fn take_block_proposal(&mut self) -> BlockProposal {
        self.block_proposal.take().unwrap_or_else(|| BlockProposal::new())
    }

    pub fn get_block_proposal(&self) -> &BlockProposal {
        self.block_proposal.as_ref().unwrap_or_else(|| BlockProposal::default_instance())
    }

    // string signature = 2;

    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::string::String) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::string::String {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signature, ::std::string::String::new())
    }

    pub fn get_signature(&self) -> &str {
        &self.signature
    }
}

impl ::protobuf::Message for SignedBlockProposal {
    fn is_initialized(&self) -> bool {
        for v in &self.block_proposal {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block_proposal)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.block_proposal.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.block_proposal.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.signature.is_empty() {
            os.write_string(2, &self.signature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignedBlockProposal {
        SignedBlockProposal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlockProposal>>(
                    "block_proposal",
                    |m: &SignedBlockProposal| { &m.block_proposal },
                    |m: &mut SignedBlockProposal| { &mut m.block_proposal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "signature",
                    |m: &SignedBlockProposal| { &m.signature },
                    |m: &mut SignedBlockProposal| { &mut m.signature },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SignedBlockProposal>(
                    "SignedBlockProposal",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SignedBlockProposal {
        static mut instance: ::protobuf::lazy::Lazy<SignedBlockProposal> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SignedBlockProposal,
        };
        unsafe {
            instance.get(SignedBlockProposal::new)
        }
    }
}

impl ::protobuf::Clear for SignedBlockProposal {
    fn clear(&mut self) {
        self.clear_block_proposal();
        self.clear_signature();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignedBlockProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedBlockProposal {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Gossip {
    // message fields
    pub sender_id: u64,
    pub receiver_id: u64,
    pub block_index: u64,
    pub signature: ::std::string::String,
    // message oneof groups
    pub body: ::std::option::Option<Gossip_oneof_body>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum Gossip_oneof_body {
    nightshade_state_update(Gossip_Message),
    payload_request(Gossip_PayloadRequest),
    payload_reply(Gossip_PayloadReply),
}

impl Gossip {
    pub fn new() -> Gossip {
        ::std::default::Default::default()
    }

    // uint64 sender_id = 1;

    pub fn clear_sender_id(&mut self) {
        self.sender_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_sender_id(&mut self, v: u64) {
        self.sender_id = v;
    }

    pub fn get_sender_id(&self) -> u64 {
        self.sender_id
    }

    // uint64 receiver_id = 2;

    pub fn clear_receiver_id(&mut self) {
        self.receiver_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_receiver_id(&mut self, v: u64) {
        self.receiver_id = v;
    }

    pub fn get_receiver_id(&self) -> u64 {
        self.receiver_id
    }

    // .Gossip.Message nightshade_state_update = 3;

    pub fn clear_nightshade_state_update(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_nightshade_state_update(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(Gossip_oneof_body::nightshade_state_update(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_nightshade_state_update(&mut self, v: Gossip_Message) {
        self.body = ::std::option::Option::Some(Gossip_oneof_body::nightshade_state_update(v))
    }

    // Mutable pointer to the field.
    pub fn mut_nightshade_state_update(&mut self) -> &mut Gossip_Message {
        if let ::std::option::Option::Some(Gossip_oneof_body::nightshade_state_update(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(Gossip_oneof_body::nightshade_state_update(Gossip_Message::new()));
        }
        match self.body {
            ::std::option::Option::Some(Gossip_oneof_body::nightshade_state_update(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_nightshade_state_update(&mut self) -> Gossip_Message {
        if self.has_nightshade_state_update() {
            match self.body.take() {
                ::std::option::Option::Some(Gossip_oneof_body::nightshade_state_update(v)) => v,
                _ => panic!(),
            }
        } else {
            Gossip_Message::new()
        }
    }

    pub fn get_nightshade_state_update(&self) -> &Gossip_Message {
        match self.body {
            ::std::option::Option::Some(Gossip_oneof_body::nightshade_state_update(ref v)) => v,
            _ => Gossip_Message::default_instance(),
        }
    }

    // .Gossip.PayloadRequest payload_request = 4;

    pub fn clear_payload_request(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_payload_request(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(Gossip_oneof_body::payload_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_payload_request(&mut self, v: Gossip_PayloadRequest) {
        self.body = ::std::option::Option::Some(Gossip_oneof_body::payload_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_payload_request(&mut self) -> &mut Gossip_PayloadRequest {
        if let ::std::option::Option::Some(Gossip_oneof_body::payload_request(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(Gossip_oneof_body::payload_request(Gossip_PayloadRequest::new()));
        }
        match self.body {
            ::std::option::Option::Some(Gossip_oneof_body::payload_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_payload_request(&mut self) -> Gossip_PayloadRequest {
        if self.has_payload_request() {
            match self.body.take() {
                ::std::option::Option::Some(Gossip_oneof_body::payload_request(v)) => v,
                _ => panic!(),
            }
        } else {
            Gossip_PayloadRequest::new()
        }
    }

    pub fn get_payload_request(&self) -> &Gossip_PayloadRequest {
        match self.body {
            ::std::option::Option::Some(Gossip_oneof_body::payload_request(ref v)) => v,
            _ => Gossip_PayloadRequest::default_instance(),
        }
    }

    // .Gossip.PayloadReply payload_reply = 5;

    pub fn clear_payload_reply(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_payload_reply(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(Gossip_oneof_body::payload_reply(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_payload_reply(&mut self, v: Gossip_PayloadReply) {
        self.body = ::std::option::Option::Some(Gossip_oneof_body::payload_reply(v))
    }

    // Mutable pointer to the field.
    pub fn mut_payload_reply(&mut self) -> &mut Gossip_PayloadReply {
        if let ::std::option::Option::Some(Gossip_oneof_body::payload_reply(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(Gossip_oneof_body::payload_reply(Gossip_PayloadReply::new()));
        }
        match self.body {
            ::std::option::Option::Some(Gossip_oneof_body::payload_reply(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_payload_reply(&mut self) -> Gossip_PayloadReply {
        if self.has_payload_reply() {
            match self.body.take() {
                ::std::option::Option::Some(Gossip_oneof_body::payload_reply(v)) => v,
                _ => panic!(),
            }
        } else {
            Gossip_PayloadReply::new()
        }
    }

    pub fn get_payload_reply(&self) -> &Gossip_PayloadReply {
        match self.body {
            ::std::option::Option::Some(Gossip_oneof_body::payload_reply(ref v)) => v,
            _ => Gossip_PayloadReply::default_instance(),
        }
    }

    // uint64 block_index = 6;

    pub fn clear_block_index(&mut self) {
        self.block_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_index(&mut self, v: u64) {
        self.block_index = v;
    }

    pub fn get_block_index(&self) -> u64 {
        self.block_index
    }

    // string signature = 7;

    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::string::String) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::string::String {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signature, ::std::string::String::new())
    }

    pub fn get_signature(&self) -> &str {
        &self.signature
    }
}

impl ::protobuf::Message for Gossip {
    fn is_initialized(&self) -> bool {
        if let Some(Gossip_oneof_body::nightshade_state_update(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Gossip_oneof_body::payload_request(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Gossip_oneof_body::payload_reply(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sender_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.receiver_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(Gossip_oneof_body::nightshade_state_update(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(Gossip_oneof_body::payload_request(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(Gossip_oneof_body::payload_reply(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.block_index = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sender_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sender_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.receiver_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.receiver_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.block_index != 0 {
            my_size += ::protobuf::rt::value_size(6, self.block_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.signature);
        }
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &Gossip_oneof_body::nightshade_state_update(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Gossip_oneof_body::payload_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Gossip_oneof_body::payload_reply(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.sender_id != 0 {
            os.write_uint64(1, self.sender_id)?;
        }
        if self.receiver_id != 0 {
            os.write_uint64(2, self.receiver_id)?;
        }
        if self.block_index != 0 {
            os.write_uint64(6, self.block_index)?;
        }
        if !self.signature.is_empty() {
            os.write_string(7, &self.signature)?;
        }
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &Gossip_oneof_body::nightshade_state_update(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Gossip_oneof_body::payload_request(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Gossip_oneof_body::payload_reply(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Gossip {
        Gossip::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "sender_id",
                    |m: &Gossip| { &m.sender_id },
                    |m: &mut Gossip| { &mut m.sender_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "receiver_id",
                    |m: &Gossip| { &m.receiver_id },
                    |m: &mut Gossip| { &mut m.receiver_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Gossip_Message>(
                    "nightshade_state_update",
                    Gossip::has_nightshade_state_update,
                    Gossip::get_nightshade_state_update,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Gossip_PayloadRequest>(
                    "payload_request",
                    Gossip::has_payload_request,
                    Gossip::get_payload_request,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Gossip_PayloadReply>(
                    "payload_reply",
                    Gossip::has_payload_reply,
                    Gossip::get_payload_reply,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "block_index",
                    |m: &Gossip| { &m.block_index },
                    |m: &mut Gossip| { &mut m.block_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "signature",
                    |m: &Gossip| { &m.signature },
                    |m: &mut Gossip| { &mut m.signature },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Gossip>(
                    "Gossip",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Gossip {
        static mut instance: ::protobuf::lazy::Lazy<Gossip> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Gossip,
        };
        unsafe {
            instance.get(Gossip::new)
        }
    }
}

impl ::protobuf::Clear for Gossip {
    fn clear(&mut self) {
        self.clear_sender_id();
        self.clear_receiver_id();
        self.clear_nightshade_state_update();
        self.clear_payload_request();
        self.clear_payload_reply();
        self.clear_block_index();
        self.clear_signature();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Gossip {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Gossip {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Gossip_Message {
    // message fields
    pub sender_id: u64,
    pub receiver_id: u64,
    pub state: ::protobuf::SingularPtrField<State>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Gossip_Message {
    pub fn new() -> Gossip_Message {
        ::std::default::Default::default()
    }

    // uint64 sender_id = 1;

    pub fn clear_sender_id(&mut self) {
        self.sender_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_sender_id(&mut self, v: u64) {
        self.sender_id = v;
    }

    pub fn get_sender_id(&self) -> u64 {
        self.sender_id
    }

    // uint64 receiver_id = 2;

    pub fn clear_receiver_id(&mut self) {
        self.receiver_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_receiver_id(&mut self, v: u64) {
        self.receiver_id = v;
    }

    pub fn get_receiver_id(&self) -> u64 {
        self.receiver_id
    }

    // .State state = 3;

    pub fn clear_state(&mut self) {
        self.state.clear();
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: State) {
        self.state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut State {
        if self.state.is_none() {
            self.state.set_default();
        }
        self.state.as_mut().unwrap()
    }

    // Take field
    pub fn take_state(&mut self) -> State {
        self.state.take().unwrap_or_else(|| State::new())
    }

    pub fn get_state(&self) -> &State {
        self.state.as_ref().unwrap_or_else(|| State::default_instance())
    }
}

impl ::protobuf::Message for Gossip_Message {
    fn is_initialized(&self) -> bool {
        for v in &self.state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sender_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.receiver_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.state)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sender_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sender_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.receiver_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.receiver_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.sender_id != 0 {
            os.write_uint64(1, self.sender_id)?;
        }
        if self.receiver_id != 0 {
            os.write_uint64(2, self.receiver_id)?;
        }
        if let Some(ref v) = self.state.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Gossip_Message {
        Gossip_Message::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "sender_id",
                    |m: &Gossip_Message| { &m.sender_id },
                    |m: &mut Gossip_Message| { &mut m.sender_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "receiver_id",
                    |m: &Gossip_Message| { &m.receiver_id },
                    |m: &mut Gossip_Message| { &mut m.receiver_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<State>>(
                    "state",
                    |m: &Gossip_Message| { &m.state },
                    |m: &mut Gossip_Message| { &mut m.state },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Gossip_Message>(
                    "Gossip_Message",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Gossip_Message {
        static mut instance: ::protobuf::lazy::Lazy<Gossip_Message> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Gossip_Message,
        };
        unsafe {
            instance.get(Gossip_Message::new)
        }
    }
}

impl ::protobuf::Clear for Gossip_Message {
    fn clear(&mut self) {
        self.clear_sender_id();
        self.clear_receiver_id();
        self.clear_state();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Gossip_Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Gossip_Message {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Gossip_PayloadRequest {
    // message fields
    pub payload_request: ::std::vec::Vec<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Gossip_PayloadRequest {
    pub fn new() -> Gossip_PayloadRequest {
        ::std::default::Default::default()
    }

    // repeated uint64 payload_request = 1;

    pub fn clear_payload_request(&mut self) {
        self.payload_request.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload_request(&mut self, v: ::std::vec::Vec<u64>) {
        self.payload_request = v;
    }

    // Mutable pointer to the field.
    pub fn mut_payload_request(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.payload_request
    }

    // Take field
    pub fn take_payload_request(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.payload_request, ::std::vec::Vec::new())
    }

    pub fn get_payload_request(&self) -> &[u64] {
        &self.payload_request
    }
}

impl ::protobuf::Message for Gossip_PayloadRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.payload_request)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.payload_request {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.payload_request {
            os.write_uint64(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Gossip_PayloadRequest {
        Gossip_PayloadRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "payload_request",
                    |m: &Gossip_PayloadRequest| { &m.payload_request },
                    |m: &mut Gossip_PayloadRequest| { &mut m.payload_request },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Gossip_PayloadRequest>(
                    "Gossip_PayloadRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Gossip_PayloadRequest {
        static mut instance: ::protobuf::lazy::Lazy<Gossip_PayloadRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Gossip_PayloadRequest,
        };
        unsafe {
            instance.get(Gossip_PayloadRequest::new)
        }
    }
}

impl ::protobuf::Clear for Gossip_PayloadRequest {
    fn clear(&mut self) {
        self.clear_payload_request();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Gossip_PayloadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Gossip_PayloadRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Gossip_PayloadReply {
    // message fields
    pub payload_reply: ::protobuf::RepeatedField<SignedBlockProposal>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Gossip_PayloadReply {
    pub fn new() -> Gossip_PayloadReply {
        ::std::default::Default::default()
    }

    // repeated .SignedBlockProposal payload_reply = 1;

    pub fn clear_payload_reply(&mut self) {
        self.payload_reply.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload_reply(&mut self, v: ::protobuf::RepeatedField<SignedBlockProposal>) {
        self.payload_reply = v;
    }

    // Mutable pointer to the field.
    pub fn mut_payload_reply(&mut self) -> &mut ::protobuf::RepeatedField<SignedBlockProposal> {
        &mut self.payload_reply
    }

    // Take field
    pub fn take_payload_reply(&mut self) -> ::protobuf::RepeatedField<SignedBlockProposal> {
        ::std::mem::replace(&mut self.payload_reply, ::protobuf::RepeatedField::new())
    }

    pub fn get_payload_reply(&self) -> &[SignedBlockProposal] {
        &self.payload_reply
    }
}

impl ::protobuf::Message for Gossip_PayloadReply {
    fn is_initialized(&self) -> bool {
        for v in &self.payload_reply {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.payload_reply)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.payload_reply {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.payload_reply {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Gossip_PayloadReply {
        Gossip_PayloadReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SignedBlockProposal>>(
                    "payload_reply",
                    |m: &Gossip_PayloadReply| { &m.payload_reply },
                    |m: &mut Gossip_PayloadReply| { &mut m.payload_reply },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Gossip_PayloadReply>(
                    "Gossip_PayloadReply",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Gossip_PayloadReply {
        static mut instance: ::protobuf::lazy::Lazy<Gossip_PayloadReply> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Gossip_PayloadReply,
        };
        unsafe {
            instance.get(Gossip_PayloadReply::new)
        }
    }
}

impl ::protobuf::Clear for Gossip_PayloadReply {
    fn clear(&mut self) {
        self.clear_payload_reply();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Gossip_PayloadReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Gossip_PayloadReply {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PayloadGossip {
    // message fields
    pub sender_id: u64,
    pub receiver_id: u64,
    pub payload: ::protobuf::SingularPtrField<super::chain::ChainPayload>,
    pub block_index: u64,
    pub signature: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl PayloadGossip {
    pub fn new() -> PayloadGossip {
        ::std::default::Default::default()
    }

    // uint64 sender_id = 1;

    pub fn clear_sender_id(&mut self) {
        self.sender_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_sender_id(&mut self, v: u64) {
        self.sender_id = v;
    }

    pub fn get_sender_id(&self) -> u64 {
        self.sender_id
    }

    // uint64 receiver_id = 2;

    pub fn clear_receiver_id(&mut self) {
        self.receiver_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_receiver_id(&mut self, v: u64) {
        self.receiver_id = v;
    }

    pub fn get_receiver_id(&self) -> u64 {
        self.receiver_id
    }

    // .ChainPayload payload = 3;

    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: super::chain::ChainPayload) {
        self.payload = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut super::chain::ChainPayload {
        if self.payload.is_none() {
            self.payload.set_default();
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> super::chain::ChainPayload {
        self.payload.take().unwrap_or_else(|| super::chain::ChainPayload::new())
    }

    pub fn get_payload(&self) -> &super::chain::ChainPayload {
        self.payload.as_ref().unwrap_or_else(|| super::chain::ChainPayload::default_instance())
    }

    // uint64 block_index = 4;

    pub fn clear_block_index(&mut self) {
        self.block_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_index(&mut self, v: u64) {
        self.block_index = v;
    }

    pub fn get_block_index(&self) -> u64 {
        self.block_index
    }

    // string signature = 5;

    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::string::String) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::string::String {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signature, ::std::string::String::new())
    }

    pub fn get_signature(&self) -> &str {
        &self.signature
    }
}

impl ::protobuf::Message for PayloadGossip {
    fn is_initialized(&self) -> bool {
        for v in &self.payload {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sender_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.receiver_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.payload)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.block_index = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sender_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sender_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.receiver_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.receiver_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.payload.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.block_index != 0 {
            my_size += ::protobuf::rt::value_size(4, self.block_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.sender_id != 0 {
            os.write_uint64(1, self.sender_id)?;
        }
        if self.receiver_id != 0 {
            os.write_uint64(2, self.receiver_id)?;
        }
        if let Some(ref v) = self.payload.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.block_index != 0 {
            os.write_uint64(4, self.block_index)?;
        }
        if !self.signature.is_empty() {
            os.write_string(5, &self.signature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PayloadGossip {
        PayloadGossip::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "sender_id",
                    |m: &PayloadGossip| { &m.sender_id },
                    |m: &mut PayloadGossip| { &mut m.sender_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "receiver_id",
                    |m: &PayloadGossip| { &m.receiver_id },
                    |m: &mut PayloadGossip| { &mut m.receiver_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::chain::ChainPayload>>(
                    "payload",
                    |m: &PayloadGossip| { &m.payload },
                    |m: &mut PayloadGossip| { &mut m.payload },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "block_index",
                    |m: &PayloadGossip| { &m.block_index },
                    |m: &mut PayloadGossip| { &mut m.block_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "signature",
                    |m: &PayloadGossip| { &m.signature },
                    |m: &mut PayloadGossip| { &mut m.signature },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PayloadGossip>(
                    "PayloadGossip",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PayloadGossip {
        static mut instance: ::protobuf::lazy::Lazy<PayloadGossip> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PayloadGossip,
        };
        unsafe {
            instance.get(PayloadGossip::new)
        }
    }
}

impl ::protobuf::Clear for PayloadGossip {
    fn clear(&mut self) {
        self.clear_sender_id();
        self.clear_receiver_id();
        self.clear_payload();
        self.clear_block_index();
        self.clear_signature();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PayloadGossip {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PayloadGossip {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17protos/nightshade.proto\x1a\x12protos/chain.proto\";\n\rBlockPropo\
    sal\x12\x12\n\x04hash\x18\x01\x20\x01(\x0cR\x04hash\x12\x16\n\x06author\
    \x18\x02\x20\x01(\x04R\x06author\"\x99\x01\n\tBareState\x12-\n\x12primar\
    y_confidence\x18\x01\x20\x01(\x03R\x11primaryConfidence\x12*\n\x08endors\
    es\x18\x02\x20\x01(\x0b2\x0e.BlockProposalR\x08endorses\x121\n\x14second\
    ary_confidence\x18\x03\x20\x01(\x03R\x13secondaryConfidence\"d\n\x05Proo\
    f\x12)\n\nbare_state\x18\x01\x20\x01(\x0b2\n.BareStateR\tbareState\x12\
    \x12\n\x04mask\x18\x02\x20\x03(\x08R\x04mask\x12\x1c\n\tsignature\x18\
    \x03\x20\x01(\tR\tsignature\"\xae\x01\n\x05State\x12)\n\nbare_state\x18\
    \x01\x20\x01(\x0b2\n.BareStateR\tbareState\x12+\n\rprimary_proof\x18\x02\
    \x20\x01(\x0b2\x06.ProofR\x0cprimaryProof\x12/\n\x0fsecondary_proof\x18\
    \x03\x20\x01(\x0b2\x06.ProofR\x0esecondaryProof\x12\x1c\n\tsignature\x18\
    \x04\x20\x01(\tR\tsignature\"j\n\x13SignedBlockProposal\x125\n\x0eblock_\
    proposal\x18\x01\x20\x01(\x0b2\x0e.BlockProposalR\rblockProposal\x12\x1c\
    \n\tsignature\x18\x02\x20\x01(\tR\tsignature\"\xc5\x04\n\x06Gossip\x12\
    \x1b\n\tsender_id\x18\x01\x20\x01(\x04R\x08senderId\x12\x1f\n\x0breceive\
    r_id\x18\x02\x20\x01(\x04R\nreceiverId\x12I\n\x17nightshade_state_update\
    \x18\x03\x20\x01(\x0b2\x0f.Gossip.MessageH\0R\x15nightshadeStateUpdate\
    \x12A\n\x0fpayload_request\x18\x04\x20\x01(\x0b2\x16.Gossip.PayloadReque\
    stH\0R\x0epayloadRequest\x12;\n\rpayload_reply\x18\x05\x20\x01(\x0b2\x14\
    .Gossip.PayloadReplyH\0R\x0cpayloadReply\x12\x1f\n\x0bblock_index\x18\
    \x06\x20\x01(\x04R\nblockIndex\x12\x1c\n\tsignature\x18\x07\x20\x01(\tR\
    \tsignature\x1ae\n\x07Message\x12\x1b\n\tsender_id\x18\x01\x20\x01(\x04R\
    \x08senderId\x12\x1f\n\x0breceiver_id\x18\x02\x20\x01(\x04R\nreceiverId\
    \x12\x1c\n\x05state\x18\x03\x20\x01(\x0b2\x06.StateR\x05state\x1a9\n\x0e\
    PayloadRequest\x12'\n\x0fpayload_request\x18\x01\x20\x03(\x04R\x0epayloa\
    dRequest\x1aI\n\x0cPayloadReply\x129\n\rpayload_reply\x18\x01\x20\x03(\
    \x0b2\x14.SignedBlockProposalR\x0cpayloadReplyB\x06\n\x04body\"\xb5\x01\
    \n\rPayloadGossip\x12\x1b\n\tsender_id\x18\x01\x20\x01(\x04R\x08senderId\
    \x12\x1f\n\x0breceiver_id\x18\x02\x20\x01(\x04R\nreceiverId\x12'\n\x07pa\
    yload\x18\x03\x20\x01(\x0b2\r.ChainPayloadR\x07payload\x12\x1f\n\x0bbloc\
    k_index\x18\x04\x20\x01(\x04R\nblockIndex\x12\x1c\n\tsignature\x18\x05\
    \x20\x01(\tR\tsignatureb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
