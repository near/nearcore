// This file is generated by rust-protobuf 2.2.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct CreateAccountTransaction {
    // message fields
    pub nonce: u64,
    pub originator: ::std::string::String,
    pub new_account_id: ::std::string::String,
    pub amount: u64,
    pub public_key: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CreateAccountTransaction {
    pub fn new() -> CreateAccountTransaction {
        ::std::default::Default::default()
    }

    // uint64 nonce = 1;

    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }

    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }

    // string originator = 2;

    pub fn clear_originator(&mut self) {
        self.originator.clear();
    }

    // Param is passed by value, moved
    pub fn set_originator(&mut self, v: ::std::string::String) {
        self.originator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_originator(&mut self) -> &mut ::std::string::String {
        &mut self.originator
    }

    // Take field
    pub fn take_originator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.originator, ::std::string::String::new())
    }

    pub fn get_originator(&self) -> &str {
        &self.originator
    }

    // string new_account_id = 3;

    pub fn clear_new_account_id(&mut self) {
        self.new_account_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_new_account_id(&mut self, v: ::std::string::String) {
        self.new_account_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_account_id(&mut self) -> &mut ::std::string::String {
        &mut self.new_account_id
    }

    // Take field
    pub fn take_new_account_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.new_account_id, ::std::string::String::new())
    }

    pub fn get_new_account_id(&self) -> &str {
        &self.new_account_id
    }

    // uint64 amount = 4;

    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = v;
    }

    pub fn get_amount(&self) -> u64 {
        self.amount
    }

    // bytes public_key = 5;

    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.public_key
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.public_key, ::std::vec::Vec::new())
    }

    pub fn get_public_key(&self) -> &[u8] {
        &self.public_key
    }
}

impl ::protobuf::Message for CreateAccountTransaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.originator)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.new_account_id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.public_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.originator.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.originator);
        }
        if !self.new_account_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.new_account_id);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(4, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.public_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.public_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.nonce != 0 {
            os.write_uint64(1, self.nonce)?;
        }
        if !self.originator.is_empty() {
            os.write_string(2, &self.originator)?;
        }
        if !self.new_account_id.is_empty() {
            os.write_string(3, &self.new_account_id)?;
        }
        if self.amount != 0 {
            os.write_uint64(4, self.amount)?;
        }
        if !self.public_key.is_empty() {
            os.write_bytes(5, &self.public_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateAccountTransaction {
        CreateAccountTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "nonce",
                    |m: &CreateAccountTransaction| { &m.nonce },
                    |m: &mut CreateAccountTransaction| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "originator",
                    |m: &CreateAccountTransaction| { &m.originator },
                    |m: &mut CreateAccountTransaction| { &mut m.originator },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "new_account_id",
                    |m: &CreateAccountTransaction| { &m.new_account_id },
                    |m: &mut CreateAccountTransaction| { &mut m.new_account_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "amount",
                    |m: &CreateAccountTransaction| { &m.amount },
                    |m: &mut CreateAccountTransaction| { &mut m.amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "public_key",
                    |m: &CreateAccountTransaction| { &m.public_key },
                    |m: &mut CreateAccountTransaction| { &mut m.public_key },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateAccountTransaction>(
                    "CreateAccountTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateAccountTransaction {
        static mut instance: ::protobuf::lazy::Lazy<CreateAccountTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateAccountTransaction,
        };
        unsafe {
            instance.get(CreateAccountTransaction::new)
        }
    }
}

impl ::protobuf::Clear for CreateAccountTransaction {
    fn clear(&mut self) {
        self.clear_nonce();
        self.clear_originator();
        self.clear_new_account_id();
        self.clear_amount();
        self.clear_public_key();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateAccountTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateAccountTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeployContractTransaction {
    // message fields
    pub nonce: u64,
    pub originator: ::std::string::String,
    pub contract_id: ::std::string::String,
    pub wasm_byte_array: ::std::vec::Vec<u8>,
    pub public_key: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl DeployContractTransaction {
    pub fn new() -> DeployContractTransaction {
        ::std::default::Default::default()
    }

    // uint64 nonce = 1;

    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }

    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }

    // string originator = 2;

    pub fn clear_originator(&mut self) {
        self.originator.clear();
    }

    // Param is passed by value, moved
    pub fn set_originator(&mut self, v: ::std::string::String) {
        self.originator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_originator(&mut self) -> &mut ::std::string::String {
        &mut self.originator
    }

    // Take field
    pub fn take_originator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.originator, ::std::string::String::new())
    }

    pub fn get_originator(&self) -> &str {
        &self.originator
    }

    // string contract_id = 3;

    pub fn clear_contract_id(&mut self) {
        self.contract_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_id(&mut self, v: ::std::string::String) {
        self.contract_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_id(&mut self) -> &mut ::std::string::String {
        &mut self.contract_id
    }

    // Take field
    pub fn take_contract_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract_id, ::std::string::String::new())
    }

    pub fn get_contract_id(&self) -> &str {
        &self.contract_id
    }

    // bytes wasm_byte_array = 4;

    pub fn clear_wasm_byte_array(&mut self) {
        self.wasm_byte_array.clear();
    }

    // Param is passed by value, moved
    pub fn set_wasm_byte_array(&mut self, v: ::std::vec::Vec<u8>) {
        self.wasm_byte_array = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_wasm_byte_array(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.wasm_byte_array
    }

    // Take field
    pub fn take_wasm_byte_array(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.wasm_byte_array, ::std::vec::Vec::new())
    }

    pub fn get_wasm_byte_array(&self) -> &[u8] {
        &self.wasm_byte_array
    }

    // bytes public_key = 5;

    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.public_key
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.public_key, ::std::vec::Vec::new())
    }

    pub fn get_public_key(&self) -> &[u8] {
        &self.public_key
    }
}

impl ::protobuf::Message for DeployContractTransaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.originator)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.wasm_byte_array)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.public_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.originator.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.originator);
        }
        if !self.contract_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.contract_id);
        }
        if !self.wasm_byte_array.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.wasm_byte_array);
        }
        if !self.public_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.public_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.nonce != 0 {
            os.write_uint64(1, self.nonce)?;
        }
        if !self.originator.is_empty() {
            os.write_string(2, &self.originator)?;
        }
        if !self.contract_id.is_empty() {
            os.write_string(3, &self.contract_id)?;
        }
        if !self.wasm_byte_array.is_empty() {
            os.write_bytes(4, &self.wasm_byte_array)?;
        }
        if !self.public_key.is_empty() {
            os.write_bytes(5, &self.public_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeployContractTransaction {
        DeployContractTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "nonce",
                    |m: &DeployContractTransaction| { &m.nonce },
                    |m: &mut DeployContractTransaction| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "originator",
                    |m: &DeployContractTransaction| { &m.originator },
                    |m: &mut DeployContractTransaction| { &mut m.originator },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "contract_id",
                    |m: &DeployContractTransaction| { &m.contract_id },
                    |m: &mut DeployContractTransaction| { &mut m.contract_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "wasm_byte_array",
                    |m: &DeployContractTransaction| { &m.wasm_byte_array },
                    |m: &mut DeployContractTransaction| { &mut m.wasm_byte_array },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "public_key",
                    |m: &DeployContractTransaction| { &m.public_key },
                    |m: &mut DeployContractTransaction| { &mut m.public_key },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeployContractTransaction>(
                    "DeployContractTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeployContractTransaction {
        static mut instance: ::protobuf::lazy::Lazy<DeployContractTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeployContractTransaction,
        };
        unsafe {
            instance.get(DeployContractTransaction::new)
        }
    }
}

impl ::protobuf::Clear for DeployContractTransaction {
    fn clear(&mut self) {
        self.clear_nonce();
        self.clear_originator();
        self.clear_contract_id();
        self.clear_wasm_byte_array();
        self.clear_public_key();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeployContractTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeployContractTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FunctionCallTransaction {
    // message fields
    pub nonce: u64,
    pub originator: ::std::string::String,
    pub contract_id: ::std::string::String,
    pub method_name: ::std::vec::Vec<u8>,
    pub args: ::std::vec::Vec<u8>,
    pub amount: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl FunctionCallTransaction {
    pub fn new() -> FunctionCallTransaction {
        ::std::default::Default::default()
    }

    // uint64 nonce = 1;

    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }

    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }

    // string originator = 2;

    pub fn clear_originator(&mut self) {
        self.originator.clear();
    }

    // Param is passed by value, moved
    pub fn set_originator(&mut self, v: ::std::string::String) {
        self.originator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_originator(&mut self) -> &mut ::std::string::String {
        &mut self.originator
    }

    // Take field
    pub fn take_originator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.originator, ::std::string::String::new())
    }

    pub fn get_originator(&self) -> &str {
        &self.originator
    }

    // string contract_id = 3;

    pub fn clear_contract_id(&mut self) {
        self.contract_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_id(&mut self, v: ::std::string::String) {
        self.contract_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_id(&mut self) -> &mut ::std::string::String {
        &mut self.contract_id
    }

    // Take field
    pub fn take_contract_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract_id, ::std::string::String::new())
    }

    pub fn get_contract_id(&self) -> &str {
        &self.contract_id
    }

    // bytes method_name = 4;

    pub fn clear_method_name(&mut self) {
        self.method_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_method_name(&mut self, v: ::std::vec::Vec<u8>) {
        self.method_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_method_name(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.method_name
    }

    // Take field
    pub fn take_method_name(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.method_name, ::std::vec::Vec::new())
    }

    pub fn get_method_name(&self) -> &[u8] {
        &self.method_name
    }

    // bytes args = 5;

    pub fn clear_args(&mut self) {
        self.args.clear();
    }

    // Param is passed by value, moved
    pub fn set_args(&mut self, v: ::std::vec::Vec<u8>) {
        self.args = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_args(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.args
    }

    // Take field
    pub fn take_args(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.args, ::std::vec::Vec::new())
    }

    pub fn get_args(&self) -> &[u8] {
        &self.args
    }

    // uint64 amount = 6;

    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = v;
    }

    pub fn get_amount(&self) -> u64 {
        self.amount
    }
}

impl ::protobuf::Message for FunctionCallTransaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.originator)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.method_name)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.args)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.originator.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.originator);
        }
        if !self.contract_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.contract_id);
        }
        if !self.method_name.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.method_name);
        }
        if !self.args.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.args);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(6, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.nonce != 0 {
            os.write_uint64(1, self.nonce)?;
        }
        if !self.originator.is_empty() {
            os.write_string(2, &self.originator)?;
        }
        if !self.contract_id.is_empty() {
            os.write_string(3, &self.contract_id)?;
        }
        if !self.method_name.is_empty() {
            os.write_bytes(4, &self.method_name)?;
        }
        if !self.args.is_empty() {
            os.write_bytes(5, &self.args)?;
        }
        if self.amount != 0 {
            os.write_uint64(6, self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FunctionCallTransaction {
        FunctionCallTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "nonce",
                    |m: &FunctionCallTransaction| { &m.nonce },
                    |m: &mut FunctionCallTransaction| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "originator",
                    |m: &FunctionCallTransaction| { &m.originator },
                    |m: &mut FunctionCallTransaction| { &mut m.originator },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "contract_id",
                    |m: &FunctionCallTransaction| { &m.contract_id },
                    |m: &mut FunctionCallTransaction| { &mut m.contract_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "method_name",
                    |m: &FunctionCallTransaction| { &m.method_name },
                    |m: &mut FunctionCallTransaction| { &mut m.method_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "args",
                    |m: &FunctionCallTransaction| { &m.args },
                    |m: &mut FunctionCallTransaction| { &mut m.args },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "amount",
                    |m: &FunctionCallTransaction| { &m.amount },
                    |m: &mut FunctionCallTransaction| { &mut m.amount },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FunctionCallTransaction>(
                    "FunctionCallTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FunctionCallTransaction {
        static mut instance: ::protobuf::lazy::Lazy<FunctionCallTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FunctionCallTransaction,
        };
        unsafe {
            instance.get(FunctionCallTransaction::new)
        }
    }
}

impl ::protobuf::Clear for FunctionCallTransaction {
    fn clear(&mut self) {
        self.clear_nonce();
        self.clear_originator();
        self.clear_contract_id();
        self.clear_method_name();
        self.clear_args();
        self.clear_amount();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FunctionCallTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FunctionCallTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SendMoneyTransaction {
    // message fields
    pub nonce: u64,
    pub originator: ::std::string::String,
    pub receiver: ::std::string::String,
    pub amount: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl SendMoneyTransaction {
    pub fn new() -> SendMoneyTransaction {
        ::std::default::Default::default()
    }

    // uint64 nonce = 1;

    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }

    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }

    // string originator = 2;

    pub fn clear_originator(&mut self) {
        self.originator.clear();
    }

    // Param is passed by value, moved
    pub fn set_originator(&mut self, v: ::std::string::String) {
        self.originator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_originator(&mut self) -> &mut ::std::string::String {
        &mut self.originator
    }

    // Take field
    pub fn take_originator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.originator, ::std::string::String::new())
    }

    pub fn get_originator(&self) -> &str {
        &self.originator
    }

    // string receiver = 3;

    pub fn clear_receiver(&mut self) {
        self.receiver.clear();
    }

    // Param is passed by value, moved
    pub fn set_receiver(&mut self, v: ::std::string::String) {
        self.receiver = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receiver(&mut self) -> &mut ::std::string::String {
        &mut self.receiver
    }

    // Take field
    pub fn take_receiver(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.receiver, ::std::string::String::new())
    }

    pub fn get_receiver(&self) -> &str {
        &self.receiver
    }

    // uint64 amount = 4;

    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = v;
    }

    pub fn get_amount(&self) -> u64 {
        self.amount
    }
}

impl ::protobuf::Message for SendMoneyTransaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.originator)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.receiver)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.originator.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.originator);
        }
        if !self.receiver.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.receiver);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(4, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.nonce != 0 {
            os.write_uint64(1, self.nonce)?;
        }
        if !self.originator.is_empty() {
            os.write_string(2, &self.originator)?;
        }
        if !self.receiver.is_empty() {
            os.write_string(3, &self.receiver)?;
        }
        if self.amount != 0 {
            os.write_uint64(4, self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SendMoneyTransaction {
        SendMoneyTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "nonce",
                    |m: &SendMoneyTransaction| { &m.nonce },
                    |m: &mut SendMoneyTransaction| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "originator",
                    |m: &SendMoneyTransaction| { &m.originator },
                    |m: &mut SendMoneyTransaction| { &mut m.originator },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "receiver",
                    |m: &SendMoneyTransaction| { &m.receiver },
                    |m: &mut SendMoneyTransaction| { &mut m.receiver },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "amount",
                    |m: &SendMoneyTransaction| { &m.amount },
                    |m: &mut SendMoneyTransaction| { &mut m.amount },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SendMoneyTransaction>(
                    "SendMoneyTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SendMoneyTransaction {
        static mut instance: ::protobuf::lazy::Lazy<SendMoneyTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SendMoneyTransaction,
        };
        unsafe {
            instance.get(SendMoneyTransaction::new)
        }
    }
}

impl ::protobuf::Clear for SendMoneyTransaction {
    fn clear(&mut self) {
        self.clear_nonce();
        self.clear_originator();
        self.clear_receiver();
        self.clear_amount();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SendMoneyTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendMoneyTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StakeTransaction {
    // message fields
    pub nonce: u64,
    pub originator: ::std::string::String,
    pub amount: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl StakeTransaction {
    pub fn new() -> StakeTransaction {
        ::std::default::Default::default()
    }

    // uint64 nonce = 1;

    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }

    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }

    // string originator = 2;

    pub fn clear_originator(&mut self) {
        self.originator.clear();
    }

    // Param is passed by value, moved
    pub fn set_originator(&mut self, v: ::std::string::String) {
        self.originator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_originator(&mut self) -> &mut ::std::string::String {
        &mut self.originator
    }

    // Take field
    pub fn take_originator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.originator, ::std::string::String::new())
    }

    pub fn get_originator(&self) -> &str {
        &self.originator
    }

    // uint64 amount = 3;

    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = v;
    }

    pub fn get_amount(&self) -> u64 {
        self.amount
    }
}

impl ::protobuf::Message for StakeTransaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.originator)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.originator.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.originator);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(3, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.nonce != 0 {
            os.write_uint64(1, self.nonce)?;
        }
        if !self.originator.is_empty() {
            os.write_string(2, &self.originator)?;
        }
        if self.amount != 0 {
            os.write_uint64(3, self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StakeTransaction {
        StakeTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "nonce",
                    |m: &StakeTransaction| { &m.nonce },
                    |m: &mut StakeTransaction| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "originator",
                    |m: &StakeTransaction| { &m.originator },
                    |m: &mut StakeTransaction| { &mut m.originator },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "amount",
                    |m: &StakeTransaction| { &m.amount },
                    |m: &mut StakeTransaction| { &mut m.amount },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StakeTransaction>(
                    "StakeTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StakeTransaction {
        static mut instance: ::protobuf::lazy::Lazy<StakeTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StakeTransaction,
        };
        unsafe {
            instance.get(StakeTransaction::new)
        }
    }
}

impl ::protobuf::Clear for StakeTransaction {
    fn clear(&mut self) {
        self.clear_nonce();
        self.clear_originator();
        self.clear_amount();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StakeTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StakeTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SwapKeyTransaction {
    // message fields
    pub nonce: u64,
    pub originator: ::std::string::String,
    pub cur_key: ::std::vec::Vec<u8>,
    pub new_key: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl SwapKeyTransaction {
    pub fn new() -> SwapKeyTransaction {
        ::std::default::Default::default()
    }

    // uint64 nonce = 1;

    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }

    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }

    // string originator = 2;

    pub fn clear_originator(&mut self) {
        self.originator.clear();
    }

    // Param is passed by value, moved
    pub fn set_originator(&mut self, v: ::std::string::String) {
        self.originator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_originator(&mut self) -> &mut ::std::string::String {
        &mut self.originator
    }

    // Take field
    pub fn take_originator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.originator, ::std::string::String::new())
    }

    pub fn get_originator(&self) -> &str {
        &self.originator
    }

    // bytes cur_key = 3;

    pub fn clear_cur_key(&mut self) {
        self.cur_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_cur_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.cur_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cur_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.cur_key
    }

    // Take field
    pub fn take_cur_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.cur_key, ::std::vec::Vec::new())
    }

    pub fn get_cur_key(&self) -> &[u8] {
        &self.cur_key
    }

    // bytes new_key = 4;

    pub fn clear_new_key(&mut self) {
        self.new_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_new_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.new_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.new_key
    }

    // Take field
    pub fn take_new_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.new_key, ::std::vec::Vec::new())
    }

    pub fn get_new_key(&self) -> &[u8] {
        &self.new_key
    }
}

impl ::protobuf::Message for SwapKeyTransaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.originator)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.cur_key)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.new_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.originator.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.originator);
        }
        if !self.cur_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.cur_key);
        }
        if !self.new_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.new_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.nonce != 0 {
            os.write_uint64(1, self.nonce)?;
        }
        if !self.originator.is_empty() {
            os.write_string(2, &self.originator)?;
        }
        if !self.cur_key.is_empty() {
            os.write_bytes(3, &self.cur_key)?;
        }
        if !self.new_key.is_empty() {
            os.write_bytes(4, &self.new_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SwapKeyTransaction {
        SwapKeyTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "nonce",
                    |m: &SwapKeyTransaction| { &m.nonce },
                    |m: &mut SwapKeyTransaction| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "originator",
                    |m: &SwapKeyTransaction| { &m.originator },
                    |m: &mut SwapKeyTransaction| { &mut m.originator },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "cur_key",
                    |m: &SwapKeyTransaction| { &m.cur_key },
                    |m: &mut SwapKeyTransaction| { &mut m.cur_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "new_key",
                    |m: &SwapKeyTransaction| { &m.new_key },
                    |m: &mut SwapKeyTransaction| { &mut m.new_key },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SwapKeyTransaction>(
                    "SwapKeyTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SwapKeyTransaction {
        static mut instance: ::protobuf::lazy::Lazy<SwapKeyTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SwapKeyTransaction,
        };
        unsafe {
            instance.get(SwapKeyTransaction::new)
        }
    }
}

impl ::protobuf::Clear for SwapKeyTransaction {
    fn clear(&mut self) {
        self.clear_nonce();
        self.clear_originator();
        self.clear_cur_key();
        self.clear_new_key();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SwapKeyTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SwapKeyTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignedTransaction {
    // message fields
    pub signature: ::std::vec::Vec<u8>,
    // message oneof groups
    pub body: ::std::option::Option<SignedTransaction_oneof_body>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum SignedTransaction_oneof_body {
    create_account(CreateAccountTransaction),
    deploy_contract(DeployContractTransaction),
    function_call(FunctionCallTransaction),
    send_money(SendMoneyTransaction),
    stake(StakeTransaction),
    swap_key(SwapKeyTransaction),
}

impl SignedTransaction {
    pub fn new() -> SignedTransaction {
        ::std::default::Default::default()
    }

    // bytes signature = 1;

    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature, ::std::vec::Vec::new())
    }

    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }

    // .CreateAccountTransaction create_account = 2;

    pub fn clear_create_account(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_create_account(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::create_account(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_create_account(&mut self, v: CreateAccountTransaction) {
        self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::create_account(v))
    }

    // Mutable pointer to the field.
    pub fn mut_create_account(&mut self) -> &mut CreateAccountTransaction {
        if let ::std::option::Option::Some(SignedTransaction_oneof_body::create_account(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::create_account(CreateAccountTransaction::new()));
        }
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::create_account(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_create_account(&mut self) -> CreateAccountTransaction {
        if self.has_create_account() {
            match self.body.take() {
                ::std::option::Option::Some(SignedTransaction_oneof_body::create_account(v)) => v,
                _ => panic!(),
            }
        } else {
            CreateAccountTransaction::new()
        }
    }

    pub fn get_create_account(&self) -> &CreateAccountTransaction {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::create_account(ref v)) => v,
            _ => CreateAccountTransaction::default_instance(),
        }
    }

    // .DeployContractTransaction deploy_contract = 3;

    pub fn clear_deploy_contract(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_deploy_contract(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::deploy_contract(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_deploy_contract(&mut self, v: DeployContractTransaction) {
        self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::deploy_contract(v))
    }

    // Mutable pointer to the field.
    pub fn mut_deploy_contract(&mut self) -> &mut DeployContractTransaction {
        if let ::std::option::Option::Some(SignedTransaction_oneof_body::deploy_contract(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::deploy_contract(DeployContractTransaction::new()));
        }
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::deploy_contract(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_deploy_contract(&mut self) -> DeployContractTransaction {
        if self.has_deploy_contract() {
            match self.body.take() {
                ::std::option::Option::Some(SignedTransaction_oneof_body::deploy_contract(v)) => v,
                _ => panic!(),
            }
        } else {
            DeployContractTransaction::new()
        }
    }

    pub fn get_deploy_contract(&self) -> &DeployContractTransaction {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::deploy_contract(ref v)) => v,
            _ => DeployContractTransaction::default_instance(),
        }
    }

    // .FunctionCallTransaction function_call = 4;

    pub fn clear_function_call(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_function_call(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::function_call(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_function_call(&mut self, v: FunctionCallTransaction) {
        self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::function_call(v))
    }

    // Mutable pointer to the field.
    pub fn mut_function_call(&mut self) -> &mut FunctionCallTransaction {
        if let ::std::option::Option::Some(SignedTransaction_oneof_body::function_call(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::function_call(FunctionCallTransaction::new()));
        }
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::function_call(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_function_call(&mut self) -> FunctionCallTransaction {
        if self.has_function_call() {
            match self.body.take() {
                ::std::option::Option::Some(SignedTransaction_oneof_body::function_call(v)) => v,
                _ => panic!(),
            }
        } else {
            FunctionCallTransaction::new()
        }
    }

    pub fn get_function_call(&self) -> &FunctionCallTransaction {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::function_call(ref v)) => v,
            _ => FunctionCallTransaction::default_instance(),
        }
    }

    // .SendMoneyTransaction send_money = 5;

    pub fn clear_send_money(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_send_money(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::send_money(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_send_money(&mut self, v: SendMoneyTransaction) {
        self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::send_money(v))
    }

    // Mutable pointer to the field.
    pub fn mut_send_money(&mut self) -> &mut SendMoneyTransaction {
        if let ::std::option::Option::Some(SignedTransaction_oneof_body::send_money(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::send_money(SendMoneyTransaction::new()));
        }
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::send_money(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_send_money(&mut self) -> SendMoneyTransaction {
        if self.has_send_money() {
            match self.body.take() {
                ::std::option::Option::Some(SignedTransaction_oneof_body::send_money(v)) => v,
                _ => panic!(),
            }
        } else {
            SendMoneyTransaction::new()
        }
    }

    pub fn get_send_money(&self) -> &SendMoneyTransaction {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::send_money(ref v)) => v,
            _ => SendMoneyTransaction::default_instance(),
        }
    }

    // .StakeTransaction stake = 6;

    pub fn clear_stake(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_stake(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::stake(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_stake(&mut self, v: StakeTransaction) {
        self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::stake(v))
    }

    // Mutable pointer to the field.
    pub fn mut_stake(&mut self) -> &mut StakeTransaction {
        if let ::std::option::Option::Some(SignedTransaction_oneof_body::stake(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::stake(StakeTransaction::new()));
        }
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::stake(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_stake(&mut self) -> StakeTransaction {
        if self.has_stake() {
            match self.body.take() {
                ::std::option::Option::Some(SignedTransaction_oneof_body::stake(v)) => v,
                _ => panic!(),
            }
        } else {
            StakeTransaction::new()
        }
    }

    pub fn get_stake(&self) -> &StakeTransaction {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::stake(ref v)) => v,
            _ => StakeTransaction::default_instance(),
        }
    }

    // .SwapKeyTransaction swap_key = 7;

    pub fn clear_swap_key(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_swap_key(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::swap_key(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_swap_key(&mut self, v: SwapKeyTransaction) {
        self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::swap_key(v))
    }

    // Mutable pointer to the field.
    pub fn mut_swap_key(&mut self) -> &mut SwapKeyTransaction {
        if let ::std::option::Option::Some(SignedTransaction_oneof_body::swap_key(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::swap_key(SwapKeyTransaction::new()));
        }
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::swap_key(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_swap_key(&mut self) -> SwapKeyTransaction {
        if self.has_swap_key() {
            match self.body.take() {
                ::std::option::Option::Some(SignedTransaction_oneof_body::swap_key(v)) => v,
                _ => panic!(),
            }
        } else {
            SwapKeyTransaction::new()
        }
    }

    pub fn get_swap_key(&self) -> &SwapKeyTransaction {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::swap_key(ref v)) => v,
            _ => SwapKeyTransaction::default_instance(),
        }
    }
}

impl ::protobuf::Message for SignedTransaction {
    fn is_initialized(&self) -> bool {
        if let Some(SignedTransaction_oneof_body::create_account(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SignedTransaction_oneof_body::deploy_contract(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SignedTransaction_oneof_body::function_call(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SignedTransaction_oneof_body::send_money(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SignedTransaction_oneof_body::stake(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SignedTransaction_oneof_body::swap_key(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::create_account(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::deploy_contract(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::function_call(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::send_money(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::stake(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::swap_key(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.signature);
        }
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &SignedTransaction_oneof_body::create_account(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SignedTransaction_oneof_body::deploy_contract(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SignedTransaction_oneof_body::function_call(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SignedTransaction_oneof_body::send_money(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SignedTransaction_oneof_body::stake(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SignedTransaction_oneof_body::swap_key(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.signature.is_empty() {
            os.write_bytes(1, &self.signature)?;
        }
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &SignedTransaction_oneof_body::create_account(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SignedTransaction_oneof_body::deploy_contract(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SignedTransaction_oneof_body::function_call(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SignedTransaction_oneof_body::send_money(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SignedTransaction_oneof_body::stake(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SignedTransaction_oneof_body::swap_key(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignedTransaction {
        SignedTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "signature",
                    |m: &SignedTransaction| { &m.signature },
                    |m: &mut SignedTransaction| { &mut m.signature },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CreateAccountTransaction>(
                    "create_account",
                    SignedTransaction::has_create_account,
                    SignedTransaction::get_create_account,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, DeployContractTransaction>(
                    "deploy_contract",
                    SignedTransaction::has_deploy_contract,
                    SignedTransaction::get_deploy_contract,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, FunctionCallTransaction>(
                    "function_call",
                    SignedTransaction::has_function_call,
                    SignedTransaction::get_function_call,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SendMoneyTransaction>(
                    "send_money",
                    SignedTransaction::has_send_money,
                    SignedTransaction::get_send_money,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, StakeTransaction>(
                    "stake",
                    SignedTransaction::has_stake,
                    SignedTransaction::get_stake,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SwapKeyTransaction>(
                    "swap_key",
                    SignedTransaction::has_swap_key,
                    SignedTransaction::get_swap_key,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SignedTransaction>(
                    "SignedTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SignedTransaction {
        static mut instance: ::protobuf::lazy::Lazy<SignedTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SignedTransaction,
        };
        unsafe {
            instance.get(SignedTransaction::new)
        }
    }
}

impl ::protobuf::Clear for SignedTransaction {
    fn clear(&mut self) {
        self.clear_signature();
        self.clear_create_account();
        self.clear_deploy_contract();
        self.clear_function_call();
        self.clear_send_money();
        self.clear_stake();
        self.clear_swap_key();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignedTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CallbackInfo {
    // message fields
    pub id: ::std::vec::Vec<u8>,
    pub result_index: u64,
    pub receiver: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CallbackInfo {
    pub fn new() -> CallbackInfo {
        ::std::default::Default::default()
    }

    // bytes id = 1;

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.id, ::std::vec::Vec::new())
    }

    pub fn get_id(&self) -> &[u8] {
        &self.id
    }

    // uint64 result_index = 2;

    pub fn clear_result_index(&mut self) {
        self.result_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_result_index(&mut self, v: u64) {
        self.result_index = v;
    }

    pub fn get_result_index(&self) -> u64 {
        self.result_index
    }

    // string receiver = 3;

    pub fn clear_receiver(&mut self) {
        self.receiver.clear();
    }

    // Param is passed by value, moved
    pub fn set_receiver(&mut self, v: ::std::string::String) {
        self.receiver = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receiver(&mut self) -> &mut ::std::string::String {
        &mut self.receiver
    }

    // Take field
    pub fn take_receiver(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.receiver, ::std::string::String::new())
    }

    pub fn get_receiver(&self) -> &str {
        &self.receiver
    }
}

impl ::protobuf::Message for CallbackInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.result_index = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.receiver)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.id);
        }
        if self.result_index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.result_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.receiver.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.receiver);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_bytes(1, &self.id)?;
        }
        if self.result_index != 0 {
            os.write_uint64(2, self.result_index)?;
        }
        if !self.receiver.is_empty() {
            os.write_string(3, &self.receiver)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CallbackInfo {
        CallbackInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "id",
                    |m: &CallbackInfo| { &m.id },
                    |m: &mut CallbackInfo| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "result_index",
                    |m: &CallbackInfo| { &m.result_index },
                    |m: &mut CallbackInfo| { &mut m.result_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "receiver",
                    |m: &CallbackInfo| { &m.receiver },
                    |m: &mut CallbackInfo| { &mut m.receiver },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CallbackInfo>(
                    "CallbackInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CallbackInfo {
        static mut instance: ::protobuf::lazy::Lazy<CallbackInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CallbackInfo,
        };
        unsafe {
            instance.get(CallbackInfo::new)
        }
    }
}

impl ::protobuf::Clear for CallbackInfo {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_result_index();
        self.clear_receiver();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CallbackInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CallbackInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccountingInfo {
    // message fields
    pub originator: ::std::string::String,
    pub contract_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AccountingInfo {
    pub fn new() -> AccountingInfo {
        ::std::default::Default::default()
    }

    // string originator = 1;

    pub fn clear_originator(&mut self) {
        self.originator.clear();
    }

    // Param is passed by value, moved
    pub fn set_originator(&mut self, v: ::std::string::String) {
        self.originator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_originator(&mut self) -> &mut ::std::string::String {
        &mut self.originator
    }

    // Take field
    pub fn take_originator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.originator, ::std::string::String::new())
    }

    pub fn get_originator(&self) -> &str {
        &self.originator
    }

    // string contract_id = 2;

    pub fn clear_contract_id(&mut self) {
        self.contract_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_id(&mut self, v: ::std::string::String) {
        self.contract_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_id(&mut self) -> &mut ::std::string::String {
        &mut self.contract_id
    }

    // Take field
    pub fn take_contract_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract_id, ::std::string::String::new())
    }

    pub fn get_contract_id(&self) -> &str {
        &self.contract_id
    }
}

impl ::protobuf::Message for AccountingInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.originator)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.originator.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.originator);
        }
        if !self.contract_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.contract_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.originator.is_empty() {
            os.write_string(1, &self.originator)?;
        }
        if !self.contract_id.is_empty() {
            os.write_string(2, &self.contract_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountingInfo {
        AccountingInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "originator",
                    |m: &AccountingInfo| { &m.originator },
                    |m: &mut AccountingInfo| { &mut m.originator },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "contract_id",
                    |m: &AccountingInfo| { &m.contract_id },
                    |m: &mut AccountingInfo| { &mut m.contract_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AccountingInfo>(
                    "AccountingInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AccountingInfo {
        static mut instance: ::protobuf::lazy::Lazy<AccountingInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AccountingInfo,
        };
        unsafe {
            instance.get(AccountingInfo::new)
        }
    }
}

impl ::protobuf::Clear for AccountingInfo {
    fn clear(&mut self) {
        self.clear_originator();
        self.clear_contract_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccountingInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountingInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AsyncCallReceipt {
    // message fields
    pub amount: u64,
    pub mana: u32,
    pub method_name: ::std::vec::Vec<u8>,
    pub args: ::std::vec::Vec<u8>,
    pub callback_info: ::protobuf::SingularPtrField<CallbackInfo>,
    pub accounting_info: ::protobuf::SingularPtrField<AccountingInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AsyncCallReceipt {
    pub fn new() -> AsyncCallReceipt {
        ::std::default::Default::default()
    }

    // uint64 amount = 1;

    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = v;
    }

    pub fn get_amount(&self) -> u64 {
        self.amount
    }

    // uint32 mana = 2;

    pub fn clear_mana(&mut self) {
        self.mana = 0;
    }

    // Param is passed by value, moved
    pub fn set_mana(&mut self, v: u32) {
        self.mana = v;
    }

    pub fn get_mana(&self) -> u32 {
        self.mana
    }

    // bytes method_name = 3;

    pub fn clear_method_name(&mut self) {
        self.method_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_method_name(&mut self, v: ::std::vec::Vec<u8>) {
        self.method_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_method_name(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.method_name
    }

    // Take field
    pub fn take_method_name(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.method_name, ::std::vec::Vec::new())
    }

    pub fn get_method_name(&self) -> &[u8] {
        &self.method_name
    }

    // bytes args = 4;

    pub fn clear_args(&mut self) {
        self.args.clear();
    }

    // Param is passed by value, moved
    pub fn set_args(&mut self, v: ::std::vec::Vec<u8>) {
        self.args = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_args(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.args
    }

    // Take field
    pub fn take_args(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.args, ::std::vec::Vec::new())
    }

    pub fn get_args(&self) -> &[u8] {
        &self.args
    }

    // .CallbackInfo callback_info = 5;

    pub fn clear_callback_info(&mut self) {
        self.callback_info.clear();
    }

    pub fn has_callback_info(&self) -> bool {
        self.callback_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_callback_info(&mut self, v: CallbackInfo) {
        self.callback_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_callback_info(&mut self) -> &mut CallbackInfo {
        if self.callback_info.is_none() {
            self.callback_info.set_default();
        }
        self.callback_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_callback_info(&mut self) -> CallbackInfo {
        self.callback_info.take().unwrap_or_else(|| CallbackInfo::new())
    }

    pub fn get_callback_info(&self) -> &CallbackInfo {
        self.callback_info.as_ref().unwrap_or_else(|| CallbackInfo::default_instance())
    }

    // .AccountingInfo accounting_info = 6;

    pub fn clear_accounting_info(&mut self) {
        self.accounting_info.clear();
    }

    pub fn has_accounting_info(&self) -> bool {
        self.accounting_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accounting_info(&mut self, v: AccountingInfo) {
        self.accounting_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accounting_info(&mut self) -> &mut AccountingInfo {
        if self.accounting_info.is_none() {
            self.accounting_info.set_default();
        }
        self.accounting_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_accounting_info(&mut self) -> AccountingInfo {
        self.accounting_info.take().unwrap_or_else(|| AccountingInfo::new())
    }

    pub fn get_accounting_info(&self) -> &AccountingInfo {
        self.accounting_info.as_ref().unwrap_or_else(|| AccountingInfo::default_instance())
    }
}

impl ::protobuf::Message for AsyncCallReceipt {
    fn is_initialized(&self) -> bool {
        for v in &self.callback_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.accounting_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.mana = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.method_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.args)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.callback_info)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.accounting_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(1, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mana != 0 {
            my_size += ::protobuf::rt::value_size(2, self.mana, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.method_name.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.method_name);
        }
        if !self.args.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.args);
        }
        if let Some(ref v) = self.callback_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.accounting_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.amount != 0 {
            os.write_uint64(1, self.amount)?;
        }
        if self.mana != 0 {
            os.write_uint32(2, self.mana)?;
        }
        if !self.method_name.is_empty() {
            os.write_bytes(3, &self.method_name)?;
        }
        if !self.args.is_empty() {
            os.write_bytes(4, &self.args)?;
        }
        if let Some(ref v) = self.callback_info.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.accounting_info.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AsyncCallReceipt {
        AsyncCallReceipt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "amount",
                    |m: &AsyncCallReceipt| { &m.amount },
                    |m: &mut AsyncCallReceipt| { &mut m.amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "mana",
                    |m: &AsyncCallReceipt| { &m.mana },
                    |m: &mut AsyncCallReceipt| { &mut m.mana },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "method_name",
                    |m: &AsyncCallReceipt| { &m.method_name },
                    |m: &mut AsyncCallReceipt| { &mut m.method_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "args",
                    |m: &AsyncCallReceipt| { &m.args },
                    |m: &mut AsyncCallReceipt| { &mut m.args },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CallbackInfo>>(
                    "callback_info",
                    |m: &AsyncCallReceipt| { &m.callback_info },
                    |m: &mut AsyncCallReceipt| { &mut m.callback_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccountingInfo>>(
                    "accounting_info",
                    |m: &AsyncCallReceipt| { &m.accounting_info },
                    |m: &mut AsyncCallReceipt| { &mut m.accounting_info },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AsyncCallReceipt>(
                    "AsyncCallReceipt",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AsyncCallReceipt {
        static mut instance: ::protobuf::lazy::Lazy<AsyncCallReceipt> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AsyncCallReceipt,
        };
        unsafe {
            instance.get(AsyncCallReceipt::new)
        }
    }
}

impl ::protobuf::Clear for AsyncCallReceipt {
    fn clear(&mut self) {
        self.clear_amount();
        self.clear_mana();
        self.clear_method_name();
        self.clear_args();
        self.clear_callback_info();
        self.clear_accounting_info();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AsyncCallReceipt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AsyncCallReceipt {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CallbackResultReceipt {
    // message fields
    pub info: ::protobuf::SingularPtrField<CallbackInfo>,
    pub result: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CallbackResultReceipt {
    pub fn new() -> CallbackResultReceipt {
        ::std::default::Default::default()
    }

    // .CallbackInfo info = 1;

    pub fn clear_info(&mut self) {
        self.info.clear();
    }

    pub fn has_info(&self) -> bool {
        self.info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_info(&mut self, v: CallbackInfo) {
        self.info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_info(&mut self) -> &mut CallbackInfo {
        if self.info.is_none() {
            self.info.set_default();
        }
        self.info.as_mut().unwrap()
    }

    // Take field
    pub fn take_info(&mut self) -> CallbackInfo {
        self.info.take().unwrap_or_else(|| CallbackInfo::new())
    }

    pub fn get_info(&self) -> &CallbackInfo {
        self.info.as_ref().unwrap_or_else(|| CallbackInfo::default_instance())
    }

    // bytes result = 2;

    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ::std::vec::Vec<u8>) {
        self.result = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.result
    }

    // Take field
    pub fn take_result(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.result, ::std::vec::Vec::new())
    }

    pub fn get_result(&self) -> &[u8] {
        &self.result
    }
}

impl ::protobuf::Message for CallbackResultReceipt {
    fn is_initialized(&self) -> bool {
        for v in &self.info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.info)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.result.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.result);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.result.is_empty() {
            os.write_bytes(2, &self.result)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CallbackResultReceipt {
        CallbackResultReceipt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CallbackInfo>>(
                    "info",
                    |m: &CallbackResultReceipt| { &m.info },
                    |m: &mut CallbackResultReceipt| { &mut m.info },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "result",
                    |m: &CallbackResultReceipt| { &m.result },
                    |m: &mut CallbackResultReceipt| { &mut m.result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CallbackResultReceipt>(
                    "CallbackResultReceipt",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CallbackResultReceipt {
        static mut instance: ::protobuf::lazy::Lazy<CallbackResultReceipt> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CallbackResultReceipt,
        };
        unsafe {
            instance.get(CallbackResultReceipt::new)
        }
    }
}

impl ::protobuf::Clear for CallbackResultReceipt {
    fn clear(&mut self) {
        self.clear_info();
        self.clear_result();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CallbackResultReceipt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CallbackResultReceipt {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RefundReceipt {
    // message fields
    pub amount: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl RefundReceipt {
    pub fn new() -> RefundReceipt {
        ::std::default::Default::default()
    }

    // uint64 amount = 1;

    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = v;
    }

    pub fn get_amount(&self) -> u64 {
        self.amount
    }
}

impl ::protobuf::Message for RefundReceipt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(1, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.amount != 0 {
            os.write_uint64(1, self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RefundReceipt {
        RefundReceipt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "amount",
                    |m: &RefundReceipt| { &m.amount },
                    |m: &mut RefundReceipt| { &mut m.amount },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RefundReceipt>(
                    "RefundReceipt",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RefundReceipt {
        static mut instance: ::protobuf::lazy::Lazy<RefundReceipt> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RefundReceipt,
        };
        unsafe {
            instance.get(RefundReceipt::new)
        }
    }
}

impl ::protobuf::Clear for RefundReceipt {
    fn clear(&mut self) {
        self.clear_amount();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RefundReceipt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RefundReceipt {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ManaAccountingReceipt {
    // message fields
    pub accounting_info: ::protobuf::SingularPtrField<AccountingInfo>,
    pub mana_refund: u32,
    pub gas_used: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ManaAccountingReceipt {
    pub fn new() -> ManaAccountingReceipt {
        ::std::default::Default::default()
    }

    // .AccountingInfo accounting_info = 1;

    pub fn clear_accounting_info(&mut self) {
        self.accounting_info.clear();
    }

    pub fn has_accounting_info(&self) -> bool {
        self.accounting_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accounting_info(&mut self, v: AccountingInfo) {
        self.accounting_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accounting_info(&mut self) -> &mut AccountingInfo {
        if self.accounting_info.is_none() {
            self.accounting_info.set_default();
        }
        self.accounting_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_accounting_info(&mut self) -> AccountingInfo {
        self.accounting_info.take().unwrap_or_else(|| AccountingInfo::new())
    }

    pub fn get_accounting_info(&self) -> &AccountingInfo {
        self.accounting_info.as_ref().unwrap_or_else(|| AccountingInfo::default_instance())
    }

    // uint32 mana_refund = 2;

    pub fn clear_mana_refund(&mut self) {
        self.mana_refund = 0;
    }

    // Param is passed by value, moved
    pub fn set_mana_refund(&mut self, v: u32) {
        self.mana_refund = v;
    }

    pub fn get_mana_refund(&self) -> u32 {
        self.mana_refund
    }

    // uint64 gas_used = 3;

    pub fn clear_gas_used(&mut self) {
        self.gas_used = 0;
    }

    // Param is passed by value, moved
    pub fn set_gas_used(&mut self, v: u64) {
        self.gas_used = v;
    }

    pub fn get_gas_used(&self) -> u64 {
        self.gas_used
    }
}

impl ::protobuf::Message for ManaAccountingReceipt {
    fn is_initialized(&self) -> bool {
        for v in &self.accounting_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.accounting_info)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.mana_refund = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gas_used = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.accounting_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.mana_refund != 0 {
            my_size += ::protobuf::rt::value_size(2, self.mana_refund, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gas_used != 0 {
            my_size += ::protobuf::rt::value_size(3, self.gas_used, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.accounting_info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.mana_refund != 0 {
            os.write_uint32(2, self.mana_refund)?;
        }
        if self.gas_used != 0 {
            os.write_uint64(3, self.gas_used)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ManaAccountingReceipt {
        ManaAccountingReceipt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccountingInfo>>(
                    "accounting_info",
                    |m: &ManaAccountingReceipt| { &m.accounting_info },
                    |m: &mut ManaAccountingReceipt| { &mut m.accounting_info },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "mana_refund",
                    |m: &ManaAccountingReceipt| { &m.mana_refund },
                    |m: &mut ManaAccountingReceipt| { &mut m.mana_refund },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "gas_used",
                    |m: &ManaAccountingReceipt| { &m.gas_used },
                    |m: &mut ManaAccountingReceipt| { &mut m.gas_used },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ManaAccountingReceipt>(
                    "ManaAccountingReceipt",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ManaAccountingReceipt {
        static mut instance: ::protobuf::lazy::Lazy<ManaAccountingReceipt> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ManaAccountingReceipt,
        };
        unsafe {
            instance.get(ManaAccountingReceipt::new)
        }
    }
}

impl ::protobuf::Clear for ManaAccountingReceipt {
    fn clear(&mut self) {
        self.clear_accounting_info();
        self.clear_mana_refund();
        self.clear_gas_used();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ManaAccountingReceipt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ManaAccountingReceipt {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Receipt {
    // message fields
    pub originator: ::std::string::String,
    pub receiver: ::std::string::String,
    pub nonce: ::std::vec::Vec<u8>,
    // message oneof groups
    pub body: ::std::option::Option<Receipt_oneof_body>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum Receipt_oneof_body {
    async_call(AsyncCallReceipt),
    callback_result(CallbackResultReceipt),
    refund(RefundReceipt),
    mana_accounting(ManaAccountingReceipt),
}

impl Receipt {
    pub fn new() -> Receipt {
        ::std::default::Default::default()
    }

    // string originator = 1;

    pub fn clear_originator(&mut self) {
        self.originator.clear();
    }

    // Param is passed by value, moved
    pub fn set_originator(&mut self, v: ::std::string::String) {
        self.originator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_originator(&mut self) -> &mut ::std::string::String {
        &mut self.originator
    }

    // Take field
    pub fn take_originator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.originator, ::std::string::String::new())
    }

    pub fn get_originator(&self) -> &str {
        &self.originator
    }

    // string receiver = 2;

    pub fn clear_receiver(&mut self) {
        self.receiver.clear();
    }

    // Param is passed by value, moved
    pub fn set_receiver(&mut self, v: ::std::string::String) {
        self.receiver = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receiver(&mut self) -> &mut ::std::string::String {
        &mut self.receiver
    }

    // Take field
    pub fn take_receiver(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.receiver, ::std::string::String::new())
    }

    pub fn get_receiver(&self) -> &str {
        &self.receiver
    }

    // bytes nonce = 3;

    pub fn clear_nonce(&mut self) {
        self.nonce.clear();
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: ::std::vec::Vec<u8>) {
        self.nonce = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nonce(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.nonce
    }

    // Take field
    pub fn take_nonce(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.nonce, ::std::vec::Vec::new())
    }

    pub fn get_nonce(&self) -> &[u8] {
        &self.nonce
    }

    // .AsyncCallReceipt async_call = 4;

    pub fn clear_async_call(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_async_call(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(Receipt_oneof_body::async_call(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_async_call(&mut self, v: AsyncCallReceipt) {
        self.body = ::std::option::Option::Some(Receipt_oneof_body::async_call(v))
    }

    // Mutable pointer to the field.
    pub fn mut_async_call(&mut self) -> &mut AsyncCallReceipt {
        if let ::std::option::Option::Some(Receipt_oneof_body::async_call(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(Receipt_oneof_body::async_call(AsyncCallReceipt::new()));
        }
        match self.body {
            ::std::option::Option::Some(Receipt_oneof_body::async_call(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_async_call(&mut self) -> AsyncCallReceipt {
        if self.has_async_call() {
            match self.body.take() {
                ::std::option::Option::Some(Receipt_oneof_body::async_call(v)) => v,
                _ => panic!(),
            }
        } else {
            AsyncCallReceipt::new()
        }
    }

    pub fn get_async_call(&self) -> &AsyncCallReceipt {
        match self.body {
            ::std::option::Option::Some(Receipt_oneof_body::async_call(ref v)) => v,
            _ => AsyncCallReceipt::default_instance(),
        }
    }

    // .CallbackResultReceipt callback_result = 5;

    pub fn clear_callback_result(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_callback_result(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(Receipt_oneof_body::callback_result(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_callback_result(&mut self, v: CallbackResultReceipt) {
        self.body = ::std::option::Option::Some(Receipt_oneof_body::callback_result(v))
    }

    // Mutable pointer to the field.
    pub fn mut_callback_result(&mut self) -> &mut CallbackResultReceipt {
        if let ::std::option::Option::Some(Receipt_oneof_body::callback_result(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(Receipt_oneof_body::callback_result(CallbackResultReceipt::new()));
        }
        match self.body {
            ::std::option::Option::Some(Receipt_oneof_body::callback_result(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_callback_result(&mut self) -> CallbackResultReceipt {
        if self.has_callback_result() {
            match self.body.take() {
                ::std::option::Option::Some(Receipt_oneof_body::callback_result(v)) => v,
                _ => panic!(),
            }
        } else {
            CallbackResultReceipt::new()
        }
    }

    pub fn get_callback_result(&self) -> &CallbackResultReceipt {
        match self.body {
            ::std::option::Option::Some(Receipt_oneof_body::callback_result(ref v)) => v,
            _ => CallbackResultReceipt::default_instance(),
        }
    }

    // .RefundReceipt refund = 6;

    pub fn clear_refund(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_refund(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(Receipt_oneof_body::refund(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_refund(&mut self, v: RefundReceipt) {
        self.body = ::std::option::Option::Some(Receipt_oneof_body::refund(v))
    }

    // Mutable pointer to the field.
    pub fn mut_refund(&mut self) -> &mut RefundReceipt {
        if let ::std::option::Option::Some(Receipt_oneof_body::refund(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(Receipt_oneof_body::refund(RefundReceipt::new()));
        }
        match self.body {
            ::std::option::Option::Some(Receipt_oneof_body::refund(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_refund(&mut self) -> RefundReceipt {
        if self.has_refund() {
            match self.body.take() {
                ::std::option::Option::Some(Receipt_oneof_body::refund(v)) => v,
                _ => panic!(),
            }
        } else {
            RefundReceipt::new()
        }
    }

    pub fn get_refund(&self) -> &RefundReceipt {
        match self.body {
            ::std::option::Option::Some(Receipt_oneof_body::refund(ref v)) => v,
            _ => RefundReceipt::default_instance(),
        }
    }

    // .ManaAccountingReceipt mana_accounting = 7;

    pub fn clear_mana_accounting(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_mana_accounting(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(Receipt_oneof_body::mana_accounting(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_mana_accounting(&mut self, v: ManaAccountingReceipt) {
        self.body = ::std::option::Option::Some(Receipt_oneof_body::mana_accounting(v))
    }

    // Mutable pointer to the field.
    pub fn mut_mana_accounting(&mut self) -> &mut ManaAccountingReceipt {
        if let ::std::option::Option::Some(Receipt_oneof_body::mana_accounting(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(Receipt_oneof_body::mana_accounting(ManaAccountingReceipt::new()));
        }
        match self.body {
            ::std::option::Option::Some(Receipt_oneof_body::mana_accounting(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_mana_accounting(&mut self) -> ManaAccountingReceipt {
        if self.has_mana_accounting() {
            match self.body.take() {
                ::std::option::Option::Some(Receipt_oneof_body::mana_accounting(v)) => v,
                _ => panic!(),
            }
        } else {
            ManaAccountingReceipt::new()
        }
    }

    pub fn get_mana_accounting(&self) -> &ManaAccountingReceipt {
        match self.body {
            ::std::option::Option::Some(Receipt_oneof_body::mana_accounting(ref v)) => v,
            _ => ManaAccountingReceipt::default_instance(),
        }
    }
}

impl ::protobuf::Message for Receipt {
    fn is_initialized(&self) -> bool {
        if let Some(Receipt_oneof_body::async_call(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Receipt_oneof_body::callback_result(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Receipt_oneof_body::refund(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Receipt_oneof_body::mana_accounting(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.originator)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.receiver)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.nonce)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(Receipt_oneof_body::async_call(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(Receipt_oneof_body::callback_result(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(Receipt_oneof_body::refund(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(Receipt_oneof_body::mana_accounting(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.originator.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.originator);
        }
        if !self.receiver.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.receiver);
        }
        if !self.nonce.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.nonce);
        }
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &Receipt_oneof_body::async_call(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Receipt_oneof_body::callback_result(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Receipt_oneof_body::refund(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Receipt_oneof_body::mana_accounting(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.originator.is_empty() {
            os.write_string(1, &self.originator)?;
        }
        if !self.receiver.is_empty() {
            os.write_string(2, &self.receiver)?;
        }
        if !self.nonce.is_empty() {
            os.write_bytes(3, &self.nonce)?;
        }
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &Receipt_oneof_body::async_call(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Receipt_oneof_body::callback_result(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Receipt_oneof_body::refund(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Receipt_oneof_body::mana_accounting(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Receipt {
        Receipt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "originator",
                    |m: &Receipt| { &m.originator },
                    |m: &mut Receipt| { &mut m.originator },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "receiver",
                    |m: &Receipt| { &m.receiver },
                    |m: &mut Receipt| { &mut m.receiver },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "nonce",
                    |m: &Receipt| { &m.nonce },
                    |m: &mut Receipt| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AsyncCallReceipt>(
                    "async_call",
                    Receipt::has_async_call,
                    Receipt::get_async_call,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CallbackResultReceipt>(
                    "callback_result",
                    Receipt::has_callback_result,
                    Receipt::get_callback_result,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, RefundReceipt>(
                    "refund",
                    Receipt::has_refund,
                    Receipt::get_refund,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ManaAccountingReceipt>(
                    "mana_accounting",
                    Receipt::has_mana_accounting,
                    Receipt::get_mana_accounting,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Receipt>(
                    "Receipt",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Receipt {
        static mut instance: ::protobuf::lazy::Lazy<Receipt> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Receipt,
        };
        unsafe {
            instance.get(Receipt::new)
        }
    }
}

impl ::protobuf::Clear for Receipt {
    fn clear(&mut self) {
        self.clear_originator();
        self.clear_receiver();
        self.clear_nonce();
        self.clear_async_call();
        self.clear_callback_result();
        self.clear_refund();
        self.clear_mana_accounting();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Receipt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Receipt {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Transaction {
    // message oneof groups
    pub body: ::std::option::Option<Transaction_oneof_body>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum Transaction_oneof_body {
    signed_transaction(SignedTransaction),
    receipt(Receipt),
}

impl Transaction {
    pub fn new() -> Transaction {
        ::std::default::Default::default()
    }

    // .SignedTransaction signed_transaction = 1;

    pub fn clear_signed_transaction(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_signed_transaction(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(Transaction_oneof_body::signed_transaction(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_signed_transaction(&mut self, v: SignedTransaction) {
        self.body = ::std::option::Option::Some(Transaction_oneof_body::signed_transaction(v))
    }

    // Mutable pointer to the field.
    pub fn mut_signed_transaction(&mut self) -> &mut SignedTransaction {
        if let ::std::option::Option::Some(Transaction_oneof_body::signed_transaction(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(Transaction_oneof_body::signed_transaction(SignedTransaction::new()));
        }
        match self.body {
            ::std::option::Option::Some(Transaction_oneof_body::signed_transaction(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_signed_transaction(&mut self) -> SignedTransaction {
        if self.has_signed_transaction() {
            match self.body.take() {
                ::std::option::Option::Some(Transaction_oneof_body::signed_transaction(v)) => v,
                _ => panic!(),
            }
        } else {
            SignedTransaction::new()
        }
    }

    pub fn get_signed_transaction(&self) -> &SignedTransaction {
        match self.body {
            ::std::option::Option::Some(Transaction_oneof_body::signed_transaction(ref v)) => v,
            _ => SignedTransaction::default_instance(),
        }
    }

    // .Receipt receipt = 2;

    pub fn clear_receipt(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_receipt(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(Transaction_oneof_body::receipt(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_receipt(&mut self, v: Receipt) {
        self.body = ::std::option::Option::Some(Transaction_oneof_body::receipt(v))
    }

    // Mutable pointer to the field.
    pub fn mut_receipt(&mut self) -> &mut Receipt {
        if let ::std::option::Option::Some(Transaction_oneof_body::receipt(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(Transaction_oneof_body::receipt(Receipt::new()));
        }
        match self.body {
            ::std::option::Option::Some(Transaction_oneof_body::receipt(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_receipt(&mut self) -> Receipt {
        if self.has_receipt() {
            match self.body.take() {
                ::std::option::Option::Some(Transaction_oneof_body::receipt(v)) => v,
                _ => panic!(),
            }
        } else {
            Receipt::new()
        }
    }

    pub fn get_receipt(&self) -> &Receipt {
        match self.body {
            ::std::option::Option::Some(Transaction_oneof_body::receipt(ref v)) => v,
            _ => Receipt::default_instance(),
        }
    }
}

impl ::protobuf::Message for Transaction {
    fn is_initialized(&self) -> bool {
        if let Some(Transaction_oneof_body::signed_transaction(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Transaction_oneof_body::receipt(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(Transaction_oneof_body::signed_transaction(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(Transaction_oneof_body::receipt(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &Transaction_oneof_body::signed_transaction(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Transaction_oneof_body::receipt(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &Transaction_oneof_body::signed_transaction(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Transaction_oneof_body::receipt(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Transaction {
        Transaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SignedTransaction>(
                    "signed_transaction",
                    Transaction::has_signed_transaction,
                    Transaction::get_signed_transaction,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Receipt>(
                    "receipt",
                    Transaction::has_receipt,
                    Transaction::get_receipt,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Transaction>(
                    "Transaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Transaction {
        static mut instance: ::protobuf::lazy::Lazy<Transaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Transaction,
        };
        unsafe {
            instance.get(Transaction::new)
        }
    }
}

impl ::protobuf::Clear for Transaction {
    fn clear(&mut self) {
        self.clear_signed_transaction();
        self.clear_receipt();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Transaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChainPayload {
    // message fields
    pub transactions: ::protobuf::RepeatedField<Transaction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ChainPayload {
    pub fn new() -> ChainPayload {
        ::std::default::Default::default()
    }

    // repeated .Transaction transactions = 1;

    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<Transaction>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<Transaction> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<Transaction> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }

    pub fn get_transactions(&self) -> &[Transaction] {
        &self.transactions
    }
}

impl ::protobuf::Message for ChainPayload {
    fn is_initialized(&self) -> bool {
        for v in &self.transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transactions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.transactions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChainPayload {
        ChainPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Transaction>>(
                    "transactions",
                    |m: &ChainPayload| { &m.transactions },
                    |m: &mut ChainPayload| { &mut m.transactions },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ChainPayload>(
                    "ChainPayload",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ChainPayload {
        static mut instance: ::protobuf::lazy::Lazy<ChainPayload> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ChainPayload,
        };
        unsafe {
            instance.get(ChainPayload::new)
        }
    }
}

impl ::protobuf::Clear for ChainPayload {
    fn clear(&mut self) {
        self.clear_transactions();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChainPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChainPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18protos/transaction.proto\"\xad\x01\n\x18CreateAccountTransaction\
    \x12\x14\n\x05nonce\x18\x01\x20\x01(\x04R\x05nonce\x12\x1e\n\noriginator\
    \x18\x02\x20\x01(\tR\noriginator\x12$\n\x0enew_account_id\x18\x03\x20\
    \x01(\tR\x0cnewAccountId\x12\x16\n\x06amount\x18\x04\x20\x01(\x04R\x06am\
    ount\x12\x1d\n\npublic_key\x18\x05\x20\x01(\x0cR\tpublicKey\"\xb9\x01\n\
    \x19DeployContractTransaction\x12\x14\n\x05nonce\x18\x01\x20\x01(\x04R\
    \x05nonce\x12\x1e\n\noriginator\x18\x02\x20\x01(\tR\noriginator\x12\x1f\
    \n\x0bcontract_id\x18\x03\x20\x01(\tR\ncontractId\x12&\n\x0fwasm_byte_ar\
    ray\x18\x04\x20\x01(\x0cR\rwasmByteArray\x12\x1d\n\npublic_key\x18\x05\
    \x20\x01(\x0cR\tpublicKey\"\xbd\x01\n\x17FunctionCallTransaction\x12\x14\
    \n\x05nonce\x18\x01\x20\x01(\x04R\x05nonce\x12\x1e\n\noriginator\x18\x02\
    \x20\x01(\tR\noriginator\x12\x1f\n\x0bcontract_id\x18\x03\x20\x01(\tR\nc\
    ontractId\x12\x1f\n\x0bmethod_name\x18\x04\x20\x01(\x0cR\nmethodName\x12\
    \x12\n\x04args\x18\x05\x20\x01(\x0cR\x04args\x12\x16\n\x06amount\x18\x06\
    \x20\x01(\x04R\x06amount\"\x80\x01\n\x14SendMoneyTransaction\x12\x14\n\
    \x05nonce\x18\x01\x20\x01(\x04R\x05nonce\x12\x1e\n\noriginator\x18\x02\
    \x20\x01(\tR\noriginator\x12\x1a\n\x08receiver\x18\x03\x20\x01(\tR\x08re\
    ceiver\x12\x16\n\x06amount\x18\x04\x20\x01(\x04R\x06amount\"`\n\x10Stake\
    Transaction\x12\x14\n\x05nonce\x18\x01\x20\x01(\x04R\x05nonce\x12\x1e\n\
    \noriginator\x18\x02\x20\x01(\tR\noriginator\x12\x16\n\x06amount\x18\x03\
    \x20\x01(\x04R\x06amount\"|\n\x12SwapKeyTransaction\x12\x14\n\x05nonce\
    \x18\x01\x20\x01(\x04R\x05nonce\x12\x1e\n\noriginator\x18\x02\x20\x01(\t\
    R\noriginator\x12\x17\n\x07cur_key\x18\x03\x20\x01(\x0cR\x06curKey\x12\
    \x17\n\x07new_key\x18\x04\x20\x01(\x0cR\x06newKey\"\x9a\x03\n\x11SignedT\
    ransaction\x12\x1c\n\tsignature\x18\x01\x20\x01(\x0cR\tsignature\x12B\n\
    \x0ecreate_account\x18\x02\x20\x01(\x0b2\x19.CreateAccountTransactionH\0\
    R\rcreateAccount\x12E\n\x0fdeploy_contract\x18\x03\x20\x01(\x0b2\x1a.Dep\
    loyContractTransactionH\0R\x0edeployContract\x12?\n\rfunction_call\x18\
    \x04\x20\x01(\x0b2\x18.FunctionCallTransactionH\0R\x0cfunctionCall\x126\
    \n\nsend_money\x18\x05\x20\x01(\x0b2\x15.SendMoneyTransactionH\0R\tsendM\
    oney\x12)\n\x05stake\x18\x06\x20\x01(\x0b2\x11.StakeTransactionH\0R\x05s\
    take\x120\n\x08swap_key\x18\x07\x20\x01(\x0b2\x13.SwapKeyTransactionH\0R\
    \x07swapKeyB\x06\n\x04body\"]\n\x0cCallbackInfo\x12\x0e\n\x02id\x18\x01\
    \x20\x01(\x0cR\x02id\x12!\n\x0cresult_index\x18\x02\x20\x01(\x04R\x0bres\
    ultIndex\x12\x1a\n\x08receiver\x18\x03\x20\x01(\tR\x08receiver\"Q\n\x0eA\
    ccountingInfo\x12\x1e\n\noriginator\x18\x01\x20\x01(\tR\noriginator\x12\
    \x1f\n\x0bcontract_id\x18\x02\x20\x01(\tR\ncontractId\"\xe1\x01\n\x10Asy\
    ncCallReceipt\x12\x16\n\x06amount\x18\x01\x20\x01(\x04R\x06amount\x12\
    \x12\n\x04mana\x18\x02\x20\x01(\rR\x04mana\x12\x1f\n\x0bmethod_name\x18\
    \x03\x20\x01(\x0cR\nmethodName\x12\x12\n\x04args\x18\x04\x20\x01(\x0cR\
    \x04args\x122\n\rcallback_info\x18\x05\x20\x01(\x0b2\r.CallbackInfoR\x0c\
    callbackInfo\x128\n\x0faccounting_info\x18\x06\x20\x01(\x0b2\x0f.Account\
    ingInfoR\x0eaccountingInfo\"R\n\x15CallbackResultReceipt\x12!\n\x04info\
    \x18\x01\x20\x01(\x0b2\r.CallbackInfoR\x04info\x12\x16\n\x06result\x18\
    \x02\x20\x01(\x0cR\x06result\"'\n\rRefundReceipt\x12\x16\n\x06amount\x18\
    \x01\x20\x01(\x04R\x06amount\"\x8d\x01\n\x15ManaAccountingReceipt\x128\n\
    \x0faccounting_info\x18\x01\x20\x01(\x0b2\x0f.AccountingInfoR\x0eaccount\
    ingInfo\x12\x1f\n\x0bmana_refund\x18\x02\x20\x01(\rR\nmanaRefund\x12\x19\
    \n\x08gas_used\x18\x03\x20\x01(\x04R\x07gasUsed\"\xc7\x02\n\x07Receipt\
    \x12\x1e\n\noriginator\x18\x01\x20\x01(\tR\noriginator\x12\x1a\n\x08rece\
    iver\x18\x02\x20\x01(\tR\x08receiver\x12\x14\n\x05nonce\x18\x03\x20\x01(\
    \x0cR\x05nonce\x122\n\nasync_call\x18\x04\x20\x01(\x0b2\x11.AsyncCallRec\
    eiptH\0R\tasyncCall\x12A\n\x0fcallback_result\x18\x05\x20\x01(\x0b2\x16.\
    CallbackResultReceiptH\0R\x0ecallbackResult\x12(\n\x06refund\x18\x06\x20\
    \x01(\x0b2\x0e.RefundReceiptH\0R\x06refund\x12A\n\x0fmana_accounting\x18\
    \x07\x20\x01(\x0b2\x16.ManaAccountingReceiptH\0R\x0emanaAccountingB\x06\
    \n\x04body\"\x80\x01\n\x0bTransaction\x12C\n\x12signed_transaction\x18\
    \x01\x20\x01(\x0b2\x12.SignedTransactionH\0R\x11signedTransaction\x12$\n\
    \x07receipt\x18\x02\x20\x01(\x0b2\x08.ReceiptH\0R\x07receiptB\x06\n\x04b\
    ody\"@\n\x0cChainPayload\x120\n\x0ctransactions\x18\x01\x20\x03(\x0b2\
    \x0c.TransactionR\x0ctransactionsb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
