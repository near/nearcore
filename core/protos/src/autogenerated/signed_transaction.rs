// This file is generated by rust-protobuf 2.3.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct CreateAccountTransaction {
    // message fields
    pub nonce: u64,
    pub originator: ::std::string::String,
    pub new_account_id: ::std::string::String,
    pub amount: u64,
    pub public_key: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CreateAccountTransaction {
    pub fn new() -> CreateAccountTransaction {
        ::std::default::Default::default()
    }

    // uint64 nonce = 1;

    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }

    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }

    // string originator = 2;

    pub fn clear_originator(&mut self) {
        self.originator.clear();
    }

    // Param is passed by value, moved
    pub fn set_originator(&mut self, v: ::std::string::String) {
        self.originator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_originator(&mut self) -> &mut ::std::string::String {
        &mut self.originator
    }

    // Take field
    pub fn take_originator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.originator, ::std::string::String::new())
    }

    pub fn get_originator(&self) -> &str {
        &self.originator
    }

    // string new_account_id = 3;

    pub fn clear_new_account_id(&mut self) {
        self.new_account_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_new_account_id(&mut self, v: ::std::string::String) {
        self.new_account_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_account_id(&mut self) -> &mut ::std::string::String {
        &mut self.new_account_id
    }

    // Take field
    pub fn take_new_account_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.new_account_id, ::std::string::String::new())
    }

    pub fn get_new_account_id(&self) -> &str {
        &self.new_account_id
    }

    // uint64 amount = 4;

    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = v;
    }

    pub fn get_amount(&self) -> u64 {
        self.amount
    }

    // bytes public_key = 5;

    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.public_key
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.public_key, ::std::vec::Vec::new())
    }

    pub fn get_public_key(&self) -> &[u8] {
        &self.public_key
    }
}

impl ::protobuf::Message for CreateAccountTransaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.originator)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.new_account_id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.public_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.originator.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.originator);
        }
        if !self.new_account_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.new_account_id);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(4, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.public_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.public_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.nonce != 0 {
            os.write_uint64(1, self.nonce)?;
        }
        if !self.originator.is_empty() {
            os.write_string(2, &self.originator)?;
        }
        if !self.new_account_id.is_empty() {
            os.write_string(3, &self.new_account_id)?;
        }
        if self.amount != 0 {
            os.write_uint64(4, self.amount)?;
        }
        if !self.public_key.is_empty() {
            os.write_bytes(5, &self.public_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateAccountTransaction {
        CreateAccountTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "nonce",
                    |m: &CreateAccountTransaction| { &m.nonce },
                    |m: &mut CreateAccountTransaction| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "originator",
                    |m: &CreateAccountTransaction| { &m.originator },
                    |m: &mut CreateAccountTransaction| { &mut m.originator },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "new_account_id",
                    |m: &CreateAccountTransaction| { &m.new_account_id },
                    |m: &mut CreateAccountTransaction| { &mut m.new_account_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "amount",
                    |m: &CreateAccountTransaction| { &m.amount },
                    |m: &mut CreateAccountTransaction| { &mut m.amount },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "public_key",
                    |m: &CreateAccountTransaction| { &m.public_key },
                    |m: &mut CreateAccountTransaction| { &mut m.public_key },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateAccountTransaction>(
                    "CreateAccountTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateAccountTransaction {
        static mut instance: ::protobuf::lazy::Lazy<CreateAccountTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateAccountTransaction,
        };
        unsafe {
            instance.get(CreateAccountTransaction::new)
        }
    }
}

impl ::protobuf::Clear for CreateAccountTransaction {
    fn clear(&mut self) {
        self.clear_nonce();
        self.clear_originator();
        self.clear_new_account_id();
        self.clear_amount();
        self.clear_public_key();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateAccountTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateAccountTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeployContractTransaction {
    // message fields
    pub nonce: u64,
    pub contract_id: ::std::string::String,
    pub wasm_byte_array: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl DeployContractTransaction {
    pub fn new() -> DeployContractTransaction {
        ::std::default::Default::default()
    }

    // uint64 nonce = 1;

    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }

    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }

    // string contract_id = 2;

    pub fn clear_contract_id(&mut self) {
        self.contract_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_id(&mut self, v: ::std::string::String) {
        self.contract_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_id(&mut self) -> &mut ::std::string::String {
        &mut self.contract_id
    }

    // Take field
    pub fn take_contract_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract_id, ::std::string::String::new())
    }

    pub fn get_contract_id(&self) -> &str {
        &self.contract_id
    }

    // bytes wasm_byte_array = 3;

    pub fn clear_wasm_byte_array(&mut self) {
        self.wasm_byte_array.clear();
    }

    // Param is passed by value, moved
    pub fn set_wasm_byte_array(&mut self, v: ::std::vec::Vec<u8>) {
        self.wasm_byte_array = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_wasm_byte_array(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.wasm_byte_array
    }

    // Take field
    pub fn take_wasm_byte_array(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.wasm_byte_array, ::std::vec::Vec::new())
    }

    pub fn get_wasm_byte_array(&self) -> &[u8] {
        &self.wasm_byte_array
    }
}

impl ::protobuf::Message for DeployContractTransaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.wasm_byte_array)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.contract_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.contract_id);
        }
        if !self.wasm_byte_array.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.wasm_byte_array);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.nonce != 0 {
            os.write_uint64(1, self.nonce)?;
        }
        if !self.contract_id.is_empty() {
            os.write_string(2, &self.contract_id)?;
        }
        if !self.wasm_byte_array.is_empty() {
            os.write_bytes(3, &self.wasm_byte_array)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeployContractTransaction {
        DeployContractTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "nonce",
                    |m: &DeployContractTransaction| { &m.nonce },
                    |m: &mut DeployContractTransaction| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "contract_id",
                    |m: &DeployContractTransaction| { &m.contract_id },
                    |m: &mut DeployContractTransaction| { &mut m.contract_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "wasm_byte_array",
                    |m: &DeployContractTransaction| { &m.wasm_byte_array },
                    |m: &mut DeployContractTransaction| { &mut m.wasm_byte_array },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeployContractTransaction>(
                    "DeployContractTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeployContractTransaction {
        static mut instance: ::protobuf::lazy::Lazy<DeployContractTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeployContractTransaction,
        };
        unsafe {
            instance.get(DeployContractTransaction::new)
        }
    }
}

impl ::protobuf::Clear for DeployContractTransaction {
    fn clear(&mut self) {
        self.clear_nonce();
        self.clear_contract_id();
        self.clear_wasm_byte_array();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeployContractTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeployContractTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FunctionCallTransaction {
    // message fields
    pub nonce: u64,
    pub originator: ::std::string::String,
    pub contract_id: ::std::string::String,
    pub method_name: ::std::vec::Vec<u8>,
    pub args: ::std::vec::Vec<u8>,
    pub amount: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl FunctionCallTransaction {
    pub fn new() -> FunctionCallTransaction {
        ::std::default::Default::default()
    }

    // uint64 nonce = 1;

    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }

    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }

    // string originator = 2;

    pub fn clear_originator(&mut self) {
        self.originator.clear();
    }

    // Param is passed by value, moved
    pub fn set_originator(&mut self, v: ::std::string::String) {
        self.originator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_originator(&mut self) -> &mut ::std::string::String {
        &mut self.originator
    }

    // Take field
    pub fn take_originator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.originator, ::std::string::String::new())
    }

    pub fn get_originator(&self) -> &str {
        &self.originator
    }

    // string contract_id = 3;

    pub fn clear_contract_id(&mut self) {
        self.contract_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_id(&mut self, v: ::std::string::String) {
        self.contract_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_id(&mut self) -> &mut ::std::string::String {
        &mut self.contract_id
    }

    // Take field
    pub fn take_contract_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract_id, ::std::string::String::new())
    }

    pub fn get_contract_id(&self) -> &str {
        &self.contract_id
    }

    // bytes method_name = 4;

    pub fn clear_method_name(&mut self) {
        self.method_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_method_name(&mut self, v: ::std::vec::Vec<u8>) {
        self.method_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_method_name(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.method_name
    }

    // Take field
    pub fn take_method_name(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.method_name, ::std::vec::Vec::new())
    }

    pub fn get_method_name(&self) -> &[u8] {
        &self.method_name
    }

    // bytes args = 5;

    pub fn clear_args(&mut self) {
        self.args.clear();
    }

    // Param is passed by value, moved
    pub fn set_args(&mut self, v: ::std::vec::Vec<u8>) {
        self.args = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_args(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.args
    }

    // Take field
    pub fn take_args(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.args, ::std::vec::Vec::new())
    }

    pub fn get_args(&self) -> &[u8] {
        &self.args
    }

    // uint64 amount = 6;

    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = v;
    }

    pub fn get_amount(&self) -> u64 {
        self.amount
    }
}

impl ::protobuf::Message for FunctionCallTransaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.originator)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.method_name)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.args)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.originator.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.originator);
        }
        if !self.contract_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.contract_id);
        }
        if !self.method_name.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.method_name);
        }
        if !self.args.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.args);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(6, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.nonce != 0 {
            os.write_uint64(1, self.nonce)?;
        }
        if !self.originator.is_empty() {
            os.write_string(2, &self.originator)?;
        }
        if !self.contract_id.is_empty() {
            os.write_string(3, &self.contract_id)?;
        }
        if !self.method_name.is_empty() {
            os.write_bytes(4, &self.method_name)?;
        }
        if !self.args.is_empty() {
            os.write_bytes(5, &self.args)?;
        }
        if self.amount != 0 {
            os.write_uint64(6, self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FunctionCallTransaction {
        FunctionCallTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "nonce",
                    |m: &FunctionCallTransaction| { &m.nonce },
                    |m: &mut FunctionCallTransaction| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "originator",
                    |m: &FunctionCallTransaction| { &m.originator },
                    |m: &mut FunctionCallTransaction| { &mut m.originator },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "contract_id",
                    |m: &FunctionCallTransaction| { &m.contract_id },
                    |m: &mut FunctionCallTransaction| { &mut m.contract_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "method_name",
                    |m: &FunctionCallTransaction| { &m.method_name },
                    |m: &mut FunctionCallTransaction| { &mut m.method_name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "args",
                    |m: &FunctionCallTransaction| { &m.args },
                    |m: &mut FunctionCallTransaction| { &mut m.args },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "amount",
                    |m: &FunctionCallTransaction| { &m.amount },
                    |m: &mut FunctionCallTransaction| { &mut m.amount },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FunctionCallTransaction>(
                    "FunctionCallTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FunctionCallTransaction {
        static mut instance: ::protobuf::lazy::Lazy<FunctionCallTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FunctionCallTransaction,
        };
        unsafe {
            instance.get(FunctionCallTransaction::new)
        }
    }
}

impl ::protobuf::Clear for FunctionCallTransaction {
    fn clear(&mut self) {
        self.clear_nonce();
        self.clear_originator();
        self.clear_contract_id();
        self.clear_method_name();
        self.clear_args();
        self.clear_amount();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FunctionCallTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FunctionCallTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SendMoneyTransaction {
    // message fields
    pub nonce: u64,
    pub originator: ::std::string::String,
    pub receiver: ::std::string::String,
    pub amount: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl SendMoneyTransaction {
    pub fn new() -> SendMoneyTransaction {
        ::std::default::Default::default()
    }

    // uint64 nonce = 1;

    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }

    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }

    // string originator = 2;

    pub fn clear_originator(&mut self) {
        self.originator.clear();
    }

    // Param is passed by value, moved
    pub fn set_originator(&mut self, v: ::std::string::String) {
        self.originator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_originator(&mut self) -> &mut ::std::string::String {
        &mut self.originator
    }

    // Take field
    pub fn take_originator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.originator, ::std::string::String::new())
    }

    pub fn get_originator(&self) -> &str {
        &self.originator
    }

    // string receiver = 3;

    pub fn clear_receiver(&mut self) {
        self.receiver.clear();
    }

    // Param is passed by value, moved
    pub fn set_receiver(&mut self, v: ::std::string::String) {
        self.receiver = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receiver(&mut self) -> &mut ::std::string::String {
        &mut self.receiver
    }

    // Take field
    pub fn take_receiver(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.receiver, ::std::string::String::new())
    }

    pub fn get_receiver(&self) -> &str {
        &self.receiver
    }

    // uint64 amount = 4;

    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = v;
    }

    pub fn get_amount(&self) -> u64 {
        self.amount
    }
}

impl ::protobuf::Message for SendMoneyTransaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.originator)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.receiver)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.originator.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.originator);
        }
        if !self.receiver.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.receiver);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(4, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.nonce != 0 {
            os.write_uint64(1, self.nonce)?;
        }
        if !self.originator.is_empty() {
            os.write_string(2, &self.originator)?;
        }
        if !self.receiver.is_empty() {
            os.write_string(3, &self.receiver)?;
        }
        if self.amount != 0 {
            os.write_uint64(4, self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SendMoneyTransaction {
        SendMoneyTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "nonce",
                    |m: &SendMoneyTransaction| { &m.nonce },
                    |m: &mut SendMoneyTransaction| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "originator",
                    |m: &SendMoneyTransaction| { &m.originator },
                    |m: &mut SendMoneyTransaction| { &mut m.originator },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "receiver",
                    |m: &SendMoneyTransaction| { &m.receiver },
                    |m: &mut SendMoneyTransaction| { &mut m.receiver },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "amount",
                    |m: &SendMoneyTransaction| { &m.amount },
                    |m: &mut SendMoneyTransaction| { &mut m.amount },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SendMoneyTransaction>(
                    "SendMoneyTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SendMoneyTransaction {
        static mut instance: ::protobuf::lazy::Lazy<SendMoneyTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SendMoneyTransaction,
        };
        unsafe {
            instance.get(SendMoneyTransaction::new)
        }
    }
}

impl ::protobuf::Clear for SendMoneyTransaction {
    fn clear(&mut self) {
        self.clear_nonce();
        self.clear_originator();
        self.clear_receiver();
        self.clear_amount();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SendMoneyTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendMoneyTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StakeTransaction {
    // message fields
    pub nonce: u64,
    pub originator: ::std::string::String,
    pub amount: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl StakeTransaction {
    pub fn new() -> StakeTransaction {
        ::std::default::Default::default()
    }

    // uint64 nonce = 1;

    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }

    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }

    // string originator = 2;

    pub fn clear_originator(&mut self) {
        self.originator.clear();
    }

    // Param is passed by value, moved
    pub fn set_originator(&mut self, v: ::std::string::String) {
        self.originator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_originator(&mut self) -> &mut ::std::string::String {
        &mut self.originator
    }

    // Take field
    pub fn take_originator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.originator, ::std::string::String::new())
    }

    pub fn get_originator(&self) -> &str {
        &self.originator
    }

    // uint64 amount = 3;

    pub fn clear_amount(&mut self) {
        self.amount = 0;
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: u64) {
        self.amount = v;
    }

    pub fn get_amount(&self) -> u64 {
        self.amount
    }
}

impl ::protobuf::Message for StakeTransaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.originator)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.amount = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.originator.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.originator);
        }
        if self.amount != 0 {
            my_size += ::protobuf::rt::value_size(3, self.amount, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.nonce != 0 {
            os.write_uint64(1, self.nonce)?;
        }
        if !self.originator.is_empty() {
            os.write_string(2, &self.originator)?;
        }
        if self.amount != 0 {
            os.write_uint64(3, self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StakeTransaction {
        StakeTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "nonce",
                    |m: &StakeTransaction| { &m.nonce },
                    |m: &mut StakeTransaction| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "originator",
                    |m: &StakeTransaction| { &m.originator },
                    |m: &mut StakeTransaction| { &mut m.originator },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "amount",
                    |m: &StakeTransaction| { &m.amount },
                    |m: &mut StakeTransaction| { &mut m.amount },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StakeTransaction>(
                    "StakeTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StakeTransaction {
        static mut instance: ::protobuf::lazy::Lazy<StakeTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StakeTransaction,
        };
        unsafe {
            instance.get(StakeTransaction::new)
        }
    }
}

impl ::protobuf::Clear for StakeTransaction {
    fn clear(&mut self) {
        self.clear_nonce();
        self.clear_originator();
        self.clear_amount();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StakeTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StakeTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SwapKeyTransaction {
    // message fields
    pub nonce: u64,
    pub originator: ::std::string::String,
    pub cur_key: ::std::vec::Vec<u8>,
    pub new_key: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl SwapKeyTransaction {
    pub fn new() -> SwapKeyTransaction {
        ::std::default::Default::default()
    }

    // uint64 nonce = 1;

    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }

    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }

    // string originator = 2;

    pub fn clear_originator(&mut self) {
        self.originator.clear();
    }

    // Param is passed by value, moved
    pub fn set_originator(&mut self, v: ::std::string::String) {
        self.originator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_originator(&mut self) -> &mut ::std::string::String {
        &mut self.originator
    }

    // Take field
    pub fn take_originator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.originator, ::std::string::String::new())
    }

    pub fn get_originator(&self) -> &str {
        &self.originator
    }

    // bytes cur_key = 3;

    pub fn clear_cur_key(&mut self) {
        self.cur_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_cur_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.cur_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cur_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.cur_key
    }

    // Take field
    pub fn take_cur_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.cur_key, ::std::vec::Vec::new())
    }

    pub fn get_cur_key(&self) -> &[u8] {
        &self.cur_key
    }

    // bytes new_key = 4;

    pub fn clear_new_key(&mut self) {
        self.new_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_new_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.new_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.new_key
    }

    // Take field
    pub fn take_new_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.new_key, ::std::vec::Vec::new())
    }

    pub fn get_new_key(&self) -> &[u8] {
        &self.new_key
    }
}

impl ::protobuf::Message for SwapKeyTransaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.originator)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.cur_key)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.new_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.originator.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.originator);
        }
        if !self.cur_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.cur_key);
        }
        if !self.new_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.new_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.nonce != 0 {
            os.write_uint64(1, self.nonce)?;
        }
        if !self.originator.is_empty() {
            os.write_string(2, &self.originator)?;
        }
        if !self.cur_key.is_empty() {
            os.write_bytes(3, &self.cur_key)?;
        }
        if !self.new_key.is_empty() {
            os.write_bytes(4, &self.new_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SwapKeyTransaction {
        SwapKeyTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "nonce",
                    |m: &SwapKeyTransaction| { &m.nonce },
                    |m: &mut SwapKeyTransaction| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "originator",
                    |m: &SwapKeyTransaction| { &m.originator },
                    |m: &mut SwapKeyTransaction| { &mut m.originator },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "cur_key",
                    |m: &SwapKeyTransaction| { &m.cur_key },
                    |m: &mut SwapKeyTransaction| { &mut m.cur_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "new_key",
                    |m: &SwapKeyTransaction| { &m.new_key },
                    |m: &mut SwapKeyTransaction| { &mut m.new_key },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SwapKeyTransaction>(
                    "SwapKeyTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SwapKeyTransaction {
        static mut instance: ::protobuf::lazy::Lazy<SwapKeyTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SwapKeyTransaction,
        };
        unsafe {
            instance.get(SwapKeyTransaction::new)
        }
    }
}

impl ::protobuf::Clear for SwapKeyTransaction {
    fn clear(&mut self) {
        self.clear_nonce();
        self.clear_originator();
        self.clear_cur_key();
        self.clear_new_key();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SwapKeyTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SwapKeyTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddKeyTransaction {
    // message fields
    pub nonce: u64,
    pub originator: ::std::string::String,
    pub new_key: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AddKeyTransaction {
    pub fn new() -> AddKeyTransaction {
        ::std::default::Default::default()
    }

    // uint64 nonce = 1;

    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }

    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }

    // string originator = 2;

    pub fn clear_originator(&mut self) {
        self.originator.clear();
    }

    // Param is passed by value, moved
    pub fn set_originator(&mut self, v: ::std::string::String) {
        self.originator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_originator(&mut self) -> &mut ::std::string::String {
        &mut self.originator
    }

    // Take field
    pub fn take_originator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.originator, ::std::string::String::new())
    }

    pub fn get_originator(&self) -> &str {
        &self.originator
    }

    // bytes new_key = 3;

    pub fn clear_new_key(&mut self) {
        self.new_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_new_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.new_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.new_key
    }

    // Take field
    pub fn take_new_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.new_key, ::std::vec::Vec::new())
    }

    pub fn get_new_key(&self) -> &[u8] {
        &self.new_key
    }
}

impl ::protobuf::Message for AddKeyTransaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.originator)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.new_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.originator.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.originator);
        }
        if !self.new_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.new_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.nonce != 0 {
            os.write_uint64(1, self.nonce)?;
        }
        if !self.originator.is_empty() {
            os.write_string(2, &self.originator)?;
        }
        if !self.new_key.is_empty() {
            os.write_bytes(3, &self.new_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddKeyTransaction {
        AddKeyTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "nonce",
                    |m: &AddKeyTransaction| { &m.nonce },
                    |m: &mut AddKeyTransaction| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "originator",
                    |m: &AddKeyTransaction| { &m.originator },
                    |m: &mut AddKeyTransaction| { &mut m.originator },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "new_key",
                    |m: &AddKeyTransaction| { &m.new_key },
                    |m: &mut AddKeyTransaction| { &mut m.new_key },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AddKeyTransaction>(
                    "AddKeyTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AddKeyTransaction {
        static mut instance: ::protobuf::lazy::Lazy<AddKeyTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AddKeyTransaction,
        };
        unsafe {
            instance.get(AddKeyTransaction::new)
        }
    }
}

impl ::protobuf::Clear for AddKeyTransaction {
    fn clear(&mut self) {
        self.clear_nonce();
        self.clear_originator();
        self.clear_new_key();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddKeyTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddKeyTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteKeyTransaction {
    // message fields
    pub nonce: u64,
    pub originator: ::std::string::String,
    pub cur_key: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl DeleteKeyTransaction {
    pub fn new() -> DeleteKeyTransaction {
        ::std::default::Default::default()
    }

    // uint64 nonce = 1;

    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }

    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }

    // string originator = 2;

    pub fn clear_originator(&mut self) {
        self.originator.clear();
    }

    // Param is passed by value, moved
    pub fn set_originator(&mut self, v: ::std::string::String) {
        self.originator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_originator(&mut self) -> &mut ::std::string::String {
        &mut self.originator
    }

    // Take field
    pub fn take_originator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.originator, ::std::string::String::new())
    }

    pub fn get_originator(&self) -> &str {
        &self.originator
    }

    // bytes cur_key = 3;

    pub fn clear_cur_key(&mut self) {
        self.cur_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_cur_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.cur_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cur_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.cur_key
    }

    // Take field
    pub fn take_cur_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.cur_key, ::std::vec::Vec::new())
    }

    pub fn get_cur_key(&self) -> &[u8] {
        &self.cur_key
    }
}

impl ::protobuf::Message for DeleteKeyTransaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.originator)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.cur_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.originator.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.originator);
        }
        if !self.cur_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.cur_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.nonce != 0 {
            os.write_uint64(1, self.nonce)?;
        }
        if !self.originator.is_empty() {
            os.write_string(2, &self.originator)?;
        }
        if !self.cur_key.is_empty() {
            os.write_bytes(3, &self.cur_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteKeyTransaction {
        DeleteKeyTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "nonce",
                    |m: &DeleteKeyTransaction| { &m.nonce },
                    |m: &mut DeleteKeyTransaction| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "originator",
                    |m: &DeleteKeyTransaction| { &m.originator },
                    |m: &mut DeleteKeyTransaction| { &mut m.originator },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "cur_key",
                    |m: &DeleteKeyTransaction| { &m.cur_key },
                    |m: &mut DeleteKeyTransaction| { &mut m.cur_key },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DeleteKeyTransaction>(
                    "DeleteKeyTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DeleteKeyTransaction {
        static mut instance: ::protobuf::lazy::Lazy<DeleteKeyTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteKeyTransaction,
        };
        unsafe {
            instance.get(DeleteKeyTransaction::new)
        }
    }
}

impl ::protobuf::Clear for DeleteKeyTransaction {
    fn clear(&mut self) {
        self.clear_nonce();
        self.clear_originator();
        self.clear_cur_key();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteKeyTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteKeyTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddBlsKeyTransaction {
    // message fields
    pub nonce: u64,
    pub originator: ::std::string::String,
    pub new_key: ::std::vec::Vec<u8>,
    pub proof_of_possession: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AddBlsKeyTransaction {
    pub fn new() -> AddBlsKeyTransaction {
        ::std::default::Default::default()
    }

    // uint64 nonce = 1;

    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }

    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }

    // string originator = 2;

    pub fn clear_originator(&mut self) {
        self.originator.clear();
    }

    // Param is passed by value, moved
    pub fn set_originator(&mut self, v: ::std::string::String) {
        self.originator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_originator(&mut self) -> &mut ::std::string::String {
        &mut self.originator
    }

    // Take field
    pub fn take_originator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.originator, ::std::string::String::new())
    }

    pub fn get_originator(&self) -> &str {
        &self.originator
    }

    // bytes new_key = 3;

    pub fn clear_new_key(&mut self) {
        self.new_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_new_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.new_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.new_key
    }

    // Take field
    pub fn take_new_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.new_key, ::std::vec::Vec::new())
    }

    pub fn get_new_key(&self) -> &[u8] {
        &self.new_key
    }

    // bytes proof_of_possession = 4;

    pub fn clear_proof_of_possession(&mut self) {
        self.proof_of_possession.clear();
    }

    // Param is passed by value, moved
    pub fn set_proof_of_possession(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof_of_possession = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof_of_possession(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.proof_of_possession
    }

    // Take field
    pub fn take_proof_of_possession(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.proof_of_possession, ::std::vec::Vec::new())
    }

    pub fn get_proof_of_possession(&self) -> &[u8] {
        &self.proof_of_possession
    }
}

impl ::protobuf::Message for AddBlsKeyTransaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.originator)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.new_key)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.proof_of_possession)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.originator.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.originator);
        }
        if !self.new_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.new_key);
        }
        if !self.proof_of_possession.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.proof_of_possession);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.nonce != 0 {
            os.write_uint64(1, self.nonce)?;
        }
        if !self.originator.is_empty() {
            os.write_string(2, &self.originator)?;
        }
        if !self.new_key.is_empty() {
            os.write_bytes(3, &self.new_key)?;
        }
        if !self.proof_of_possession.is_empty() {
            os.write_bytes(4, &self.proof_of_possession)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddBlsKeyTransaction {
        AddBlsKeyTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "nonce",
                    |m: &AddBlsKeyTransaction| { &m.nonce },
                    |m: &mut AddBlsKeyTransaction| { &mut m.nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "originator",
                    |m: &AddBlsKeyTransaction| { &m.originator },
                    |m: &mut AddBlsKeyTransaction| { &mut m.originator },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "new_key",
                    |m: &AddBlsKeyTransaction| { &m.new_key },
                    |m: &mut AddBlsKeyTransaction| { &mut m.new_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "proof_of_possession",
                    |m: &AddBlsKeyTransaction| { &m.proof_of_possession },
                    |m: &mut AddBlsKeyTransaction| { &mut m.proof_of_possession },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AddBlsKeyTransaction>(
                    "AddBlsKeyTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AddBlsKeyTransaction {
        static mut instance: ::protobuf::lazy::Lazy<AddBlsKeyTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AddBlsKeyTransaction,
        };
        unsafe {
            instance.get(AddBlsKeyTransaction::new)
        }
    }
}

impl ::protobuf::Clear for AddBlsKeyTransaction {
    fn clear(&mut self) {
        self.clear_nonce();
        self.clear_originator();
        self.clear_new_key();
        self.clear_proof_of_possession();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddBlsKeyTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddBlsKeyTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignedTransaction {
    // message fields
    pub signature: ::std::vec::Vec<u8>,
    // message oneof groups
    pub body: ::std::option::Option<SignedTransaction_oneof_body>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum SignedTransaction_oneof_body {
    create_account(CreateAccountTransaction),
    deploy_contract(DeployContractTransaction),
    function_call(FunctionCallTransaction),
    send_money(SendMoneyTransaction),
    stake(StakeTransaction),
    swap_key(SwapKeyTransaction),
    add_key(AddKeyTransaction),
    delete_key(DeleteKeyTransaction),
    add_bls_key(AddBlsKeyTransaction),
}

impl SignedTransaction {
    pub fn new() -> SignedTransaction {
        ::std::default::Default::default()
    }

    // bytes signature = 1;

    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature, ::std::vec::Vec::new())
    }

    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }

    // .CreateAccountTransaction create_account = 2;

    pub fn clear_create_account(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_create_account(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::create_account(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_create_account(&mut self, v: CreateAccountTransaction) {
        self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::create_account(v))
    }

    // Mutable pointer to the field.
    pub fn mut_create_account(&mut self) -> &mut CreateAccountTransaction {
        if let ::std::option::Option::Some(SignedTransaction_oneof_body::create_account(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::create_account(CreateAccountTransaction::new()));
        }
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::create_account(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_create_account(&mut self) -> CreateAccountTransaction {
        if self.has_create_account() {
            match self.body.take() {
                ::std::option::Option::Some(SignedTransaction_oneof_body::create_account(v)) => v,
                _ => panic!(),
            }
        } else {
            CreateAccountTransaction::new()
        }
    }

    pub fn get_create_account(&self) -> &CreateAccountTransaction {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::create_account(ref v)) => v,
            _ => CreateAccountTransaction::default_instance(),
        }
    }

    // .DeployContractTransaction deploy_contract = 3;

    pub fn clear_deploy_contract(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_deploy_contract(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::deploy_contract(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_deploy_contract(&mut self, v: DeployContractTransaction) {
        self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::deploy_contract(v))
    }

    // Mutable pointer to the field.
    pub fn mut_deploy_contract(&mut self) -> &mut DeployContractTransaction {
        if let ::std::option::Option::Some(SignedTransaction_oneof_body::deploy_contract(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::deploy_contract(DeployContractTransaction::new()));
        }
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::deploy_contract(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_deploy_contract(&mut self) -> DeployContractTransaction {
        if self.has_deploy_contract() {
            match self.body.take() {
                ::std::option::Option::Some(SignedTransaction_oneof_body::deploy_contract(v)) => v,
                _ => panic!(),
            }
        } else {
            DeployContractTransaction::new()
        }
    }

    pub fn get_deploy_contract(&self) -> &DeployContractTransaction {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::deploy_contract(ref v)) => v,
            _ => DeployContractTransaction::default_instance(),
        }
    }

    // .FunctionCallTransaction function_call = 4;

    pub fn clear_function_call(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_function_call(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::function_call(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_function_call(&mut self, v: FunctionCallTransaction) {
        self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::function_call(v))
    }

    // Mutable pointer to the field.
    pub fn mut_function_call(&mut self) -> &mut FunctionCallTransaction {
        if let ::std::option::Option::Some(SignedTransaction_oneof_body::function_call(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::function_call(FunctionCallTransaction::new()));
        }
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::function_call(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_function_call(&mut self) -> FunctionCallTransaction {
        if self.has_function_call() {
            match self.body.take() {
                ::std::option::Option::Some(SignedTransaction_oneof_body::function_call(v)) => v,
                _ => panic!(),
            }
        } else {
            FunctionCallTransaction::new()
        }
    }

    pub fn get_function_call(&self) -> &FunctionCallTransaction {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::function_call(ref v)) => v,
            _ => FunctionCallTransaction::default_instance(),
        }
    }

    // .SendMoneyTransaction send_money = 5;

    pub fn clear_send_money(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_send_money(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::send_money(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_send_money(&mut self, v: SendMoneyTransaction) {
        self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::send_money(v))
    }

    // Mutable pointer to the field.
    pub fn mut_send_money(&mut self) -> &mut SendMoneyTransaction {
        if let ::std::option::Option::Some(SignedTransaction_oneof_body::send_money(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::send_money(SendMoneyTransaction::new()));
        }
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::send_money(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_send_money(&mut self) -> SendMoneyTransaction {
        if self.has_send_money() {
            match self.body.take() {
                ::std::option::Option::Some(SignedTransaction_oneof_body::send_money(v)) => v,
                _ => panic!(),
            }
        } else {
            SendMoneyTransaction::new()
        }
    }

    pub fn get_send_money(&self) -> &SendMoneyTransaction {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::send_money(ref v)) => v,
            _ => SendMoneyTransaction::default_instance(),
        }
    }

    // .StakeTransaction stake = 6;

    pub fn clear_stake(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_stake(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::stake(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_stake(&mut self, v: StakeTransaction) {
        self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::stake(v))
    }

    // Mutable pointer to the field.
    pub fn mut_stake(&mut self) -> &mut StakeTransaction {
        if let ::std::option::Option::Some(SignedTransaction_oneof_body::stake(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::stake(StakeTransaction::new()));
        }
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::stake(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_stake(&mut self) -> StakeTransaction {
        if self.has_stake() {
            match self.body.take() {
                ::std::option::Option::Some(SignedTransaction_oneof_body::stake(v)) => v,
                _ => panic!(),
            }
        } else {
            StakeTransaction::new()
        }
    }

    pub fn get_stake(&self) -> &StakeTransaction {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::stake(ref v)) => v,
            _ => StakeTransaction::default_instance(),
        }
    }

    // .SwapKeyTransaction swap_key = 7;

    pub fn clear_swap_key(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_swap_key(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::swap_key(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_swap_key(&mut self, v: SwapKeyTransaction) {
        self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::swap_key(v))
    }

    // Mutable pointer to the field.
    pub fn mut_swap_key(&mut self) -> &mut SwapKeyTransaction {
        if let ::std::option::Option::Some(SignedTransaction_oneof_body::swap_key(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::swap_key(SwapKeyTransaction::new()));
        }
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::swap_key(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_swap_key(&mut self) -> SwapKeyTransaction {
        if self.has_swap_key() {
            match self.body.take() {
                ::std::option::Option::Some(SignedTransaction_oneof_body::swap_key(v)) => v,
                _ => panic!(),
            }
        } else {
            SwapKeyTransaction::new()
        }
    }

    pub fn get_swap_key(&self) -> &SwapKeyTransaction {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::swap_key(ref v)) => v,
            _ => SwapKeyTransaction::default_instance(),
        }
    }

    // .AddKeyTransaction add_key = 8;

    pub fn clear_add_key(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_add_key(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::add_key(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_add_key(&mut self, v: AddKeyTransaction) {
        self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::add_key(v))
    }

    // Mutable pointer to the field.
    pub fn mut_add_key(&mut self) -> &mut AddKeyTransaction {
        if let ::std::option::Option::Some(SignedTransaction_oneof_body::add_key(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::add_key(AddKeyTransaction::new()));
        }
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::add_key(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_add_key(&mut self) -> AddKeyTransaction {
        if self.has_add_key() {
            match self.body.take() {
                ::std::option::Option::Some(SignedTransaction_oneof_body::add_key(v)) => v,
                _ => panic!(),
            }
        } else {
            AddKeyTransaction::new()
        }
    }

    pub fn get_add_key(&self) -> &AddKeyTransaction {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::add_key(ref v)) => v,
            _ => AddKeyTransaction::default_instance(),
        }
    }

    // .DeleteKeyTransaction delete_key = 9;

    pub fn clear_delete_key(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_delete_key(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::delete_key(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete_key(&mut self, v: DeleteKeyTransaction) {
        self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::delete_key(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete_key(&mut self) -> &mut DeleteKeyTransaction {
        if let ::std::option::Option::Some(SignedTransaction_oneof_body::delete_key(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::delete_key(DeleteKeyTransaction::new()));
        }
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::delete_key(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete_key(&mut self) -> DeleteKeyTransaction {
        if self.has_delete_key() {
            match self.body.take() {
                ::std::option::Option::Some(SignedTransaction_oneof_body::delete_key(v)) => v,
                _ => panic!(),
            }
        } else {
            DeleteKeyTransaction::new()
        }
    }

    pub fn get_delete_key(&self) -> &DeleteKeyTransaction {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::delete_key(ref v)) => v,
            _ => DeleteKeyTransaction::default_instance(),
        }
    }

    // .AddBlsKeyTransaction add_bls_key = 10;

    pub fn clear_add_bls_key(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_add_bls_key(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::add_bls_key(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_add_bls_key(&mut self, v: AddBlsKeyTransaction) {
        self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::add_bls_key(v))
    }

    // Mutable pointer to the field.
    pub fn mut_add_bls_key(&mut self) -> &mut AddBlsKeyTransaction {
        if let ::std::option::Option::Some(SignedTransaction_oneof_body::add_bls_key(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::add_bls_key(AddBlsKeyTransaction::new()));
        }
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::add_bls_key(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_add_bls_key(&mut self) -> AddBlsKeyTransaction {
        if self.has_add_bls_key() {
            match self.body.take() {
                ::std::option::Option::Some(SignedTransaction_oneof_body::add_bls_key(v)) => v,
                _ => panic!(),
            }
        } else {
            AddBlsKeyTransaction::new()
        }
    }

    pub fn get_add_bls_key(&self) -> &AddBlsKeyTransaction {
        match self.body {
            ::std::option::Option::Some(SignedTransaction_oneof_body::add_bls_key(ref v)) => v,
            _ => AddBlsKeyTransaction::default_instance(),
        }
    }
}

impl ::protobuf::Message for SignedTransaction {
    fn is_initialized(&self) -> bool {
        if let Some(SignedTransaction_oneof_body::create_account(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SignedTransaction_oneof_body::deploy_contract(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SignedTransaction_oneof_body::function_call(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SignedTransaction_oneof_body::send_money(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SignedTransaction_oneof_body::stake(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SignedTransaction_oneof_body::swap_key(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SignedTransaction_oneof_body::add_key(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SignedTransaction_oneof_body::delete_key(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SignedTransaction_oneof_body::add_bls_key(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::create_account(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::deploy_contract(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::function_call(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::send_money(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::stake(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::swap_key(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::add_key(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::delete_key(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(SignedTransaction_oneof_body::add_bls_key(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.signature);
        }
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &SignedTransaction_oneof_body::create_account(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SignedTransaction_oneof_body::deploy_contract(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SignedTransaction_oneof_body::function_call(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SignedTransaction_oneof_body::send_money(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SignedTransaction_oneof_body::stake(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SignedTransaction_oneof_body::swap_key(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SignedTransaction_oneof_body::add_key(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SignedTransaction_oneof_body::delete_key(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SignedTransaction_oneof_body::add_bls_key(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.signature.is_empty() {
            os.write_bytes(1, &self.signature)?;
        }
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &SignedTransaction_oneof_body::create_account(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SignedTransaction_oneof_body::deploy_contract(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SignedTransaction_oneof_body::function_call(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SignedTransaction_oneof_body::send_money(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SignedTransaction_oneof_body::stake(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SignedTransaction_oneof_body::swap_key(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SignedTransaction_oneof_body::add_key(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SignedTransaction_oneof_body::delete_key(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SignedTransaction_oneof_body::add_bls_key(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignedTransaction {
        SignedTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "signature",
                    |m: &SignedTransaction| { &m.signature },
                    |m: &mut SignedTransaction| { &mut m.signature },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CreateAccountTransaction>(
                    "create_account",
                    SignedTransaction::has_create_account,
                    SignedTransaction::get_create_account,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, DeployContractTransaction>(
                    "deploy_contract",
                    SignedTransaction::has_deploy_contract,
                    SignedTransaction::get_deploy_contract,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, FunctionCallTransaction>(
                    "function_call",
                    SignedTransaction::has_function_call,
                    SignedTransaction::get_function_call,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SendMoneyTransaction>(
                    "send_money",
                    SignedTransaction::has_send_money,
                    SignedTransaction::get_send_money,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, StakeTransaction>(
                    "stake",
                    SignedTransaction::has_stake,
                    SignedTransaction::get_stake,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SwapKeyTransaction>(
                    "swap_key",
                    SignedTransaction::has_swap_key,
                    SignedTransaction::get_swap_key,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AddKeyTransaction>(
                    "add_key",
                    SignedTransaction::has_add_key,
                    SignedTransaction::get_add_key,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, DeleteKeyTransaction>(
                    "delete_key",
                    SignedTransaction::has_delete_key,
                    SignedTransaction::get_delete_key,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AddBlsKeyTransaction>(
                    "add_bls_key",
                    SignedTransaction::has_add_bls_key,
                    SignedTransaction::get_add_bls_key,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SignedTransaction>(
                    "SignedTransaction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SignedTransaction {
        static mut instance: ::protobuf::lazy::Lazy<SignedTransaction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SignedTransaction,
        };
        unsafe {
            instance.get(SignedTransaction::new)
        }
    }
}

impl ::protobuf::Clear for SignedTransaction {
    fn clear(&mut self) {
        self.clear_signature();
        self.clear_create_account();
        self.clear_deploy_contract();
        self.clear_function_call();
        self.clear_send_money();
        self.clear_stake();
        self.clear_swap_key();
        self.clear_add_key();
        self.clear_delete_key();
        self.clear_add_bls_key();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignedTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fprotos/signed_transaction.proto\"\xad\x01\n\x18CreateAccountTransa\
    ction\x12\x14\n\x05nonce\x18\x01\x20\x01(\x04R\x05nonce\x12\x1e\n\norigi\
    nator\x18\x02\x20\x01(\tR\noriginator\x12$\n\x0enew_account_id\x18\x03\
    \x20\x01(\tR\x0cnewAccountId\x12\x16\n\x06amount\x18\x04\x20\x01(\x04R\
    \x06amount\x12\x1d\n\npublic_key\x18\x05\x20\x01(\x0cR\tpublicKey\"z\n\
    \x19DeployContractTransaction\x12\x14\n\x05nonce\x18\x01\x20\x01(\x04R\
    \x05nonce\x12\x1f\n\x0bcontract_id\x18\x02\x20\x01(\tR\ncontractId\x12&\
    \n\x0fwasm_byte_array\x18\x03\x20\x01(\x0cR\rwasmByteArray\"\xbd\x01\n\
    \x17FunctionCallTransaction\x12\x14\n\x05nonce\x18\x01\x20\x01(\x04R\x05\
    nonce\x12\x1e\n\noriginator\x18\x02\x20\x01(\tR\noriginator\x12\x1f\n\
    \x0bcontract_id\x18\x03\x20\x01(\tR\ncontractId\x12\x1f\n\x0bmethod_name\
    \x18\x04\x20\x01(\x0cR\nmethodName\x12\x12\n\x04args\x18\x05\x20\x01(\
    \x0cR\x04args\x12\x16\n\x06amount\x18\x06\x20\x01(\x04R\x06amount\"\x80\
    \x01\n\x14SendMoneyTransaction\x12\x14\n\x05nonce\x18\x01\x20\x01(\x04R\
    \x05nonce\x12\x1e\n\noriginator\x18\x02\x20\x01(\tR\noriginator\x12\x1a\
    \n\x08receiver\x18\x03\x20\x01(\tR\x08receiver\x12\x16\n\x06amount\x18\
    \x04\x20\x01(\x04R\x06amount\"`\n\x10StakeTransaction\x12\x14\n\x05nonce\
    \x18\x01\x20\x01(\x04R\x05nonce\x12\x1e\n\noriginator\x18\x02\x20\x01(\t\
    R\noriginator\x12\x16\n\x06amount\x18\x03\x20\x01(\x04R\x06amount\"|\n\
    \x12SwapKeyTransaction\x12\x14\n\x05nonce\x18\x01\x20\x01(\x04R\x05nonce\
    \x12\x1e\n\noriginator\x18\x02\x20\x01(\tR\noriginator\x12\x17\n\x07cur_\
    key\x18\x03\x20\x01(\x0cR\x06curKey\x12\x17\n\x07new_key\x18\x04\x20\x01\
    (\x0cR\x06newKey\"b\n\x11AddKeyTransaction\x12\x14\n\x05nonce\x18\x01\
    \x20\x01(\x04R\x05nonce\x12\x1e\n\noriginator\x18\x02\x20\x01(\tR\norigi\
    nator\x12\x17\n\x07new_key\x18\x03\x20\x01(\x0cR\x06newKey\"e\n\x14Delet\
    eKeyTransaction\x12\x14\n\x05nonce\x18\x01\x20\x01(\x04R\x05nonce\x12\
    \x1e\n\noriginator\x18\x02\x20\x01(\tR\noriginator\x12\x17\n\x07cur_key\
    \x18\x03\x20\x01(\x0cR\x06curKey\"\x95\x01\n\x14AddBlsKeyTransaction\x12\
    \x14\n\x05nonce\x18\x01\x20\x01(\x04R\x05nonce\x12\x1e\n\noriginator\x18\
    \x02\x20\x01(\tR\noriginator\x12\x17\n\x07new_key\x18\x03\x20\x01(\x0cR\
    \x06newKey\x12.\n\x13proof_of_possession\x18\x04\x20\x01(\x0cR\x11proofO\
    fPossession\"\xba\x04\n\x11SignedTransaction\x12\x1c\n\tsignature\x18\
    \x01\x20\x01(\x0cR\tsignature\x12B\n\x0ecreate_account\x18\x02\x20\x01(\
    \x0b2\x19.CreateAccountTransactionH\0R\rcreateAccount\x12E\n\x0fdeploy_c\
    ontract\x18\x03\x20\x01(\x0b2\x1a.DeployContractTransactionH\0R\x0edeplo\
    yContract\x12?\n\rfunction_call\x18\x04\x20\x01(\x0b2\x18.FunctionCallTr\
    ansactionH\0R\x0cfunctionCall\x126\n\nsend_money\x18\x05\x20\x01(\x0b2\
    \x15.SendMoneyTransactionH\0R\tsendMoney\x12)\n\x05stake\x18\x06\x20\x01\
    (\x0b2\x11.StakeTransactionH\0R\x05stake\x120\n\x08swap_key\x18\x07\x20\
    \x01(\x0b2\x13.SwapKeyTransactionH\0R\x07swapKey\x12-\n\x07add_key\x18\
    \x08\x20\x01(\x0b2\x12.AddKeyTransactionH\0R\x06addKey\x126\n\ndelete_ke\
    y\x18\t\x20\x01(\x0b2\x15.DeleteKeyTransactionH\0R\tdeleteKey\x127\n\x0b\
    add_bls_key\x18\n\x20\x01(\x0b2\x15.AddBlsKeyTransactionH\0R\taddBlsKeyB\
    \x06\n\x04bodyb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
