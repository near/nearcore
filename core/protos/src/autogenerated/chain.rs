// This file is generated by rust-protobuf 2.4.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct ChainState {
    // message fields
    pub genesis_hash: ::std::vec::Vec<u8>,
    pub last_index: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ChainState {
    pub fn new() -> ChainState {
        ::std::default::Default::default()
    }

    // bytes genesis_hash = 1;

    pub fn clear_genesis_hash(&mut self) {
        self.genesis_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_genesis_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.genesis_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_genesis_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.genesis_hash
    }

    // Take field
    pub fn take_genesis_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.genesis_hash, ::std::vec::Vec::new())
    }

    pub fn get_genesis_hash(&self) -> &[u8] {
        &self.genesis_hash
    }

    // uint64 last_index = 2;

    pub fn clear_last_index(&mut self) {
        self.last_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_index(&mut self, v: u64) {
        self.last_index = v;
    }

    pub fn get_last_index(&self) -> u64 {
        self.last_index
    }
}

impl ::protobuf::Message for ChainState {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.genesis_hash)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.last_index = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.genesis_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.genesis_hash);
        }
        if self.last_index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.last_index, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.genesis_hash.is_empty() {
            os.write_bytes(1, &self.genesis_hash)?;
        }
        if self.last_index != 0 {
            os.write_uint64(2, self.last_index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChainState {
        ChainState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "genesis_hash",
                    |m: &ChainState| { &m.genesis_hash },
                    |m: &mut ChainState| { &mut m.genesis_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "last_index",
                    |m: &ChainState| { &m.last_index },
                    |m: &mut ChainState| { &mut m.last_index },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ChainState>(
                    "ChainState",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ChainState {
        static mut instance: ::protobuf::lazy::Lazy<ChainState> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ChainState,
        };
        unsafe {
            instance.get(ChainState::new)
        }
    }
}

impl ::protobuf::Clear for ChainState {
    fn clear(&mut self) {
        self.clear_genesis_hash();
        self.clear_last_index();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChainState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChainState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ShardBlockHeader {
    // message fields
    pub parent_hash: ::std::vec::Vec<u8>,
    pub shard_id: u32,
    pub block_index: u64,
    pub merkle_root_state: ::std::vec::Vec<u8>,
    pub receipt_merkle_root: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ShardBlockHeader {
    pub fn new() -> ShardBlockHeader {
        ::std::default::Default::default()
    }

    // bytes parent_hash = 1;

    pub fn clear_parent_hash(&mut self) {
        self.parent_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.parent_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.parent_hash
    }

    // Take field
    pub fn take_parent_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.parent_hash, ::std::vec::Vec::new())
    }

    pub fn get_parent_hash(&self) -> &[u8] {
        &self.parent_hash
    }

    // uint32 shard_id = 2;

    pub fn clear_shard_id(&mut self) {
        self.shard_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_shard_id(&mut self, v: u32) {
        self.shard_id = v;
    }

    pub fn get_shard_id(&self) -> u32 {
        self.shard_id
    }

    // uint64 block_index = 3;

    pub fn clear_block_index(&mut self) {
        self.block_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_index(&mut self, v: u64) {
        self.block_index = v;
    }

    pub fn get_block_index(&self) -> u64 {
        self.block_index
    }

    // bytes merkle_root_state = 4;

    pub fn clear_merkle_root_state(&mut self) {
        self.merkle_root_state.clear();
    }

    // Param is passed by value, moved
    pub fn set_merkle_root_state(&mut self, v: ::std::vec::Vec<u8>) {
        self.merkle_root_state = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_merkle_root_state(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.merkle_root_state
    }

    // Take field
    pub fn take_merkle_root_state(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.merkle_root_state, ::std::vec::Vec::new())
    }

    pub fn get_merkle_root_state(&self) -> &[u8] {
        &self.merkle_root_state
    }

    // bytes receipt_merkle_root = 5;

    pub fn clear_receipt_merkle_root(&mut self) {
        self.receipt_merkle_root.clear();
    }

    // Param is passed by value, moved
    pub fn set_receipt_merkle_root(&mut self, v: ::std::vec::Vec<u8>) {
        self.receipt_merkle_root = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receipt_merkle_root(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.receipt_merkle_root
    }

    // Take field
    pub fn take_receipt_merkle_root(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.receipt_merkle_root, ::std::vec::Vec::new())
    }

    pub fn get_receipt_merkle_root(&self) -> &[u8] {
        &self.receipt_merkle_root
    }
}

impl ::protobuf::Message for ShardBlockHeader {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.parent_hash)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.shard_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.block_index = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.merkle_root_state)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.receipt_merkle_root)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.parent_hash);
        }
        if self.shard_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.shard_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.block_index != 0 {
            my_size += ::protobuf::rt::value_size(3, self.block_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.merkle_root_state.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.merkle_root_state);
        }
        if !self.receipt_merkle_root.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.receipt_merkle_root);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.parent_hash.is_empty() {
            os.write_bytes(1, &self.parent_hash)?;
        }
        if self.shard_id != 0 {
            os.write_uint32(2, self.shard_id)?;
        }
        if self.block_index != 0 {
            os.write_uint64(3, self.block_index)?;
        }
        if !self.merkle_root_state.is_empty() {
            os.write_bytes(4, &self.merkle_root_state)?;
        }
        if !self.receipt_merkle_root.is_empty() {
            os.write_bytes(5, &self.receipt_merkle_root)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShardBlockHeader {
        ShardBlockHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "parent_hash",
                    |m: &ShardBlockHeader| { &m.parent_hash },
                    |m: &mut ShardBlockHeader| { &mut m.parent_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "shard_id",
                    |m: &ShardBlockHeader| { &m.shard_id },
                    |m: &mut ShardBlockHeader| { &mut m.shard_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "block_index",
                    |m: &ShardBlockHeader| { &m.block_index },
                    |m: &mut ShardBlockHeader| { &mut m.block_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "merkle_root_state",
                    |m: &ShardBlockHeader| { &m.merkle_root_state },
                    |m: &mut ShardBlockHeader| { &mut m.merkle_root_state },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "receipt_merkle_root",
                    |m: &ShardBlockHeader| { &m.receipt_merkle_root },
                    |m: &mut ShardBlockHeader| { &mut m.receipt_merkle_root },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ShardBlockHeader>(
                    "ShardBlockHeader",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ShardBlockHeader {
        static mut instance: ::protobuf::lazy::Lazy<ShardBlockHeader> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ShardBlockHeader,
        };
        unsafe {
            instance.get(ShardBlockHeader::new)
        }
    }
}

impl ::protobuf::Clear for ShardBlockHeader {
    fn clear(&mut self) {
        self.clear_parent_hash();
        self.clear_shard_id();
        self.clear_block_index();
        self.clear_merkle_root_state();
        self.clear_receipt_merkle_root();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShardBlockHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShardBlockHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignedShardBlockHeader {
    // message fields
    pub body: ::protobuf::SingularPtrField<ShardBlockHeader>,
    pub hash: ::std::vec::Vec<u8>,
    pub signature: ::protobuf::SingularPtrField<super::types::GroupSignature>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl SignedShardBlockHeader {
    pub fn new() -> SignedShardBlockHeader {
        ::std::default::Default::default()
    }

    // .ShardBlockHeader body = 1;

    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    pub fn has_body(&self) -> bool {
        self.body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ShardBlockHeader) {
        self.body = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ShardBlockHeader {
        if self.body.is_none() {
            self.body.set_default();
        }
        self.body.as_mut().unwrap()
    }

    // Take field
    pub fn take_body(&mut self) -> ShardBlockHeader {
        self.body.take().unwrap_or_else(|| ShardBlockHeader::new())
    }

    pub fn get_body(&self) -> &ShardBlockHeader {
        self.body.as_ref().unwrap_or_else(|| ShardBlockHeader::default_instance())
    }

    // bytes hash = 2;

    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }

    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }

    // .GroupSignature signature = 3;

    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: super::types::GroupSignature) {
        self.signature = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut super::types::GroupSignature {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> super::types::GroupSignature {
        self.signature.take().unwrap_or_else(|| super::types::GroupSignature::new())
    }

    pub fn get_signature(&self) -> &super::types::GroupSignature {
        self.signature.as_ref().unwrap_or_else(|| super::types::GroupSignature::default_instance())
    }
}

impl ::protobuf::Message for SignedShardBlockHeader {
    fn is_initialized(&self) -> bool {
        for v in &self.body {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.signature {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.body)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.body.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.hash);
        }
        if let Some(ref v) = self.signature.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.body.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(2, &self.hash)?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignedShardBlockHeader {
        SignedShardBlockHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ShardBlockHeader>>(
                    "body",
                    |m: &SignedShardBlockHeader| { &m.body },
                    |m: &mut SignedShardBlockHeader| { &mut m.body },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "hash",
                    |m: &SignedShardBlockHeader| { &m.hash },
                    |m: &mut SignedShardBlockHeader| { &mut m.hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::GroupSignature>>(
                    "signature",
                    |m: &SignedShardBlockHeader| { &m.signature },
                    |m: &mut SignedShardBlockHeader| { &mut m.signature },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SignedShardBlockHeader>(
                    "SignedShardBlockHeader",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SignedShardBlockHeader {
        static mut instance: ::protobuf::lazy::Lazy<SignedShardBlockHeader> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SignedShardBlockHeader,
        };
        unsafe {
            instance.get(SignedShardBlockHeader::new)
        }
    }
}

impl ::protobuf::Clear for SignedShardBlockHeader {
    fn clear(&mut self) {
        self.clear_body();
        self.clear_hash();
        self.clear_signature();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignedShardBlockHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedShardBlockHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReceiptBlock {
    // message fields
    pub header: ::protobuf::SingularPtrField<SignedShardBlockHeader>,
    pub path: ::protobuf::RepeatedField<super::types::MerkleNode>,
    pub receipts: ::protobuf::RepeatedField<super::receipt::ReceiptTransaction>,
    pub hash: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ReceiptBlock {
    pub fn new() -> ReceiptBlock {
        ::std::default::Default::default()
    }

    // .SignedShardBlockHeader header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: SignedShardBlockHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut SignedShardBlockHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> SignedShardBlockHeader {
        self.header.take().unwrap_or_else(|| SignedShardBlockHeader::new())
    }

    pub fn get_header(&self) -> &SignedShardBlockHeader {
        self.header.as_ref().unwrap_or_else(|| SignedShardBlockHeader::default_instance())
    }

    // repeated .MerkleNode path = 2;

    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::protobuf::RepeatedField<super::types::MerkleNode>) {
        self.path = v;
    }

    // Mutable pointer to the field.
    pub fn mut_path(&mut self) -> &mut ::protobuf::RepeatedField<super::types::MerkleNode> {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::protobuf::RepeatedField<super::types::MerkleNode> {
        ::std::mem::replace(&mut self.path, ::protobuf::RepeatedField::new())
    }

    pub fn get_path(&self) -> &[super::types::MerkleNode] {
        &self.path
    }

    // repeated .ReceiptTransaction receipts = 3;

    pub fn clear_receipts(&mut self) {
        self.receipts.clear();
    }

    // Param is passed by value, moved
    pub fn set_receipts(&mut self, v: ::protobuf::RepeatedField<super::receipt::ReceiptTransaction>) {
        self.receipts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_receipts(&mut self) -> &mut ::protobuf::RepeatedField<super::receipt::ReceiptTransaction> {
        &mut self.receipts
    }

    // Take field
    pub fn take_receipts(&mut self) -> ::protobuf::RepeatedField<super::receipt::ReceiptTransaction> {
        ::std::mem::replace(&mut self.receipts, ::protobuf::RepeatedField::new())
    }

    pub fn get_receipts(&self) -> &[super::receipt::ReceiptTransaction] {
        &self.receipts
    }

    // bytes hash = 4;

    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }

    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }
}

impl ::protobuf::Message for ReceiptBlock {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.path {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.receipts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.path)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.receipts)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.path {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.receipts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.path {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.receipts {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.hash.is_empty() {
            os.write_bytes(4, &self.hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReceiptBlock {
        ReceiptBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SignedShardBlockHeader>>(
                    "header",
                    |m: &ReceiptBlock| { &m.header },
                    |m: &mut ReceiptBlock| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::MerkleNode>>(
                    "path",
                    |m: &ReceiptBlock| { &m.path },
                    |m: &mut ReceiptBlock| { &mut m.path },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::receipt::ReceiptTransaction>>(
                    "receipts",
                    |m: &ReceiptBlock| { &m.receipts },
                    |m: &mut ReceiptBlock| { &mut m.receipts },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "hash",
                    |m: &ReceiptBlock| { &m.hash },
                    |m: &mut ReceiptBlock| { &mut m.hash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ReceiptBlock>(
                    "ReceiptBlock",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReceiptBlock {
        static mut instance: ::protobuf::lazy::Lazy<ReceiptBlock> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ReceiptBlock,
        };
        unsafe {
            instance.get(ReceiptBlock::new)
        }
    }
}

impl ::protobuf::Clear for ReceiptBlock {
    fn clear(&mut self) {
        self.clear_header();
        self.clear_path();
        self.clear_receipts();
        self.clear_hash();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReceiptBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReceiptBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ShardBlock {
    // message fields
    pub header: ::protobuf::SingularPtrField<ShardBlockHeader>,
    pub transactions: ::protobuf::RepeatedField<super::signed_transaction::SignedTransaction>,
    pub receipts: ::protobuf::RepeatedField<ReceiptBlock>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ShardBlock {
    pub fn new() -> ShardBlock {
        ::std::default::Default::default()
    }

    // .ShardBlockHeader header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: ShardBlockHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut ShardBlockHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> ShardBlockHeader {
        self.header.take().unwrap_or_else(|| ShardBlockHeader::new())
    }

    pub fn get_header(&self) -> &ShardBlockHeader {
        self.header.as_ref().unwrap_or_else(|| ShardBlockHeader::default_instance())
    }

    // repeated .SignedTransaction transactions = 2;

    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<super::signed_transaction::SignedTransaction>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<super::signed_transaction::SignedTransaction> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<super::signed_transaction::SignedTransaction> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }

    pub fn get_transactions(&self) -> &[super::signed_transaction::SignedTransaction] {
        &self.transactions
    }

    // repeated .ReceiptBlock receipts = 3;

    pub fn clear_receipts(&mut self) {
        self.receipts.clear();
    }

    // Param is passed by value, moved
    pub fn set_receipts(&mut self, v: ::protobuf::RepeatedField<ReceiptBlock>) {
        self.receipts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_receipts(&mut self) -> &mut ::protobuf::RepeatedField<ReceiptBlock> {
        &mut self.receipts
    }

    // Take field
    pub fn take_receipts(&mut self) -> ::protobuf::RepeatedField<ReceiptBlock> {
        ::std::mem::replace(&mut self.receipts, ::protobuf::RepeatedField::new())
    }

    pub fn get_receipts(&self) -> &[ReceiptBlock] {
        &self.receipts
    }
}

impl ::protobuf::Message for ShardBlock {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.receipts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transactions)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.receipts)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.receipts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.transactions {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.receipts {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShardBlock {
        ShardBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ShardBlockHeader>>(
                    "header",
                    |m: &ShardBlock| { &m.header },
                    |m: &mut ShardBlock| { &mut m.header },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::signed_transaction::SignedTransaction>>(
                    "transactions",
                    |m: &ShardBlock| { &m.transactions },
                    |m: &mut ShardBlock| { &mut m.transactions },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ReceiptBlock>>(
                    "receipts",
                    |m: &ShardBlock| { &m.receipts },
                    |m: &mut ShardBlock| { &mut m.receipts },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ShardBlock>(
                    "ShardBlock",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ShardBlock {
        static mut instance: ::protobuf::lazy::Lazy<ShardBlock> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ShardBlock,
        };
        unsafe {
            instance.get(ShardBlock::new)
        }
    }
}

impl ::protobuf::Clear for ShardBlock {
    fn clear(&mut self) {
        self.clear_header();
        self.clear_transactions();
        self.clear_receipts();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShardBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShardBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignedShardBlock {
    // message fields
    pub body: ::protobuf::SingularPtrField<ShardBlock>,
    pub hash: ::std::vec::Vec<u8>,
    pub signature: ::protobuf::SingularPtrField<super::types::GroupSignature>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl SignedShardBlock {
    pub fn new() -> SignedShardBlock {
        ::std::default::Default::default()
    }

    // .ShardBlock body = 1;

    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    pub fn has_body(&self) -> bool {
        self.body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ShardBlock) {
        self.body = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ShardBlock {
        if self.body.is_none() {
            self.body.set_default();
        }
        self.body.as_mut().unwrap()
    }

    // Take field
    pub fn take_body(&mut self) -> ShardBlock {
        self.body.take().unwrap_or_else(|| ShardBlock::new())
    }

    pub fn get_body(&self) -> &ShardBlock {
        self.body.as_ref().unwrap_or_else(|| ShardBlock::default_instance())
    }

    // bytes hash = 2;

    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }

    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }

    // .GroupSignature signature = 3;

    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: super::types::GroupSignature) {
        self.signature = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut super::types::GroupSignature {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> super::types::GroupSignature {
        self.signature.take().unwrap_or_else(|| super::types::GroupSignature::new())
    }

    pub fn get_signature(&self) -> &super::types::GroupSignature {
        self.signature.as_ref().unwrap_or_else(|| super::types::GroupSignature::default_instance())
    }
}

impl ::protobuf::Message for SignedShardBlock {
    fn is_initialized(&self) -> bool {
        for v in &self.body {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.signature {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.body)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.body.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.hash);
        }
        if let Some(ref v) = self.signature.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.body.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(2, &self.hash)?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignedShardBlock {
        SignedShardBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ShardBlock>>(
                    "body",
                    |m: &SignedShardBlock| { &m.body },
                    |m: &mut SignedShardBlock| { &mut m.body },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "hash",
                    |m: &SignedShardBlock| { &m.hash },
                    |m: &mut SignedShardBlock| { &mut m.hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::GroupSignature>>(
                    "signature",
                    |m: &SignedShardBlock| { &m.signature },
                    |m: &mut SignedShardBlock| { &mut m.signature },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SignedShardBlock>(
                    "SignedShardBlock",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SignedShardBlock {
        static mut instance: ::protobuf::lazy::Lazy<SignedShardBlock> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SignedShardBlock,
        };
        unsafe {
            instance.get(SignedShardBlock::new)
        }
    }
}

impl ::protobuf::Clear for SignedShardBlock {
    fn clear(&mut self) {
        self.clear_body();
        self.clear_hash();
        self.clear_signature();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignedShardBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedShardBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BeaconBlockHeader {
    // message fields
    pub parent_hash: ::std::vec::Vec<u8>,
    pub index: u64,
    pub authority_proposal: ::protobuf::RepeatedField<super::types::AuthorityStake>,
    pub shard_block_hash: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl BeaconBlockHeader {
    pub fn new() -> BeaconBlockHeader {
        ::std::default::Default::default()
    }

    // bytes parent_hash = 1;

    pub fn clear_parent_hash(&mut self) {
        self.parent_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.parent_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.parent_hash
    }

    // Take field
    pub fn take_parent_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.parent_hash, ::std::vec::Vec::new())
    }

    pub fn get_parent_hash(&self) -> &[u8] {
        &self.parent_hash
    }

    // uint64 index = 2;

    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u64) {
        self.index = v;
    }

    pub fn get_index(&self) -> u64 {
        self.index
    }

    // repeated .AuthorityStake authority_proposal = 3;

    pub fn clear_authority_proposal(&mut self) {
        self.authority_proposal.clear();
    }

    // Param is passed by value, moved
    pub fn set_authority_proposal(&mut self, v: ::protobuf::RepeatedField<super::types::AuthorityStake>) {
        self.authority_proposal = v;
    }

    // Mutable pointer to the field.
    pub fn mut_authority_proposal(&mut self) -> &mut ::protobuf::RepeatedField<super::types::AuthorityStake> {
        &mut self.authority_proposal
    }

    // Take field
    pub fn take_authority_proposal(&mut self) -> ::protobuf::RepeatedField<super::types::AuthorityStake> {
        ::std::mem::replace(&mut self.authority_proposal, ::protobuf::RepeatedField::new())
    }

    pub fn get_authority_proposal(&self) -> &[super::types::AuthorityStake] {
        &self.authority_proposal
    }

    // bytes shard_block_hash = 4;

    pub fn clear_shard_block_hash(&mut self) {
        self.shard_block_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_shard_block_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.shard_block_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_shard_block_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.shard_block_hash
    }

    // Take field
    pub fn take_shard_block_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.shard_block_hash, ::std::vec::Vec::new())
    }

    pub fn get_shard_block_hash(&self) -> &[u8] {
        &self.shard_block_hash
    }
}

impl ::protobuf::Message for BeaconBlockHeader {
    fn is_initialized(&self) -> bool {
        for v in &self.authority_proposal {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.parent_hash)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.index = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.authority_proposal)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.shard_block_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.parent_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.parent_hash);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.authority_proposal {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.shard_block_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.shard_block_hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.parent_hash.is_empty() {
            os.write_bytes(1, &self.parent_hash)?;
        }
        if self.index != 0 {
            os.write_uint64(2, self.index)?;
        }
        for v in &self.authority_proposal {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.shard_block_hash.is_empty() {
            os.write_bytes(4, &self.shard_block_hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BeaconBlockHeader {
        BeaconBlockHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "parent_hash",
                    |m: &BeaconBlockHeader| { &m.parent_hash },
                    |m: &mut BeaconBlockHeader| { &mut m.parent_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "index",
                    |m: &BeaconBlockHeader| { &m.index },
                    |m: &mut BeaconBlockHeader| { &mut m.index },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::AuthorityStake>>(
                    "authority_proposal",
                    |m: &BeaconBlockHeader| { &m.authority_proposal },
                    |m: &mut BeaconBlockHeader| { &mut m.authority_proposal },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "shard_block_hash",
                    |m: &BeaconBlockHeader| { &m.shard_block_hash },
                    |m: &mut BeaconBlockHeader| { &mut m.shard_block_hash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BeaconBlockHeader>(
                    "BeaconBlockHeader",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BeaconBlockHeader {
        static mut instance: ::protobuf::lazy::Lazy<BeaconBlockHeader> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BeaconBlockHeader,
        };
        unsafe {
            instance.get(BeaconBlockHeader::new)
        }
    }
}

impl ::protobuf::Clear for BeaconBlockHeader {
    fn clear(&mut self) {
        self.clear_parent_hash();
        self.clear_index();
        self.clear_authority_proposal();
        self.clear_shard_block_hash();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BeaconBlockHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BeaconBlockHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignedBeaconBlockHeader {
    // message fields
    pub body: ::protobuf::SingularPtrField<BeaconBlockHeader>,
    pub hash: ::std::vec::Vec<u8>,
    pub signature: ::protobuf::SingularPtrField<super::types::GroupSignature>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl SignedBeaconBlockHeader {
    pub fn new() -> SignedBeaconBlockHeader {
        ::std::default::Default::default()
    }

    // .BeaconBlockHeader body = 1;

    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    pub fn has_body(&self) -> bool {
        self.body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: BeaconBlockHeader) {
        self.body = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut BeaconBlockHeader {
        if self.body.is_none() {
            self.body.set_default();
        }
        self.body.as_mut().unwrap()
    }

    // Take field
    pub fn take_body(&mut self) -> BeaconBlockHeader {
        self.body.take().unwrap_or_else(|| BeaconBlockHeader::new())
    }

    pub fn get_body(&self) -> &BeaconBlockHeader {
        self.body.as_ref().unwrap_or_else(|| BeaconBlockHeader::default_instance())
    }

    // bytes hash = 2;

    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }

    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }

    // .GroupSignature signature = 3;

    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: super::types::GroupSignature) {
        self.signature = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut super::types::GroupSignature {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> super::types::GroupSignature {
        self.signature.take().unwrap_or_else(|| super::types::GroupSignature::new())
    }

    pub fn get_signature(&self) -> &super::types::GroupSignature {
        self.signature.as_ref().unwrap_or_else(|| super::types::GroupSignature::default_instance())
    }
}

impl ::protobuf::Message for SignedBeaconBlockHeader {
    fn is_initialized(&self) -> bool {
        for v in &self.body {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.signature {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.body)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.body.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.hash);
        }
        if let Some(ref v) = self.signature.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.body.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(2, &self.hash)?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignedBeaconBlockHeader {
        SignedBeaconBlockHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BeaconBlockHeader>>(
                    "body",
                    |m: &SignedBeaconBlockHeader| { &m.body },
                    |m: &mut SignedBeaconBlockHeader| { &mut m.body },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "hash",
                    |m: &SignedBeaconBlockHeader| { &m.hash },
                    |m: &mut SignedBeaconBlockHeader| { &mut m.hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::GroupSignature>>(
                    "signature",
                    |m: &SignedBeaconBlockHeader| { &m.signature },
                    |m: &mut SignedBeaconBlockHeader| { &mut m.signature },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SignedBeaconBlockHeader>(
                    "SignedBeaconBlockHeader",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SignedBeaconBlockHeader {
        static mut instance: ::protobuf::lazy::Lazy<SignedBeaconBlockHeader> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SignedBeaconBlockHeader,
        };
        unsafe {
            instance.get(SignedBeaconBlockHeader::new)
        }
    }
}

impl ::protobuf::Clear for SignedBeaconBlockHeader {
    fn clear(&mut self) {
        self.clear_body();
        self.clear_hash();
        self.clear_signature();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignedBeaconBlockHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedBeaconBlockHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BeaconBlock {
    // message fields
    pub header: ::protobuf::SingularPtrField<BeaconBlockHeader>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl BeaconBlock {
    pub fn new() -> BeaconBlock {
        ::std::default::Default::default()
    }

    // .BeaconBlockHeader header = 1;

    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: BeaconBlockHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut BeaconBlockHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> BeaconBlockHeader {
        self.header.take().unwrap_or_else(|| BeaconBlockHeader::new())
    }

    pub fn get_header(&self) -> &BeaconBlockHeader {
        self.header.as_ref().unwrap_or_else(|| BeaconBlockHeader::default_instance())
    }
}

impl ::protobuf::Message for BeaconBlock {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BeaconBlock {
        BeaconBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BeaconBlockHeader>>(
                    "header",
                    |m: &BeaconBlock| { &m.header },
                    |m: &mut BeaconBlock| { &mut m.header },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BeaconBlock>(
                    "BeaconBlock",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BeaconBlock {
        static mut instance: ::protobuf::lazy::Lazy<BeaconBlock> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BeaconBlock,
        };
        unsafe {
            instance.get(BeaconBlock::new)
        }
    }
}

impl ::protobuf::Clear for BeaconBlock {
    fn clear(&mut self) {
        self.clear_header();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BeaconBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BeaconBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignedBeaconBlock {
    // message fields
    pub body: ::protobuf::SingularPtrField<BeaconBlock>,
    pub hash: ::std::vec::Vec<u8>,
    pub signature: ::protobuf::SingularPtrField<super::types::GroupSignature>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl SignedBeaconBlock {
    pub fn new() -> SignedBeaconBlock {
        ::std::default::Default::default()
    }

    // .BeaconBlock body = 1;

    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    pub fn has_body(&self) -> bool {
        self.body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: BeaconBlock) {
        self.body = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut BeaconBlock {
        if self.body.is_none() {
            self.body.set_default();
        }
        self.body.as_mut().unwrap()
    }

    // Take field
    pub fn take_body(&mut self) -> BeaconBlock {
        self.body.take().unwrap_or_else(|| BeaconBlock::new())
    }

    pub fn get_body(&self) -> &BeaconBlock {
        self.body.as_ref().unwrap_or_else(|| BeaconBlock::default_instance())
    }

    // bytes hash = 2;

    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }

    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }

    // .GroupSignature signature = 3;

    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: super::types::GroupSignature) {
        self.signature = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut super::types::GroupSignature {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> super::types::GroupSignature {
        self.signature.take().unwrap_or_else(|| super::types::GroupSignature::new())
    }

    pub fn get_signature(&self) -> &super::types::GroupSignature {
        self.signature.as_ref().unwrap_or_else(|| super::types::GroupSignature::default_instance())
    }
}

impl ::protobuf::Message for SignedBeaconBlock {
    fn is_initialized(&self) -> bool {
        for v in &self.body {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.signature {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.body)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.body.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.hash);
        }
        if let Some(ref v) = self.signature.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.body.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(2, &self.hash)?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignedBeaconBlock {
        SignedBeaconBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BeaconBlock>>(
                    "body",
                    |m: &SignedBeaconBlock| { &m.body },
                    |m: &mut SignedBeaconBlock| { &mut m.body },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "hash",
                    |m: &SignedBeaconBlock| { &m.hash },
                    |m: &mut SignedBeaconBlock| { &mut m.hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::types::GroupSignature>>(
                    "signature",
                    |m: &SignedBeaconBlock| { &m.signature },
                    |m: &mut SignedBeaconBlock| { &mut m.signature },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SignedBeaconBlock>(
                    "SignedBeaconBlock",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SignedBeaconBlock {
        static mut instance: ::protobuf::lazy::Lazy<SignedBeaconBlock> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SignedBeaconBlock,
        };
        unsafe {
            instance.get(SignedBeaconBlock::new)
        }
    }
}

impl ::protobuf::Clear for SignedBeaconBlock {
    fn clear(&mut self) {
        self.clear_body();
        self.clear_hash();
        self.clear_signature();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignedBeaconBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedBeaconBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChainPayload {
    // message fields
    pub transactions: ::protobuf::RepeatedField<super::signed_transaction::SignedTransaction>,
    pub receipts: ::protobuf::RepeatedField<ReceiptBlock>,
    pub hash: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ChainPayload {
    pub fn new() -> ChainPayload {
        ::std::default::Default::default()
    }

    // repeated .SignedTransaction transactions = 1;

    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<super::signed_transaction::SignedTransaction>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<super::signed_transaction::SignedTransaction> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<super::signed_transaction::SignedTransaction> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }

    pub fn get_transactions(&self) -> &[super::signed_transaction::SignedTransaction] {
        &self.transactions
    }

    // repeated .ReceiptBlock receipts = 2;

    pub fn clear_receipts(&mut self) {
        self.receipts.clear();
    }

    // Param is passed by value, moved
    pub fn set_receipts(&mut self, v: ::protobuf::RepeatedField<ReceiptBlock>) {
        self.receipts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_receipts(&mut self) -> &mut ::protobuf::RepeatedField<ReceiptBlock> {
        &mut self.receipts
    }

    // Take field
    pub fn take_receipts(&mut self) -> ::protobuf::RepeatedField<ReceiptBlock> {
        ::std::mem::replace(&mut self.receipts, ::protobuf::RepeatedField::new())
    }

    pub fn get_receipts(&self) -> &[ReceiptBlock] {
        &self.receipts
    }

    // bytes hash = 3;

    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }

    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }
}

impl ::protobuf::Message for ChainPayload {
    fn is_initialized(&self) -> bool {
        for v in &self.transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.receipts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transactions)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.receipts)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.receipts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.transactions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.receipts {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.hash.is_empty() {
            os.write_bytes(3, &self.hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChainPayload {
        ChainPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::signed_transaction::SignedTransaction>>(
                    "transactions",
                    |m: &ChainPayload| { &m.transactions },
                    |m: &mut ChainPayload| { &mut m.transactions },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ReceiptBlock>>(
                    "receipts",
                    |m: &ChainPayload| { &m.receipts },
                    |m: &mut ChainPayload| { &mut m.receipts },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "hash",
                    |m: &ChainPayload| { &m.hash },
                    |m: &mut ChainPayload| { &mut m.hash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ChainPayload>(
                    "ChainPayload",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ChainPayload {
        static mut instance: ::protobuf::lazy::Lazy<ChainPayload> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ChainPayload,
        };
        unsafe {
            instance.get(ChainPayload::new)
        }
    }
}

impl ::protobuf::Clear for ChainPayload {
    fn clear(&mut self) {
        self.clear_transactions();
        self.clear_receipts();
        self.clear_hash();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChainPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChainPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CoupledBlock {
    // message fields
    pub beacon_block: ::protobuf::SingularPtrField<SignedBeaconBlock>,
    pub shard_block: ::protobuf::SingularPtrField<SignedShardBlock>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CoupledBlock {
    pub fn new() -> CoupledBlock {
        ::std::default::Default::default()
    }

    // .SignedBeaconBlock beacon_block = 1;

    pub fn clear_beacon_block(&mut self) {
        self.beacon_block.clear();
    }

    pub fn has_beacon_block(&self) -> bool {
        self.beacon_block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_beacon_block(&mut self, v: SignedBeaconBlock) {
        self.beacon_block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_beacon_block(&mut self) -> &mut SignedBeaconBlock {
        if self.beacon_block.is_none() {
            self.beacon_block.set_default();
        }
        self.beacon_block.as_mut().unwrap()
    }

    // Take field
    pub fn take_beacon_block(&mut self) -> SignedBeaconBlock {
        self.beacon_block.take().unwrap_or_else(|| SignedBeaconBlock::new())
    }

    pub fn get_beacon_block(&self) -> &SignedBeaconBlock {
        self.beacon_block.as_ref().unwrap_or_else(|| SignedBeaconBlock::default_instance())
    }

    // .SignedShardBlock shard_block = 2;

    pub fn clear_shard_block(&mut self) {
        self.shard_block.clear();
    }

    pub fn has_shard_block(&self) -> bool {
        self.shard_block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shard_block(&mut self, v: SignedShardBlock) {
        self.shard_block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_shard_block(&mut self) -> &mut SignedShardBlock {
        if self.shard_block.is_none() {
            self.shard_block.set_default();
        }
        self.shard_block.as_mut().unwrap()
    }

    // Take field
    pub fn take_shard_block(&mut self) -> SignedShardBlock {
        self.shard_block.take().unwrap_or_else(|| SignedShardBlock::new())
    }

    pub fn get_shard_block(&self) -> &SignedShardBlock {
        self.shard_block.as_ref().unwrap_or_else(|| SignedShardBlock::default_instance())
    }
}

impl ::protobuf::Message for CoupledBlock {
    fn is_initialized(&self) -> bool {
        for v in &self.beacon_block {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.shard_block {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.beacon_block)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.shard_block)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.beacon_block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.shard_block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.beacon_block.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.shard_block.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CoupledBlock {
        CoupledBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SignedBeaconBlock>>(
                    "beacon_block",
                    |m: &CoupledBlock| { &m.beacon_block },
                    |m: &mut CoupledBlock| { &mut m.beacon_block },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SignedShardBlock>>(
                    "shard_block",
                    |m: &CoupledBlock| { &m.shard_block },
                    |m: &mut CoupledBlock| { &mut m.shard_block },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CoupledBlock>(
                    "CoupledBlock",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CoupledBlock {
        static mut instance: ::protobuf::lazy::Lazy<CoupledBlock> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CoupledBlock,
        };
        unsafe {
            instance.get(CoupledBlock::new)
        }
    }
}

impl ::protobuf::Clear for CoupledBlock {
    fn clear(&mut self) {
        self.clear_beacon_block();
        self.clear_shard_block();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CoupledBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CoupledBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12protos/chain.proto\x1a\x12protos/types.proto\x1a\x14protos/receipt\
    .proto\x1a\x1fprotos/signed_transaction.proto\"N\n\nChainState\x12!\n\
    \x0cgenesis_hash\x18\x01\x20\x01(\x0cR\x0bgenesisHash\x12\x1d\n\nlast_in\
    dex\x18\x02\x20\x01(\x04R\tlastIndex\"\xcb\x01\n\x10ShardBlockHeader\x12\
    \x1f\n\x0bparent_hash\x18\x01\x20\x01(\x0cR\nparentHash\x12\x19\n\x08sha\
    rd_id\x18\x02\x20\x01(\rR\x07shardId\x12\x1f\n\x0bblock_index\x18\x03\
    \x20\x01(\x04R\nblockIndex\x12*\n\x11merkle_root_state\x18\x04\x20\x01(\
    \x0cR\x0fmerkleRootState\x12.\n\x13receipt_merkle_root\x18\x05\x20\x01(\
    \x0cR\x11receiptMerkleRoot\"\x82\x01\n\x16SignedShardBlockHeader\x12%\n\
    \x04body\x18\x01\x20\x01(\x0b2\x11.ShardBlockHeaderR\x04body\x12\x12\n\
    \x04hash\x18\x02\x20\x01(\x0cR\x04hash\x12-\n\tsignature\x18\x03\x20\x01\
    (\x0b2\x0f.GroupSignatureR\tsignature\"\xa5\x01\n\x0cReceiptBlock\x12/\n\
    \x06header\x18\x01\x20\x01(\x0b2\x17.SignedShardBlockHeaderR\x06header\
    \x12\x1f\n\x04path\x18\x02\x20\x03(\x0b2\x0b.MerkleNodeR\x04path\x12/\n\
    \x08receipts\x18\x03\x20\x03(\x0b2\x13.ReceiptTransactionR\x08receipts\
    \x12\x12\n\x04hash\x18\x04\x20\x01(\x0cR\x04hash\"\x9a\x01\n\nShardBlock\
    \x12)\n\x06header\x18\x01\x20\x01(\x0b2\x11.ShardBlockHeaderR\x06header\
    \x126\n\x0ctransactions\x18\x02\x20\x03(\x0b2\x12.SignedTransactionR\x0c\
    transactions\x12)\n\x08receipts\x18\x03\x20\x03(\x0b2\r.ReceiptBlockR\
    \x08receipts\"v\n\x10SignedShardBlock\x12\x1f\n\x04body\x18\x01\x20\x01(\
    \x0b2\x0b.ShardBlockR\x04body\x12\x12\n\x04hash\x18\x02\x20\x01(\x0cR\
    \x04hash\x12-\n\tsignature\x18\x03\x20\x01(\x0b2\x0f.GroupSignatureR\tsi\
    gnature\"\xb4\x01\n\x11BeaconBlockHeader\x12\x1f\n\x0bparent_hash\x18\
    \x01\x20\x01(\x0cR\nparentHash\x12\x14\n\x05index\x18\x02\x20\x01(\x04R\
    \x05index\x12>\n\x12authority_proposal\x18\x03\x20\x03(\x0b2\x0f.Authori\
    tyStakeR\x11authorityProposal\x12(\n\x10shard_block_hash\x18\x04\x20\x01\
    (\x0cR\x0eshardBlockHash\"\x84\x01\n\x17SignedBeaconBlockHeader\x12&\n\
    \x04body\x18\x01\x20\x01(\x0b2\x12.BeaconBlockHeaderR\x04body\x12\x12\n\
    \x04hash\x18\x02\x20\x01(\x0cR\x04hash\x12-\n\tsignature\x18\x03\x20\x01\
    (\x0b2\x0f.GroupSignatureR\tsignature\"9\n\x0bBeaconBlock\x12*\n\x06head\
    er\x18\x01\x20\x01(\x0b2\x12.BeaconBlockHeaderR\x06header\"x\n\x11Signed\
    BeaconBlock\x12\x20\n\x04body\x18\x01\x20\x01(\x0b2\x0c.BeaconBlockR\x04\
    body\x12\x12\n\x04hash\x18\x02\x20\x01(\x0cR\x04hash\x12-\n\tsignature\
    \x18\x03\x20\x01(\x0b2\x0f.GroupSignatureR\tsignature\"\x85\x01\n\x0cCha\
    inPayload\x126\n\x0ctransactions\x18\x01\x20\x03(\x0b2\x12.SignedTransac\
    tionR\x0ctransactions\x12)\n\x08receipts\x18\x02\x20\x03(\x0b2\r.Receipt\
    BlockR\x08receipts\x12\x12\n\x04hash\x18\x03\x20\x01(\x0cR\x04hash\"y\n\
    \x0cCoupledBlock\x125\n\x0cbeacon_block\x18\x01\x20\x01(\x0b2\x12.Signed\
    BeaconBlockR\x0bbeaconBlock\x122\n\x0bshard_block\x18\x02\x20\x01(\x0b2\
    \x11.SignedShardBlockR\nshardBlockb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
