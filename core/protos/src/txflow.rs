// This file is generated by rust-protobuf 2.2.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Endorsement {
    // message fields
    epoch: ::std::option::Option<u64>,
    signature: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl Endorsement {
    pub fn new() -> Endorsement {
        ::std::default::Default::default()
    }

    // required uint64 epoch = 1;

    pub fn clear_epoch(&mut self) {
        self.epoch = ::std::option::Option::None;
    }

    pub fn has_epoch(&self) -> bool {
        self.epoch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: u64) {
        self.epoch = ::std::option::Option::Some(v);
    }

    pub fn get_epoch(&self) -> u64 {
        self.epoch.unwrap_or(0)
    }

    // required bytes signature = 2;

    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature.set_default();
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for Endorsement {
    fn is_initialized(&self) -> bool {
        if self.epoch.is_none() {
            return false;
        }
        if self.signature.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.epoch = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.epoch {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.epoch {
            os.write_uint64(1, v)?;
        }
        if let Some(ref v) = self.signature.as_ref() {
            os.write_bytes(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Endorsement {
        Endorsement::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "epoch",
                    |m: &Endorsement| { &m.epoch },
                    |m: &mut Endorsement| { &mut m.epoch },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "signature",
                    |m: &Endorsement| { &m.signature },
                    |m: &mut Endorsement| { &mut m.signature },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Endorsement>(
                    "Endorsement",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Endorsement {
        static mut instance: ::protobuf::lazy::Lazy<Endorsement> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Endorsement,
        };
        unsafe {
            instance.get(Endorsement::new)
        }
    }
}

impl ::protobuf::Clear for Endorsement {
    fn clear(&mut self) {
        self.clear_epoch();
        self.clear_signature();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Endorsement {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Endorsement {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct MessageDataBody {
    // message fields
    owner_uid: ::std::option::Option<u64>,
    parents: ::std::vec::Vec<u64>,
    epoch: ::std::option::Option<u64>,
    payload: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    endorsements: ::protobuf::RepeatedField<Endorsement>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl MessageDataBody {
    pub fn new() -> MessageDataBody {
        ::std::default::Default::default()
    }

    // required uint64 owner_uid = 1;

    pub fn clear_owner_uid(&mut self) {
        self.owner_uid = ::std::option::Option::None;
    }

    pub fn has_owner_uid(&self) -> bool {
        self.owner_uid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_owner_uid(&mut self, v: u64) {
        self.owner_uid = ::std::option::Option::Some(v);
    }

    pub fn get_owner_uid(&self) -> u64 {
        self.owner_uid.unwrap_or(0)
    }

    // repeated uint64 parents = 2;

    pub fn clear_parents(&mut self) {
        self.parents.clear();
    }

    // Param is passed by value, moved
    pub fn set_parents(&mut self, v: ::std::vec::Vec<u64>) {
        self.parents = v;
    }

    // Mutable pointer to the field.
    pub fn mut_parents(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.parents
    }

    // Take field
    pub fn take_parents(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.parents, ::std::vec::Vec::new())
    }

    pub fn get_parents(&self) -> &[u64] {
        &self.parents
    }

    // required uint64 epoch = 3;

    pub fn clear_epoch(&mut self) {
        self.epoch = ::std::option::Option::None;
    }

    pub fn has_epoch(&self) -> bool {
        self.epoch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: u64) {
        self.epoch = ::std::option::Option::Some(v);
    }

    pub fn get_epoch(&self) -> u64 {
        self.epoch.unwrap_or(0)
    }

    // required bytes payload = 4;

    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.payload.is_none() {
            self.payload.set_default();
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        self.payload.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_payload(&self) -> &[u8] {
        match self.payload.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // repeated .Endorsement endorsements = 5;

    pub fn clear_endorsements(&mut self) {
        self.endorsements.clear();
    }

    // Param is passed by value, moved
    pub fn set_endorsements(&mut self, v: ::protobuf::RepeatedField<Endorsement>) {
        self.endorsements = v;
    }

    // Mutable pointer to the field.
    pub fn mut_endorsements(&mut self) -> &mut ::protobuf::RepeatedField<Endorsement> {
        &mut self.endorsements
    }

    // Take field
    pub fn take_endorsements(&mut self) -> ::protobuf::RepeatedField<Endorsement> {
        ::std::mem::replace(&mut self.endorsements, ::protobuf::RepeatedField::new())
    }

    pub fn get_endorsements(&self) -> &[Endorsement] {
        &self.endorsements
    }
}

impl ::protobuf::Message for MessageDataBody {
    fn is_initialized(&self) -> bool {
        if self.owner_uid.is_none() {
            return false;
        }
        if self.epoch.is_none() {
            return false;
        }
        if self.payload.is_none() {
            return false;
        }
        for v in &self.endorsements {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.owner_uid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.parents)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.epoch = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.payload)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.endorsements)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.owner_uid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.parents {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(v) = self.epoch {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.payload.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        for value in &self.endorsements {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.owner_uid {
            os.write_uint64(1, v)?;
        }
        for v in &self.parents {
            os.write_uint64(2, *v)?;
        };
        if let Some(v) = self.epoch {
            os.write_uint64(3, v)?;
        }
        if let Some(ref v) = self.payload.as_ref() {
            os.write_bytes(4, &v)?;
        }
        for v in &self.endorsements {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MessageDataBody {
        MessageDataBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "owner_uid",
                    |m: &MessageDataBody| { &m.owner_uid },
                    |m: &mut MessageDataBody| { &mut m.owner_uid },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "parents",
                    |m: &MessageDataBody| { &m.parents },
                    |m: &mut MessageDataBody| { &mut m.parents },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "epoch",
                    |m: &MessageDataBody| { &m.epoch },
                    |m: &mut MessageDataBody| { &mut m.epoch },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "payload",
                    |m: &MessageDataBody| { &m.payload },
                    |m: &mut MessageDataBody| { &mut m.payload },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Endorsement>>(
                    "endorsements",
                    |m: &MessageDataBody| { &m.endorsements },
                    |m: &mut MessageDataBody| { &mut m.endorsements },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MessageDataBody>(
                    "MessageDataBody",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MessageDataBody {
        static mut instance: ::protobuf::lazy::Lazy<MessageDataBody> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MessageDataBody,
        };
        unsafe {
            instance.get(MessageDataBody::new)
        }
    }
}

impl ::protobuf::Clear for MessageDataBody {
    fn clear(&mut self) {
        self.clear_owner_uid();
        self.clear_parents();
        self.clear_epoch();
        self.clear_payload();
        self.clear_endorsements();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MessageDataBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageDataBody {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SignedMessageData {
    // message fields
    body: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    hash: ::std::option::Option<u64>,
    owner_sig: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl SignedMessageData {
    pub fn new() -> SignedMessageData {
        ::std::default::Default::default()
    }

    // required bytes body = 1;

    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    pub fn has_body(&self) -> bool {
        self.body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.body = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.body.is_none() {
            self.body.set_default();
        }
        self.body.as_mut().unwrap()
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::vec::Vec<u8> {
        self.body.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_body(&self) -> &[u8] {
        match self.body.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // required uint64 hash = 2;

    pub fn clear_hash(&mut self) {
        self.hash = ::std::option::Option::None;
    }

    pub fn has_hash(&self) -> bool {
        self.hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: u64) {
        self.hash = ::std::option::Option::Some(v);
    }

    pub fn get_hash(&self) -> u64 {
        self.hash.unwrap_or(0)
    }

    // required bytes owner_sig = 3;

    pub fn clear_owner_sig(&mut self) {
        self.owner_sig.clear();
    }

    pub fn has_owner_sig(&self) -> bool {
        self.owner_sig.is_some()
    }

    // Param is passed by value, moved
    pub fn set_owner_sig(&mut self, v: ::std::vec::Vec<u8>) {
        self.owner_sig = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_owner_sig(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.owner_sig.is_none() {
            self.owner_sig.set_default();
        }
        self.owner_sig.as_mut().unwrap()
    }

    // Take field
    pub fn take_owner_sig(&mut self) -> ::std::vec::Vec<u8> {
        self.owner_sig.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_owner_sig(&self) -> &[u8] {
        match self.owner_sig.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
}

impl ::protobuf::Message for SignedMessageData {
    fn is_initialized(&self) -> bool {
        if self.body.is_none() {
            return false;
        }
        if self.hash.is_none() {
            return false;
        }
        if self.owner_sig.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.body)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.hash = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.owner_sig)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.body.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.hash {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.owner_sig.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.body.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(v) = self.hash {
            os.write_uint64(2, v)?;
        }
        if let Some(ref v) = self.owner_sig.as_ref() {
            os.write_bytes(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignedMessageData {
        SignedMessageData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "body",
                    |m: &SignedMessageData| { &m.body },
                    |m: &mut SignedMessageData| { &mut m.body },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "hash",
                    |m: &SignedMessageData| { &m.hash },
                    |m: &mut SignedMessageData| { &mut m.hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "owner_sig",
                    |m: &SignedMessageData| { &m.owner_sig },
                    |m: &mut SignedMessageData| { &mut m.owner_sig },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SignedMessageData>(
                    "SignedMessageData",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SignedMessageData {
        static mut instance: ::protobuf::lazy::Lazy<SignedMessageData> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SignedMessageData,
        };
        unsafe {
            instance.get(SignedMessageData::new)
        }
    }
}

impl ::protobuf::Clear for SignedMessageData {
    fn clear(&mut self) {
        self.clear_body();
        self.clear_hash();
        self.clear_owner_sig();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignedMessageData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedMessageData {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ConsensusBlockBody {
    // message fields
    messages: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl ConsensusBlockBody {
    pub fn new() -> ConsensusBlockBody {
        ::std::default::Default::default()
    }

    // repeated bytes messages = 1;

    pub fn clear_messages(&mut self) {
        self.messages.clear();
    }

    // Param is passed by value, moved
    pub fn set_messages(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.messages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_messages(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.messages
    }

    // Take field
    pub fn take_messages(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.messages, ::protobuf::RepeatedField::new())
    }

    pub fn get_messages(&self) -> &[::std::vec::Vec<u8>] {
        &self.messages
    }
}

impl ::protobuf::Message for ConsensusBlockBody {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.messages)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.messages {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.messages {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusBlockBody {
        ConsensusBlockBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "messages",
                    |m: &ConsensusBlockBody| { &m.messages },
                    |m: &mut ConsensusBlockBody| { &mut m.messages },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConsensusBlockBody>(
                    "ConsensusBlockBody",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConsensusBlockBody {
        static mut instance: ::protobuf::lazy::Lazy<ConsensusBlockBody> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConsensusBlockBody,
        };
        unsafe {
            instance.get(ConsensusBlockBody::new)
        }
    }
}

impl ::protobuf::Clear for ConsensusBlockBody {
    fn clear(&mut self) {
        self.clear_messages();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusBlockBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusBlockBody {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Fetch {
    // message fields
    hashes: ::std::vec::Vec<u64>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl Fetch {
    pub fn new() -> Fetch {
        ::std::default::Default::default()
    }

    // repeated uint64 hashes = 1;

    pub fn clear_hashes(&mut self) {
        self.hashes.clear();
    }

    // Param is passed by value, moved
    pub fn set_hashes(&mut self, v: ::std::vec::Vec<u64>) {
        self.hashes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_hashes(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.hashes
    }

    // Take field
    pub fn take_hashes(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.hashes, ::std::vec::Vec::new())
    }

    pub fn get_hashes(&self) -> &[u64] {
        &self.hashes
    }
}

impl ::protobuf::Message for Fetch {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.hashes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.hashes {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.hashes {
            os.write_uint64(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Fetch {
        Fetch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "hashes",
                    |m: &Fetch| { &m.hashes },
                    |m: &mut Fetch| { &mut m.hashes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Fetch>(
                    "Fetch",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Fetch {
        static mut instance: ::protobuf::lazy::Lazy<Fetch> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Fetch,
        };
        unsafe {
            instance.get(Fetch::new)
        }
    }
}

impl ::protobuf::Clear for Fetch {
    fn clear(&mut self) {
        self.clear_hashes();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Fetch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Fetch {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct FetchReply {
    // message fields
    messages: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl FetchReply {
    pub fn new() -> FetchReply {
        ::std::default::Default::default()
    }

    // repeated bytes messages = 1;

    pub fn clear_messages(&mut self) {
        self.messages.clear();
    }

    // Param is passed by value, moved
    pub fn set_messages(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.messages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_messages(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.messages
    }

    // Take field
    pub fn take_messages(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.messages, ::protobuf::RepeatedField::new())
    }

    pub fn get_messages(&self) -> &[::std::vec::Vec<u8>] {
        &self.messages
    }
}

impl ::protobuf::Message for FetchReply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.messages)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.messages {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.messages {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FetchReply {
        FetchReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "messages",
                    |m: &FetchReply| { &m.messages },
                    |m: &mut FetchReply| { &mut m.messages },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FetchReply>(
                    "FetchReply",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FetchReply {
        static mut instance: ::protobuf::lazy::Lazy<FetchReply> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FetchReply,
        };
        unsafe {
            instance.get(FetchReply::new)
        }
    }
}

impl ::protobuf::Clear for FetchReply {
    fn clear(&mut self) {
        self.clear_messages();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FetchReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FetchReply {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct Gossip {
    // message fields
    sender_uid: ::std::option::Option<u64>,
    receiver_uid: ::std::option::Option<u64>,
    sender_sig: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // message oneof groups
    pub body: ::std::option::Option<Gossip_oneof_body>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum Gossip_oneof_body {
    unsolicited(::std::vec::Vec<u8>),
    unsolicited_reply(::std::vec::Vec<u8>),
    fetch(Fetch),
    fetch_reply(FetchReply),
}

impl Gossip {
    pub fn new() -> Gossip {
        ::std::default::Default::default()
    }

    // required uint64 sender_uid = 1;

    pub fn clear_sender_uid(&mut self) {
        self.sender_uid = ::std::option::Option::None;
    }

    pub fn has_sender_uid(&self) -> bool {
        self.sender_uid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sender_uid(&mut self, v: u64) {
        self.sender_uid = ::std::option::Option::Some(v);
    }

    pub fn get_sender_uid(&self) -> u64 {
        self.sender_uid.unwrap_or(0)
    }

    // required uint64 receiver_uid = 2;

    pub fn clear_receiver_uid(&mut self) {
        self.receiver_uid = ::std::option::Option::None;
    }

    pub fn has_receiver_uid(&self) -> bool {
        self.receiver_uid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_receiver_uid(&mut self, v: u64) {
        self.receiver_uid = ::std::option::Option::Some(v);
    }

    pub fn get_receiver_uid(&self) -> u64 {
        self.receiver_uid.unwrap_or(0)
    }

    // required bytes sender_sig = 3;

    pub fn clear_sender_sig(&mut self) {
        self.sender_sig.clear();
    }

    pub fn has_sender_sig(&self) -> bool {
        self.sender_sig.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sender_sig(&mut self, v: ::std::vec::Vec<u8>) {
        self.sender_sig = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender_sig(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.sender_sig.is_none() {
            self.sender_sig.set_default();
        }
        self.sender_sig.as_mut().unwrap()
    }

    // Take field
    pub fn take_sender_sig(&mut self) -> ::std::vec::Vec<u8> {
        self.sender_sig.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    pub fn get_sender_sig(&self) -> &[u8] {
        match self.sender_sig.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }

    // optional bytes unsolicited = 4;

    pub fn clear_unsolicited(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_unsolicited(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(Gossip_oneof_body::unsolicited(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_unsolicited(&mut self, v: ::std::vec::Vec<u8>) {
        self.body = ::std::option::Option::Some(Gossip_oneof_body::unsolicited(v))
    }

    // Mutable pointer to the field.
    pub fn mut_unsolicited(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(Gossip_oneof_body::unsolicited(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(Gossip_oneof_body::unsolicited(::std::vec::Vec::new()));
        }
        match self.body {
            ::std::option::Option::Some(Gossip_oneof_body::unsolicited(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_unsolicited(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_unsolicited() {
            match self.body.take() {
                ::std::option::Option::Some(Gossip_oneof_body::unsolicited(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    pub fn get_unsolicited(&self) -> &[u8] {
        match self.body {
            ::std::option::Option::Some(Gossip_oneof_body::unsolicited(ref v)) => v,
            _ => &[],
        }
    }

    // optional bytes unsolicited_reply = 5;

    pub fn clear_unsolicited_reply(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_unsolicited_reply(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(Gossip_oneof_body::unsolicited_reply(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_unsolicited_reply(&mut self, v: ::std::vec::Vec<u8>) {
        self.body = ::std::option::Option::Some(Gossip_oneof_body::unsolicited_reply(v))
    }

    // Mutable pointer to the field.
    pub fn mut_unsolicited_reply(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(Gossip_oneof_body::unsolicited_reply(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(Gossip_oneof_body::unsolicited_reply(::std::vec::Vec::new()));
        }
        match self.body {
            ::std::option::Option::Some(Gossip_oneof_body::unsolicited_reply(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_unsolicited_reply(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_unsolicited_reply() {
            match self.body.take() {
                ::std::option::Option::Some(Gossip_oneof_body::unsolicited_reply(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    pub fn get_unsolicited_reply(&self) -> &[u8] {
        match self.body {
            ::std::option::Option::Some(Gossip_oneof_body::unsolicited_reply(ref v)) => v,
            _ => &[],
        }
    }

    // optional .Fetch fetch = 6;

    pub fn clear_fetch(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_fetch(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(Gossip_oneof_body::fetch(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fetch(&mut self, v: Fetch) {
        self.body = ::std::option::Option::Some(Gossip_oneof_body::fetch(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fetch(&mut self) -> &mut Fetch {
        if let ::std::option::Option::Some(Gossip_oneof_body::fetch(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(Gossip_oneof_body::fetch(Fetch::new()));
        }
        match self.body {
            ::std::option::Option::Some(Gossip_oneof_body::fetch(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fetch(&mut self) -> Fetch {
        if self.has_fetch() {
            match self.body.take() {
                ::std::option::Option::Some(Gossip_oneof_body::fetch(v)) => v,
                _ => panic!(),
            }
        } else {
            Fetch::new()
        }
    }

    pub fn get_fetch(&self) -> &Fetch {
        match self.body {
            ::std::option::Option::Some(Gossip_oneof_body::fetch(ref v)) => v,
            _ => Fetch::default_instance(),
        }
    }

    // optional .FetchReply fetch_reply = 7;

    pub fn clear_fetch_reply(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_fetch_reply(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(Gossip_oneof_body::fetch_reply(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fetch_reply(&mut self, v: FetchReply) {
        self.body = ::std::option::Option::Some(Gossip_oneof_body::fetch_reply(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fetch_reply(&mut self) -> &mut FetchReply {
        if let ::std::option::Option::Some(Gossip_oneof_body::fetch_reply(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(Gossip_oneof_body::fetch_reply(FetchReply::new()));
        }
        match self.body {
            ::std::option::Option::Some(Gossip_oneof_body::fetch_reply(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fetch_reply(&mut self) -> FetchReply {
        if self.has_fetch_reply() {
            match self.body.take() {
                ::std::option::Option::Some(Gossip_oneof_body::fetch_reply(v)) => v,
                _ => panic!(),
            }
        } else {
            FetchReply::new()
        }
    }

    pub fn get_fetch_reply(&self) -> &FetchReply {
        match self.body {
            ::std::option::Option::Some(Gossip_oneof_body::fetch_reply(ref v)) => v,
            _ => FetchReply::default_instance(),
        }
    }
}

impl ::protobuf::Message for Gossip {
    fn is_initialized(&self) -> bool {
        if self.sender_uid.is_none() {
            return false;
        }
        if self.receiver_uid.is_none() {
            return false;
        }
        if self.sender_sig.is_none() {
            return false;
        }
        if let Some(Gossip_oneof_body::fetch(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Gossip_oneof_body::fetch_reply(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sender_uid = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.receiver_uid = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.sender_sig)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(Gossip_oneof_body::unsolicited(is.read_bytes()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(Gossip_oneof_body::unsolicited_reply(is.read_bytes()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(Gossip_oneof_body::fetch(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(Gossip_oneof_body::fetch_reply(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.sender_uid {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.receiver_uid {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.sender_sig.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &Gossip_oneof_body::unsolicited(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(4, &v);
                },
                &Gossip_oneof_body::unsolicited_reply(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(5, &v);
                },
                &Gossip_oneof_body::fetch(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Gossip_oneof_body::fetch_reply(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.sender_uid {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.receiver_uid {
            os.write_uint64(2, v)?;
        }
        if let Some(ref v) = self.sender_sig.as_ref() {
            os.write_bytes(3, &v)?;
        }
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &Gossip_oneof_body::unsolicited(ref v) => {
                    os.write_bytes(4, v)?;
                },
                &Gossip_oneof_body::unsolicited_reply(ref v) => {
                    os.write_bytes(5, v)?;
                },
                &Gossip_oneof_body::fetch(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Gossip_oneof_body::fetch_reply(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Gossip {
        Gossip::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "sender_uid",
                    |m: &Gossip| { &m.sender_uid },
                    |m: &mut Gossip| { &mut m.sender_uid },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "receiver_uid",
                    |m: &Gossip| { &m.receiver_uid },
                    |m: &mut Gossip| { &mut m.receiver_uid },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "sender_sig",
                    |m: &Gossip| { &m.sender_sig },
                    |m: &mut Gossip| { &mut m.sender_sig },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "unsolicited",
                    Gossip::has_unsolicited,
                    Gossip::get_unsolicited,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "unsolicited_reply",
                    Gossip::has_unsolicited_reply,
                    Gossip::get_unsolicited_reply,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Fetch>(
                    "fetch",
                    Gossip::has_fetch,
                    Gossip::get_fetch,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, FetchReply>(
                    "fetch_reply",
                    Gossip::has_fetch_reply,
                    Gossip::get_fetch_reply,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Gossip>(
                    "Gossip",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Gossip {
        static mut instance: ::protobuf::lazy::Lazy<Gossip> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Gossip,
        };
        unsafe {
            instance.get(Gossip::new)
        }
    }
}

impl ::protobuf::Clear for Gossip {
    fn clear(&mut self) {
        self.clear_sender_uid();
        self.clear_receiver_uid();
        self.clear_sender_sig();
        self.clear_unsolicited();
        self.clear_unsolicited_reply();
        self.clear_fetch();
        self.clear_fetch_reply();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Gossip {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Gossip {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ctxflow.proto\"/\n\x0bEndorsement\x12\r\n\x05epoch\x18\x01\x20\x02(\
    \x04\x12\x11\n\tsignature\x18\x02\x20\x02(\x0c\"y\n\x0fMessageDataBody\
    \x12\x11\n\towner_uid\x18\x01\x20\x02(\x04\x12\x0f\n\x07parents\x18\x02\
    \x20\x03(\x04\x12\r\n\x05epoch\x18\x03\x20\x02(\x04\x12\x0f\n\x07payload\
    \x18\x04\x20\x02(\x0c\x12\"\n\x0cendorsements\x18\x05\x20\x03(\x0b2\x0c.\
    Endorsement\"B\n\x11SignedMessageData\x12\x0c\n\x04body\x18\x01\x20\x02(\
    \x0c\x12\x0c\n\x04hash\x18\x02\x20\x02(\x04\x12\x11\n\towner_sig\x18\x03\
    \x20\x02(\x0c\"&\n\x12ConsensusBlockBody\x12\x10\n\x08messages\x18\x01\
    \x20\x03(\x0c\"\x17\n\x05Fetch\x12\x0e\n\x06hashes\x18\x01\x20\x03(\x04\
    \"\x1e\n\nFetchReply\x12\x10\n\x08messages\x18\x01\x20\x03(\x0c\"\xbf\
    \x01\n\x06Gossip\x12\x12\n\nsender_uid\x18\x01\x20\x02(\x04\x12\x14\n\
    \x0creceiver_uid\x18\x02\x20\x02(\x04\x12\x12\n\nsender_sig\x18\x03\x20\
    \x02(\x0c\x12\x15\n\x0bunsolicited\x18\x04\x20\x01(\x0cH\0\x12\x1b\n\x11\
    unsolicited_reply\x18\x05\x20\x01(\x0cH\0\x12\x17\n\x05fetch\x18\x06\x20\
    \x01(\x0b2\x06.FetchH\0\x12\"\n\x0bfetch_reply\x18\x07\x20\x01(\x0b2\x0b\
    .FetchReplyH\0B\x06\n\x04body\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
