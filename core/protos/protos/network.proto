syntax = "proto3";

import "types.proto";
import "chain.proto";
import "signed_transaction.proto";
import "receipt.proto";
import "wrappers.proto";

message PeerInfo {
    bytes id = 1;
    google.protobuf.StringValue addr = 2;
    google.protobuf.StringValue account_id = 3;
}

message PeerChainInfo {
    bytes genesis = 1;
    uint64 height = 2;
    uint64 total_weight = 3;
}

message Handshake {
    uint32 version = 1;
    bytes peer_id = 2;
    google.protobuf.UInt32Value listen_port = 4;
    PeerChainInfo chain_info = 5;
}

message PeersResponse {
    repeated PeerInfo peers = 1;
}

message BlockApproval {
    string account_id = 1;
    bytes hash = 2;
    bytes signature = 3;
}

message BlockHeaderRequest {
    repeated bytes hashes = 1;
}

message BlockHeaders {
    repeated BlockHeader headers = 1;
}

message StateRequest {
    uint64 shard_id = 1;
    bytes hash = 2;
}

message StateResponseReceipts {
    bytes hash = 1;
    repeated ReceiptTransaction receipts = 2;
}

message StateResponse {
    uint64 shard_id = 1;
    bytes hash = 2;
    bytes prev_state_root = 3;
    uint64 prev_gas_used = 4;
    uint64 prev_gas_limit = 5;
    repeated ValidatorStake validator_proposals = 6;
    bytes payload = 7;
    StateResponseReceipts outgoing_receipts = 8;
    repeated StateResponseReceipts incoming_receipts = 9;
}

message ChunkPartRequest {
    uint64 shard_id = 1;
    bytes chunk_hash = 2;
    uint64 height = 3;
    uint64 part_id = 4;
}
message ChunkOnePartRequest {
    uint64 shard_id = 1;
    bytes chunk_hash = 2;
    uint64 height = 3;
    uint64 part_id = 4;
    string recipient = 5;
}
message ChunkPart {
    uint64 shard_id = 1;
    bytes chunk_hash = 2;
    uint64 part_id = 3;
    bytes part = 4;
    bytes merkle_path = 5;
}
message ChunkOnePart {
    uint64 shard_id = 1;
    bytes chunk_hash = 2;
    ShardChunkHeader header = 3;
    uint64 part_id = 4;
    bytes part = 5;
    repeated ReceiptTransaction receipts = 6;
    bytes merkle_path = 7;
    repeated bytes receipts_proofs = 8;
}

message AnnounceAccountRoute {
    bytes peer_id = 1;
    bytes hash = 2;
    bytes signature = 3;

}

message AnnounceAccount {
    string account_id = 1;
    bytes epoch = 2;
    repeated AnnounceAccountRoute route = 3;
}

message PeerMessage {
    oneof message_type {
        Handshake hand_shake = 1;
        bool peers_request = 2;
        PeersResponse peers_response = 3;
        BlockHeaderRequest block_headers_request = 4;
        BlockHeaders block_headers = 5;
        BlockHeader block_header_announce = 6;
        bytes block_request = 7;
        Block block = 8;
        BlockApproval block_approval = 9;
        SignedTransaction transaction = 10;
        StateRequest state_request = 11;
        StateResponse state_response = 12;
        AnnounceAccount announce_account = 13;

        ChunkPartRequest chunk_part_request = 14;
        ChunkOnePartRequest chunk_one_part_request = 15;
        ChunkPart chunk_part = 16;
        ChunkOnePart chunk_header_and_part = 17;
    }
}
