#!/usr/bin/env python
import argparse
import os
import subprocess


def build(package, tag, is_release=True, use_buildkit=True):
    package_arg = "--build-arg PACKAGE={}".format(package)

    profile = 'release' if is_release else 'debug'
    profile_arg = "--build-arg PROFILE={}".format(profile)

    release_flag = '--release' if is_release else ''
    release_flag_arg = "--build-arg RELEASE_FLAG={}".format(release_flag)

    build_args = ' '.join([package_arg, profile_arg, release_flag_arg])

    current_directory = os.path.abspath(os.path.dirname(__file__))
    docker_file = os.path.join(current_directory, 'Dockerfile')
    repo_root = os.path.join(current_directory, '..')
    command = "sudo -E docker build {build_args} -f {docker_file} -t {tag} {path}".format(
        build_args=build_args,
        docker_file=docker_file,
        tag=tag,
        path=repo_root,
    )
    env = os.environ.copy()
    if use_buildkit:
        env['DOCKER_BUILDKIT'] = '1'

    return subprocess.Popen(command.split(), env=env)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('package', help='specify package with binary')
    parser.add_argument('tag', help='image tag')
    parser.add_argument(
        '--debug-profile',
        action='store_true',
        default=False,
        help='specify cargo to run with debug profile',
    )
    parser.add_argument(
        '--no-buildkit',
        action='store_true',
        default=False,
        help='specify cargo to run with debug profile',
    )
    args = parser.parse_args()

    process = build(
        args.package,
        args.tag,
        not args.debug_profile,
        not args.no_buildkit
    )
    try:
        process.wait()
    except KeyboardInterrupt:
        try:
            process.kill()
        except OSError:
            pass
