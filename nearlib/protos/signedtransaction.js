/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.SignedTransaction');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.CreateAccountTransaction');
goog.require('proto.DeployContractTransaction');
goog.require('proto.FunctionCallTransaction');
goog.require('proto.SendMoneyTransaction');
goog.require('proto.StakeTransaction');
goog.require('proto.SwapKeyTransaction');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SignedTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.SignedTransaction.oneofGroups_);
};
goog.inherits(proto.SignedTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SignedTransaction.displayName = 'proto.SignedTransaction';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.SignedTransaction.oneofGroups_ = [[2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.SignedTransaction.BodyCase = {
  BODY_NOT_SET: 0,
  CREATE_ACCOUNT: 2,
  DEPLOY_CONTRACT: 3,
  FUNCTION_CALL: 4,
  SEND_MONEY: 5,
  STAKE: 6,
  SWAP_KEY: 7
};

/**
 * @return {proto.SignedTransaction.BodyCase}
 */
proto.SignedTransaction.prototype.getBodyCase = function() {
  return /** @type {proto.SignedTransaction.BodyCase} */(jspb.Message.computeOneofCase(this, proto.SignedTransaction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SignedTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.SignedTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SignedTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignedTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: msg.getSignature_asB64(),
    createAccount: (f = msg.getCreateAccount()) && proto.CreateAccountTransaction.toObject(includeInstance, f),
    deployContract: (f = msg.getDeployContract()) && proto.DeployContractTransaction.toObject(includeInstance, f),
    functionCall: (f = msg.getFunctionCall()) && proto.FunctionCallTransaction.toObject(includeInstance, f),
    sendMoney: (f = msg.getSendMoney()) && proto.SendMoneyTransaction.toObject(includeInstance, f),
    stake: (f = msg.getStake()) && proto.StakeTransaction.toObject(includeInstance, f),
    swapKey: (f = msg.getSwapKey()) && proto.SwapKeyTransaction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SignedTransaction}
 */
proto.SignedTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SignedTransaction;
  return proto.SignedTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SignedTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SignedTransaction}
 */
proto.SignedTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 2:
      var value = new proto.CreateAccountTransaction;
      reader.readMessage(value,proto.CreateAccountTransaction.deserializeBinaryFromReader);
      msg.setCreateAccount(value);
      break;
    case 3:
      var value = new proto.DeployContractTransaction;
      reader.readMessage(value,proto.DeployContractTransaction.deserializeBinaryFromReader);
      msg.setDeployContract(value);
      break;
    case 4:
      var value = new proto.FunctionCallTransaction;
      reader.readMessage(value,proto.FunctionCallTransaction.deserializeBinaryFromReader);
      msg.setFunctionCall(value);
      break;
    case 5:
      var value = new proto.SendMoneyTransaction;
      reader.readMessage(value,proto.SendMoneyTransaction.deserializeBinaryFromReader);
      msg.setSendMoney(value);
      break;
    case 6:
      var value = new proto.StakeTransaction;
      reader.readMessage(value,proto.StakeTransaction.deserializeBinaryFromReader);
      msg.setStake(value);
      break;
    case 7:
      var value = new proto.SwapKeyTransaction;
      reader.readMessage(value,proto.SwapKeyTransaction.deserializeBinaryFromReader);
      msg.setSwapKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SignedTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SignedTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SignedTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SignedTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCreateAccount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CreateAccountTransaction.serializeBinaryToWriter
    );
  }
  f = message.getDeployContract();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.DeployContractTransaction.serializeBinaryToWriter
    );
  }
  f = message.getFunctionCall();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.FunctionCallTransaction.serializeBinaryToWriter
    );
  }
  f = message.getSendMoney();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.SendMoneyTransaction.serializeBinaryToWriter
    );
  }
  f = message.getStake();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.StakeTransaction.serializeBinaryToWriter
    );
  }
  f = message.getSwapKey();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.SwapKeyTransaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes signature = 1;
 * @return {string}
 */
proto.SignedTransaction.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes signature = 1;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.SignedTransaction.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.SignedTransaction.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.SignedTransaction.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional CreateAccountTransaction create_account = 2;
 * @return {?proto.CreateAccountTransaction}
 */
proto.SignedTransaction.prototype.getCreateAccount = function() {
  return /** @type{?proto.CreateAccountTransaction} */ (
    jspb.Message.getWrapperField(this, proto.CreateAccountTransaction, 2));
};


/** @param {?proto.CreateAccountTransaction|undefined} value */
proto.SignedTransaction.prototype.setCreateAccount = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.SignedTransaction.oneofGroups_[0], value);
};


proto.SignedTransaction.prototype.clearCreateAccount = function() {
  this.setCreateAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SignedTransaction.prototype.hasCreateAccount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DeployContractTransaction deploy_contract = 3;
 * @return {?proto.DeployContractTransaction}
 */
proto.SignedTransaction.prototype.getDeployContract = function() {
  return /** @type{?proto.DeployContractTransaction} */ (
    jspb.Message.getWrapperField(this, proto.DeployContractTransaction, 3));
};


/** @param {?proto.DeployContractTransaction|undefined} value */
proto.SignedTransaction.prototype.setDeployContract = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.SignedTransaction.oneofGroups_[0], value);
};


proto.SignedTransaction.prototype.clearDeployContract = function() {
  this.setDeployContract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SignedTransaction.prototype.hasDeployContract = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FunctionCallTransaction function_call = 4;
 * @return {?proto.FunctionCallTransaction}
 */
proto.SignedTransaction.prototype.getFunctionCall = function() {
  return /** @type{?proto.FunctionCallTransaction} */ (
    jspb.Message.getWrapperField(this, proto.FunctionCallTransaction, 4));
};


/** @param {?proto.FunctionCallTransaction|undefined} value */
proto.SignedTransaction.prototype.setFunctionCall = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.SignedTransaction.oneofGroups_[0], value);
};


proto.SignedTransaction.prototype.clearFunctionCall = function() {
  this.setFunctionCall(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SignedTransaction.prototype.hasFunctionCall = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SendMoneyTransaction send_money = 5;
 * @return {?proto.SendMoneyTransaction}
 */
proto.SignedTransaction.prototype.getSendMoney = function() {
  return /** @type{?proto.SendMoneyTransaction} */ (
    jspb.Message.getWrapperField(this, proto.SendMoneyTransaction, 5));
};


/** @param {?proto.SendMoneyTransaction|undefined} value */
proto.SignedTransaction.prototype.setSendMoney = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.SignedTransaction.oneofGroups_[0], value);
};


proto.SignedTransaction.prototype.clearSendMoney = function() {
  this.setSendMoney(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SignedTransaction.prototype.hasSendMoney = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional StakeTransaction stake = 6;
 * @return {?proto.StakeTransaction}
 */
proto.SignedTransaction.prototype.getStake = function() {
  return /** @type{?proto.StakeTransaction} */ (
    jspb.Message.getWrapperField(this, proto.StakeTransaction, 6));
};


/** @param {?proto.StakeTransaction|undefined} value */
proto.SignedTransaction.prototype.setStake = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.SignedTransaction.oneofGroups_[0], value);
};


proto.SignedTransaction.prototype.clearStake = function() {
  this.setStake(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SignedTransaction.prototype.hasStake = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional SwapKeyTransaction swap_key = 7;
 * @return {?proto.SwapKeyTransaction}
 */
proto.SignedTransaction.prototype.getSwapKey = function() {
  return /** @type{?proto.SwapKeyTransaction} */ (
    jspb.Message.getWrapperField(this, proto.SwapKeyTransaction, 7));
};


/** @param {?proto.SwapKeyTransaction|undefined} value */
proto.SignedTransaction.prototype.setSwapKey = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.SignedTransaction.oneofGroups_[0], value);
};


proto.SignedTransaction.prototype.clearSwapKey = function() {
  this.setSwapKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SignedTransaction.prototype.hasSwapKey = function() {
  return jspb.Message.getField(this, 7) != null;
};


