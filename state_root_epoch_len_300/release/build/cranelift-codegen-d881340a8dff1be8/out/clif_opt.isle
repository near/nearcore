;; GENERATED BY `gen_isle`. DO NOT EDIT!!!
;;
;; This ISLE file defines all the external type declarations for Cranelift's
;; data structures that ISLE will process, such as `InstructionData` and
;; `Opcode`.

;;;; Extern type declarations for immediates ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(type Block (primitive Block))
(type Constant (primitive Constant))
(type DynamicStackSlot (primitive DynamicStackSlot))
(type FuncRef (primitive FuncRef))
(type GlobalValue (primitive GlobalValue))
(type Heap (primitive Heap))
(type HeapImm (primitive HeapImm))
(type Ieee32 (primitive Ieee32))
(type Ieee64 (primitive Ieee64))
(type Imm64 (primitive Imm64))
(type Immediate (primitive Immediate))
(type JumpTable (primitive JumpTable))
(type MemFlags (primitive MemFlags))
(type Offset32 (primitive Offset32))
(type SigRef (primitive SigRef))
(type StackSlot (primitive StackSlot))
(type Table (primitive Table))
(type Uimm32 (primitive Uimm32))
(type Uimm8 (primitive Uimm8))

;;;; Enumerated Immediate: AtomicRmwOp ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(type AtomicRmwOp extern
    (enum
        Add
        And
        Nand
        Or
        Smax
        Smin
        Sub
        Umax
        Umin
        Xchg
        Xor
    )
)

;;;; Enumerated Immediate: FloatCC ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(type FloatCC extern
    (enum
        Equal
        GreaterThan
        GreaterThanOrEqual
        LessThan
        LessThanOrEqual
        NotEqual
        Ordered
        OrderedNotEqual
        Unordered
        UnorderedOrEqual
        UnorderedOrGreaterThan
        UnorderedOrGreaterThanOrEqual
        UnorderedOrLessThan
        UnorderedOrLessThanOrEqual
    )
)

;;;; Enumerated Immediate: IntCC ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(type IntCC extern
    (enum
        Equal
        NotEqual
        SignedGreaterThan
        SignedGreaterThanOrEqual
        SignedLessThan
        SignedLessThanOrEqual
        UnsignedGreaterThan
        UnsignedGreaterThanOrEqual
        UnsignedLessThan
        UnsignedLessThanOrEqual
    )
)

;;;; Enumerated Immediate: TrapCode ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(type TrapCode extern
    (enum
        HeapOutOfBounds
        IntegerDivisionByZero
        IntegerOverflow
        StackOverflow
    )
)

;;;; `Opcode` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(type Opcode extern
    (enum
        Jump
        Brz
        Brnz
        BrTable
        Debugtrap
        Trap
        Trapz
        ResumableTrap
        Trapnz
        ResumableTrapnz
        Return
        Call
        CallIndirect
        FuncAddr
        Splat
        Swizzle
        Insertlane
        Extractlane
        Smin
        Umin
        Smax
        Umax
        AvgRound
        UaddSat
        SaddSat
        UsubSat
        SsubSat
        Load
        Store
        Uload8
        Sload8
        Istore8
        Uload16
        Sload16
        Istore16
        Uload32
        Sload32
        Istore32
        Uload8x8
        Sload8x8
        Uload16x4
        Sload16x4
        Uload32x2
        Sload32x2
        StackLoad
        StackStore
        StackAddr
        DynamicStackLoad
        DynamicStackStore
        DynamicStackAddr
        GlobalValue
        SymbolValue
        TlsValue
        HeapAddr
        HeapLoad
        HeapStore
        GetPinnedReg
        SetPinnedReg
        GetFramePointer
        GetStackPointer
        GetReturnAddress
        TableAddr
        Iconst
        F32const
        F64const
        Vconst
        Shuffle
        Null
        Nop
        Select
        SelectSpectreGuard
        Bitselect
        Vsplit
        Vconcat
        Vselect
        VanyTrue
        VallTrue
        VhighBits
        Icmp
        IcmpImm
        Ifcmp
        IfcmpImm
        Iadd
        Isub
        Ineg
        Iabs
        Imul
        Umulhi
        Smulhi
        SqmulRoundSat
        Udiv
        Sdiv
        Urem
        Srem
        IaddImm
        ImulImm
        UdivImm
        SdivImm
        UremImm
        SremImm
        IrsubImm
        IaddCin
        IaddIfcin
        IaddCout
        IaddIfcout
        IaddCarry
        IaddIfcarry
        UaddOverflowTrap
        IsubBin
        IsubIfbin
        IsubBout
        IsubIfbout
        IsubBorrow
        IsubIfborrow
        Band
        Bor
        Bxor
        Bnot
        BandNot
        BorNot
        BxorNot
        BandImm
        BorImm
        BxorImm
        Rotl
        Rotr
        RotlImm
        RotrImm
        Ishl
        Ushr
        Sshr
        IshlImm
        UshrImm
        SshrImm
        Bitrev
        Clz
        Cls
        Ctz
        Bswap
        Popcnt
        Fcmp
        Ffcmp
        Fadd
        Fsub
        Fmul
        Fdiv
        Sqrt
        Fma
        Fneg
        Fabs
        Fcopysign
        Fmin
        FminPseudo
        Fmax
        FmaxPseudo
        Ceil
        Floor
        Trunc
        Nearest
        IsNull
        IsInvalid
        Bitcast
        ScalarToVector
        Bmask
        Ireduce
        Snarrow
        Unarrow
        Uunarrow
        SwidenLow
        SwidenHigh
        UwidenLow
        UwidenHigh
        IaddPairwise
        WideningPairwiseDotProductS
        Uextend
        Sextend
        Fpromote
        Fdemote
        Fvdemote
        FvpromoteLow
        FcvtToUint
        FcvtToSint
        FcvtToUintSat
        FcvtToSintSat
        FcvtFromUint
        FcvtFromSint
        FcvtLowFromSint
        Isplit
        Iconcat
        AtomicRmw
        AtomicCas
        AtomicLoad
        AtomicStore
        Fence
        ExtractVector
    )
)

;;;; `InstructionImms` ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(type InstructionImms extern
    (enum
        (AtomicCas (opcode Opcode) (flags MemFlags))
        (AtomicRmw (opcode Opcode) (flags MemFlags) (op AtomicRmwOp))
        (Binary (opcode Opcode))
        (BinaryImm64 (opcode Opcode) (imm Imm64))
        (BinaryImm8 (opcode Opcode) (imm Uimm8))
        (Branch (opcode Opcode) (destination Block))
        (BranchTable (opcode Opcode) (destination Block) (table JumpTable))
        (Call (opcode Opcode) (func_ref FuncRef))
        (CallIndirect (opcode Opcode) (sig_ref SigRef))
        (CondTrap (opcode Opcode) (code TrapCode))
        (DynamicStackLoad (opcode Opcode) (dynamic_stack_slot DynamicStackSlot))
        (DynamicStackStore (opcode Opcode) (dynamic_stack_slot DynamicStackSlot))
        (FloatCompare (opcode Opcode) (cond FloatCC))
        (FuncAddr (opcode Opcode) (func_ref FuncRef))
        (HeapAddr (opcode Opcode) (heap Heap) (offset Uimm32) (size Uimm8))
        (HeapLoad (opcode Opcode) (heap_imm HeapImm))
        (HeapStore (opcode Opcode) (heap_imm HeapImm))
        (IntAddTrap (opcode Opcode) (code TrapCode))
        (IntCompare (opcode Opcode) (cond IntCC))
        (IntCompareImm (opcode Opcode) (cond IntCC) (imm Imm64))
        (Jump (opcode Opcode) (destination Block))
        (Load (opcode Opcode) (flags MemFlags) (offset Offset32))
        (LoadNoOffset (opcode Opcode) (flags MemFlags))
        (MultiAry (opcode Opcode))
        (NullAry (opcode Opcode))
        (Shuffle (opcode Opcode) (imm Immediate))
        (StackLoad (opcode Opcode) (stack_slot StackSlot) (offset Offset32))
        (StackStore (opcode Opcode) (stack_slot StackSlot) (offset Offset32))
        (Store (opcode Opcode) (flags MemFlags) (offset Offset32))
        (StoreNoOffset (opcode Opcode) (flags MemFlags))
        (TableAddr (opcode Opcode) (table Table) (offset Offset32))
        (Ternary (opcode Opcode))
        (TernaryImm8 (opcode Opcode) (imm Uimm8))
        (Trap (opcode Opcode) (code TrapCode))
        (Unary (opcode Opcode))
        (UnaryConst (opcode Opcode) (constant_handle Constant))
        (UnaryGlobalValue (opcode Opcode) (global_value GlobalValue))
        (UnaryIeee32 (opcode Opcode) (imm Ieee32))
        (UnaryIeee64 (opcode Opcode) (imm Ieee64))
        (UnaryImm (opcode Opcode) (imm Imm64))
    )
)

;;;; Extracting Opcode, Operands, and Immediates from `InstructionImms` ;;;;;;;;

(decl br_table (Type Id Block JumpTable) Id)
(extractor
    (br_table ty x block JT)
    (enodes ty (InstructionImms.BranchTable (Opcode.BrTable) block JT) (id_array_1 x))
)
(rule (br_table ty x block JT)
    (pure_enode ty (InstructionImms.BranchTable (Opcode.BrTable) block JT) (id_array_1 x))
)

(decl debugtrap (Type ) Id)
(extractor
    (debugtrap ty )
    (enodes ty (InstructionImms.NullAry (Opcode.Debugtrap)) (id_array_0 ))
)
(rule (debugtrap ty )
    (pure_enode ty (InstructionImms.NullAry (Opcode.Debugtrap)) (id_array_0 ))
)

(decl trap (Type TrapCode) Id)
(extractor
    (trap ty code)
    (enodes ty (InstructionImms.Trap (Opcode.Trap) code) (id_array_0 ))
)
(rule (trap ty code)
    (pure_enode ty (InstructionImms.Trap (Opcode.Trap) code) (id_array_0 ))
)

(decl trapz (Type Id TrapCode) Id)
(extractor
    (trapz ty c code)
    (enodes ty (InstructionImms.CondTrap (Opcode.Trapz) code) (id_array_1 c))
)
(rule (trapz ty c code)
    (pure_enode ty (InstructionImms.CondTrap (Opcode.Trapz) code) (id_array_1 c))
)

(decl resumable_trap (Type TrapCode) Id)
(extractor
    (resumable_trap ty code)
    (enodes ty (InstructionImms.Trap (Opcode.ResumableTrap) code) (id_array_0 ))
)
(rule (resumable_trap ty code)
    (pure_enode ty (InstructionImms.Trap (Opcode.ResumableTrap) code) (id_array_0 ))
)

(decl trapnz (Type Id TrapCode) Id)
(extractor
    (trapnz ty c code)
    (enodes ty (InstructionImms.CondTrap (Opcode.Trapnz) code) (id_array_1 c))
)
(rule (trapnz ty c code)
    (pure_enode ty (InstructionImms.CondTrap (Opcode.Trapnz) code) (id_array_1 c))
)

(decl resumable_trapnz (Type Id TrapCode) Id)
(extractor
    (resumable_trapnz ty c code)
    (enodes ty (InstructionImms.CondTrap (Opcode.ResumableTrapnz) code) (id_array_1 c))
)
(rule (resumable_trapnz ty c code)
    (pure_enode ty (InstructionImms.CondTrap (Opcode.ResumableTrapnz) code) (id_array_1 c))
)

(decl func_addr (Type FuncRef) Id)
(extractor
    (func_addr ty FN)
    (enodes ty (InstructionImms.FuncAddr (Opcode.FuncAddr) FN) (id_array_0 ))
)
(rule (func_addr ty FN)
    (pure_enode ty (InstructionImms.FuncAddr (Opcode.FuncAddr) FN) (id_array_0 ))
)

(decl splat (Type Id) Id)
(extractor
    (splat ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Splat)) (id_array_1 x))
)
(rule (splat ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Splat)) (id_array_1 x))
)

(decl swizzle (Type Id Id) Id)
(extractor
    (swizzle ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Swizzle)) (id_array_2 x y))
)
(rule (swizzle ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Swizzle)) (id_array_2 x y))
)

(decl insertlane (Type Id Id Uimm8) Id)
(extractor
    (insertlane ty x y Idx)
    (enodes ty (InstructionImms.TernaryImm8 (Opcode.Insertlane) Idx) (id_array_2 x y))
)
(rule (insertlane ty x y Idx)
    (pure_enode ty (InstructionImms.TernaryImm8 (Opcode.Insertlane) Idx) (id_array_2 x y))
)

(decl extractlane (Type Id Uimm8) Id)
(extractor
    (extractlane ty x Idx)
    (enodes ty (InstructionImms.BinaryImm8 (Opcode.Extractlane) Idx) (id_array_1 x))
)
(rule (extractlane ty x Idx)
    (pure_enode ty (InstructionImms.BinaryImm8 (Opcode.Extractlane) Idx) (id_array_1 x))
)

(decl smin (Type Id Id) Id)
(extractor
    (smin ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Smin)) (id_array_2 x y))
)
(rule (smin ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Smin)) (id_array_2 x y))
)

(decl umin (Type Id Id) Id)
(extractor
    (umin ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Umin)) (id_array_2 x y))
)
(rule (umin ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Umin)) (id_array_2 x y))
)

(decl smax (Type Id Id) Id)
(extractor
    (smax ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Smax)) (id_array_2 x y))
)
(rule (smax ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Smax)) (id_array_2 x y))
)

(decl umax (Type Id Id) Id)
(extractor
    (umax ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Umax)) (id_array_2 x y))
)
(rule (umax ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Umax)) (id_array_2 x y))
)

(decl avg_round (Type Id Id) Id)
(extractor
    (avg_round ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.AvgRound)) (id_array_2 x y))
)
(rule (avg_round ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.AvgRound)) (id_array_2 x y))
)

(decl uadd_sat (Type Id Id) Id)
(extractor
    (uadd_sat ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.UaddSat)) (id_array_2 x y))
)
(rule (uadd_sat ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.UaddSat)) (id_array_2 x y))
)

(decl sadd_sat (Type Id Id) Id)
(extractor
    (sadd_sat ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.SaddSat)) (id_array_2 x y))
)
(rule (sadd_sat ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.SaddSat)) (id_array_2 x y))
)

(decl usub_sat (Type Id Id) Id)
(extractor
    (usub_sat ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.UsubSat)) (id_array_2 x y))
)
(rule (usub_sat ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.UsubSat)) (id_array_2 x y))
)

(decl ssub_sat (Type Id Id) Id)
(extractor
    (ssub_sat ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.SsubSat)) (id_array_2 x y))
)
(rule (ssub_sat ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.SsubSat)) (id_array_2 x y))
)

(decl load (Type MemFlags Id Offset32) Id)
(extractor
    (load ty MemFlags p Offset)
    (enodes ty (InstructionImms.Load (Opcode.Load) MemFlags Offset) (id_array_1 p))
)
(rule (load ty MemFlags p Offset)
    (pure_enode ty (InstructionImms.Load (Opcode.Load) MemFlags Offset) (id_array_1 p))
)

(decl store (Type MemFlags Id Id Offset32) Id)
(extractor
    (store ty MemFlags x p Offset)
    (enodes ty (InstructionImms.Store (Opcode.Store) MemFlags Offset) (id_array_2 x p))
)
(rule (store ty MemFlags x p Offset)
    (pure_enode ty (InstructionImms.Store (Opcode.Store) MemFlags Offset) (id_array_2 x p))
)

(decl uload8 (Type MemFlags Id Offset32) Id)
(extractor
    (uload8 ty MemFlags p Offset)
    (enodes ty (InstructionImms.Load (Opcode.Uload8) MemFlags Offset) (id_array_1 p))
)
(rule (uload8 ty MemFlags p Offset)
    (pure_enode ty (InstructionImms.Load (Opcode.Uload8) MemFlags Offset) (id_array_1 p))
)

(decl sload8 (Type MemFlags Id Offset32) Id)
(extractor
    (sload8 ty MemFlags p Offset)
    (enodes ty (InstructionImms.Load (Opcode.Sload8) MemFlags Offset) (id_array_1 p))
)
(rule (sload8 ty MemFlags p Offset)
    (pure_enode ty (InstructionImms.Load (Opcode.Sload8) MemFlags Offset) (id_array_1 p))
)

(decl istore8 (Type MemFlags Id Id Offset32) Id)
(extractor
    (istore8 ty MemFlags x p Offset)
    (enodes ty (InstructionImms.Store (Opcode.Istore8) MemFlags Offset) (id_array_2 x p))
)
(rule (istore8 ty MemFlags x p Offset)
    (pure_enode ty (InstructionImms.Store (Opcode.Istore8) MemFlags Offset) (id_array_2 x p))
)

(decl uload16 (Type MemFlags Id Offset32) Id)
(extractor
    (uload16 ty MemFlags p Offset)
    (enodes ty (InstructionImms.Load (Opcode.Uload16) MemFlags Offset) (id_array_1 p))
)
(rule (uload16 ty MemFlags p Offset)
    (pure_enode ty (InstructionImms.Load (Opcode.Uload16) MemFlags Offset) (id_array_1 p))
)

(decl sload16 (Type MemFlags Id Offset32) Id)
(extractor
    (sload16 ty MemFlags p Offset)
    (enodes ty (InstructionImms.Load (Opcode.Sload16) MemFlags Offset) (id_array_1 p))
)
(rule (sload16 ty MemFlags p Offset)
    (pure_enode ty (InstructionImms.Load (Opcode.Sload16) MemFlags Offset) (id_array_1 p))
)

(decl istore16 (Type MemFlags Id Id Offset32) Id)
(extractor
    (istore16 ty MemFlags x p Offset)
    (enodes ty (InstructionImms.Store (Opcode.Istore16) MemFlags Offset) (id_array_2 x p))
)
(rule (istore16 ty MemFlags x p Offset)
    (pure_enode ty (InstructionImms.Store (Opcode.Istore16) MemFlags Offset) (id_array_2 x p))
)

(decl uload32 (Type MemFlags Id Offset32) Id)
(extractor
    (uload32 ty MemFlags p Offset)
    (enodes ty (InstructionImms.Load (Opcode.Uload32) MemFlags Offset) (id_array_1 p))
)
(rule (uload32 ty MemFlags p Offset)
    (pure_enode ty (InstructionImms.Load (Opcode.Uload32) MemFlags Offset) (id_array_1 p))
)

(decl sload32 (Type MemFlags Id Offset32) Id)
(extractor
    (sload32 ty MemFlags p Offset)
    (enodes ty (InstructionImms.Load (Opcode.Sload32) MemFlags Offset) (id_array_1 p))
)
(rule (sload32 ty MemFlags p Offset)
    (pure_enode ty (InstructionImms.Load (Opcode.Sload32) MemFlags Offset) (id_array_1 p))
)

(decl istore32 (Type MemFlags Id Id Offset32) Id)
(extractor
    (istore32 ty MemFlags x p Offset)
    (enodes ty (InstructionImms.Store (Opcode.Istore32) MemFlags Offset) (id_array_2 x p))
)
(rule (istore32 ty MemFlags x p Offset)
    (pure_enode ty (InstructionImms.Store (Opcode.Istore32) MemFlags Offset) (id_array_2 x p))
)

(decl uload8x8 (Type MemFlags Id Offset32) Id)
(extractor
    (uload8x8 ty MemFlags p Offset)
    (enodes ty (InstructionImms.Load (Opcode.Uload8x8) MemFlags Offset) (id_array_1 p))
)
(rule (uload8x8 ty MemFlags p Offset)
    (pure_enode ty (InstructionImms.Load (Opcode.Uload8x8) MemFlags Offset) (id_array_1 p))
)

(decl sload8x8 (Type MemFlags Id Offset32) Id)
(extractor
    (sload8x8 ty MemFlags p Offset)
    (enodes ty (InstructionImms.Load (Opcode.Sload8x8) MemFlags Offset) (id_array_1 p))
)
(rule (sload8x8 ty MemFlags p Offset)
    (pure_enode ty (InstructionImms.Load (Opcode.Sload8x8) MemFlags Offset) (id_array_1 p))
)

(decl uload16x4 (Type MemFlags Id Offset32) Id)
(extractor
    (uload16x4 ty MemFlags p Offset)
    (enodes ty (InstructionImms.Load (Opcode.Uload16x4) MemFlags Offset) (id_array_1 p))
)
(rule (uload16x4 ty MemFlags p Offset)
    (pure_enode ty (InstructionImms.Load (Opcode.Uload16x4) MemFlags Offset) (id_array_1 p))
)

(decl sload16x4 (Type MemFlags Id Offset32) Id)
(extractor
    (sload16x4 ty MemFlags p Offset)
    (enodes ty (InstructionImms.Load (Opcode.Sload16x4) MemFlags Offset) (id_array_1 p))
)
(rule (sload16x4 ty MemFlags p Offset)
    (pure_enode ty (InstructionImms.Load (Opcode.Sload16x4) MemFlags Offset) (id_array_1 p))
)

(decl uload32x2 (Type MemFlags Id Offset32) Id)
(extractor
    (uload32x2 ty MemFlags p Offset)
    (enodes ty (InstructionImms.Load (Opcode.Uload32x2) MemFlags Offset) (id_array_1 p))
)
(rule (uload32x2 ty MemFlags p Offset)
    (pure_enode ty (InstructionImms.Load (Opcode.Uload32x2) MemFlags Offset) (id_array_1 p))
)

(decl sload32x2 (Type MemFlags Id Offset32) Id)
(extractor
    (sload32x2 ty MemFlags p Offset)
    (enodes ty (InstructionImms.Load (Opcode.Sload32x2) MemFlags Offset) (id_array_1 p))
)
(rule (sload32x2 ty MemFlags p Offset)
    (pure_enode ty (InstructionImms.Load (Opcode.Sload32x2) MemFlags Offset) (id_array_1 p))
)

(decl stack_load (Type StackSlot Offset32) Id)
(extractor
    (stack_load ty SS Offset)
    (enodes ty (InstructionImms.StackLoad (Opcode.StackLoad) SS Offset) (id_array_0 ))
)
(rule (stack_load ty SS Offset)
    (pure_enode ty (InstructionImms.StackLoad (Opcode.StackLoad) SS Offset) (id_array_0 ))
)

(decl stack_store (Type Id StackSlot Offset32) Id)
(extractor
    (stack_store ty x SS Offset)
    (enodes ty (InstructionImms.StackStore (Opcode.StackStore) SS Offset) (id_array_1 x))
)
(rule (stack_store ty x SS Offset)
    (pure_enode ty (InstructionImms.StackStore (Opcode.StackStore) SS Offset) (id_array_1 x))
)

(decl stack_addr (Type StackSlot Offset32) Id)
(extractor
    (stack_addr ty SS Offset)
    (enodes ty (InstructionImms.StackLoad (Opcode.StackAddr) SS Offset) (id_array_0 ))
)
(rule (stack_addr ty SS Offset)
    (pure_enode ty (InstructionImms.StackLoad (Opcode.StackAddr) SS Offset) (id_array_0 ))
)

(decl dynamic_stack_load (Type DynamicStackSlot) Id)
(extractor
    (dynamic_stack_load ty DSS)
    (enodes ty (InstructionImms.DynamicStackLoad (Opcode.DynamicStackLoad) DSS) (id_array_0 ))
)
(rule (dynamic_stack_load ty DSS)
    (pure_enode ty (InstructionImms.DynamicStackLoad (Opcode.DynamicStackLoad) DSS) (id_array_0 ))
)

(decl dynamic_stack_store (Type Id DynamicStackSlot) Id)
(extractor
    (dynamic_stack_store ty x DSS)
    (enodes ty (InstructionImms.DynamicStackStore (Opcode.DynamicStackStore) DSS) (id_array_1 x))
)
(rule (dynamic_stack_store ty x DSS)
    (pure_enode ty (InstructionImms.DynamicStackStore (Opcode.DynamicStackStore) DSS) (id_array_1 x))
)

(decl dynamic_stack_addr (Type DynamicStackSlot) Id)
(extractor
    (dynamic_stack_addr ty DSS)
    (enodes ty (InstructionImms.DynamicStackLoad (Opcode.DynamicStackAddr) DSS) (id_array_0 ))
)
(rule (dynamic_stack_addr ty DSS)
    (pure_enode ty (InstructionImms.DynamicStackLoad (Opcode.DynamicStackAddr) DSS) (id_array_0 ))
)

(decl global_value (Type GlobalValue) Id)
(extractor
    (global_value ty GV)
    (enodes ty (InstructionImms.UnaryGlobalValue (Opcode.GlobalValue) GV) (id_array_0 ))
)
(rule (global_value ty GV)
    (pure_enode ty (InstructionImms.UnaryGlobalValue (Opcode.GlobalValue) GV) (id_array_0 ))
)

(decl symbol_value (Type GlobalValue) Id)
(extractor
    (symbol_value ty GV)
    (enodes ty (InstructionImms.UnaryGlobalValue (Opcode.SymbolValue) GV) (id_array_0 ))
)
(rule (symbol_value ty GV)
    (pure_enode ty (InstructionImms.UnaryGlobalValue (Opcode.SymbolValue) GV) (id_array_0 ))
)

(decl tls_value (Type GlobalValue) Id)
(extractor
    (tls_value ty GV)
    (enodes ty (InstructionImms.UnaryGlobalValue (Opcode.TlsValue) GV) (id_array_0 ))
)
(rule (tls_value ty GV)
    (pure_enode ty (InstructionImms.UnaryGlobalValue (Opcode.TlsValue) GV) (id_array_0 ))
)

(decl heap_addr (Type Heap Id Uimm32 Uimm8) Id)
(extractor
    (heap_addr ty H index Offset Size)
    (enodes ty (InstructionImms.HeapAddr (Opcode.HeapAddr) H Offset Size) (id_array_1 index))
)
(rule (heap_addr ty H index Offset Size)
    (pure_enode ty (InstructionImms.HeapAddr (Opcode.HeapAddr) H Offset Size) (id_array_1 index))
)

(decl heap_load (Type HeapImm Id) Id)
(extractor
    (heap_load ty heap_imm index)
    (enodes ty (InstructionImms.HeapLoad (Opcode.HeapLoad) heap_imm) (id_array_1 index))
)
(rule (heap_load ty heap_imm index)
    (pure_enode ty (InstructionImms.HeapLoad (Opcode.HeapLoad) heap_imm) (id_array_1 index))
)

(decl heap_store (Type HeapImm Id Id) Id)
(extractor
    (heap_store ty heap_imm index a)
    (enodes ty (InstructionImms.HeapStore (Opcode.HeapStore) heap_imm) (id_array_2 index a))
)
(rule (heap_store ty heap_imm index a)
    (pure_enode ty (InstructionImms.HeapStore (Opcode.HeapStore) heap_imm) (id_array_2 index a))
)

(decl get_pinned_reg (Type ) Id)
(extractor
    (get_pinned_reg ty )
    (enodes ty (InstructionImms.NullAry (Opcode.GetPinnedReg)) (id_array_0 ))
)
(rule (get_pinned_reg ty )
    (pure_enode ty (InstructionImms.NullAry (Opcode.GetPinnedReg)) (id_array_0 ))
)

(decl set_pinned_reg (Type Id) Id)
(extractor
    (set_pinned_reg ty addr)
    (enodes ty (InstructionImms.Unary (Opcode.SetPinnedReg)) (id_array_1 addr))
)
(rule (set_pinned_reg ty addr)
    (pure_enode ty (InstructionImms.Unary (Opcode.SetPinnedReg)) (id_array_1 addr))
)

(decl get_frame_pointer (Type ) Id)
(extractor
    (get_frame_pointer ty )
    (enodes ty (InstructionImms.NullAry (Opcode.GetFramePointer)) (id_array_0 ))
)
(rule (get_frame_pointer ty )
    (pure_enode ty (InstructionImms.NullAry (Opcode.GetFramePointer)) (id_array_0 ))
)

(decl get_stack_pointer (Type ) Id)
(extractor
    (get_stack_pointer ty )
    (enodes ty (InstructionImms.NullAry (Opcode.GetStackPointer)) (id_array_0 ))
)
(rule (get_stack_pointer ty )
    (pure_enode ty (InstructionImms.NullAry (Opcode.GetStackPointer)) (id_array_0 ))
)

(decl get_return_address (Type ) Id)
(extractor
    (get_return_address ty )
    (enodes ty (InstructionImms.NullAry (Opcode.GetReturnAddress)) (id_array_0 ))
)
(rule (get_return_address ty )
    (pure_enode ty (InstructionImms.NullAry (Opcode.GetReturnAddress)) (id_array_0 ))
)

(decl table_addr (Type Table Id Offset32) Id)
(extractor
    (table_addr ty T p Offset)
    (enodes ty (InstructionImms.TableAddr (Opcode.TableAddr) T Offset) (id_array_1 p))
)
(rule (table_addr ty T p Offset)
    (pure_enode ty (InstructionImms.TableAddr (Opcode.TableAddr) T Offset) (id_array_1 p))
)

(decl iconst (Type Imm64) Id)
(extractor
    (iconst ty N)
    (enodes ty (InstructionImms.UnaryImm (Opcode.Iconst) N) (id_array_0 ))
)
(rule (iconst ty N)
    (pure_enode ty (InstructionImms.UnaryImm (Opcode.Iconst) N) (id_array_0 ))
)

(decl f32const (Type Ieee32) Id)
(extractor
    (f32const ty N)
    (enodes ty (InstructionImms.UnaryIeee32 (Opcode.F32const) N) (id_array_0 ))
)
(rule (f32const ty N)
    (pure_enode ty (InstructionImms.UnaryIeee32 (Opcode.F32const) N) (id_array_0 ))
)

(decl f64const (Type Ieee64) Id)
(extractor
    (f64const ty N)
    (enodes ty (InstructionImms.UnaryIeee64 (Opcode.F64const) N) (id_array_0 ))
)
(rule (f64const ty N)
    (pure_enode ty (InstructionImms.UnaryIeee64 (Opcode.F64const) N) (id_array_0 ))
)

(decl vconst (Type Constant) Id)
(extractor
    (vconst ty N)
    (enodes ty (InstructionImms.UnaryConst (Opcode.Vconst) N) (id_array_0 ))
)
(rule (vconst ty N)
    (pure_enode ty (InstructionImms.UnaryConst (Opcode.Vconst) N) (id_array_0 ))
)

(decl shuffle (Type Id Id Immediate) Id)
(extractor
    (shuffle ty a b mask)
    (enodes ty (InstructionImms.Shuffle (Opcode.Shuffle) mask) (id_array_2 a b))
)
(rule (shuffle ty a b mask)
    (pure_enode ty (InstructionImms.Shuffle (Opcode.Shuffle) mask) (id_array_2 a b))
)

(decl null (Type ) Id)
(extractor
    (null ty )
    (enodes ty (InstructionImms.NullAry (Opcode.Null)) (id_array_0 ))
)
(rule (null ty )
    (pure_enode ty (InstructionImms.NullAry (Opcode.Null)) (id_array_0 ))
)

(decl nop (Type ) Id)
(extractor
    (nop ty )
    (enodes ty (InstructionImms.NullAry (Opcode.Nop)) (id_array_0 ))
)
(rule (nop ty )
    (pure_enode ty (InstructionImms.NullAry (Opcode.Nop)) (id_array_0 ))
)

(decl select (Type Id Id Id) Id)
(extractor
    (select ty c x y)
    (enodes ty (InstructionImms.Ternary (Opcode.Select)) (id_array_3 c x y))
)
(rule (select ty c x y)
    (pure_enode ty (InstructionImms.Ternary (Opcode.Select)) (id_array_3 c x y))
)

(decl select_spectre_guard (Type Id Id Id) Id)
(extractor
    (select_spectre_guard ty c x y)
    (enodes ty (InstructionImms.Ternary (Opcode.SelectSpectreGuard)) (id_array_3 c x y))
)
(rule (select_spectre_guard ty c x y)
    (pure_enode ty (InstructionImms.Ternary (Opcode.SelectSpectreGuard)) (id_array_3 c x y))
)

(decl bitselect (Type Id Id Id) Id)
(extractor
    (bitselect ty c x y)
    (enodes ty (InstructionImms.Ternary (Opcode.Bitselect)) (id_array_3 c x y))
)
(rule (bitselect ty c x y)
    (pure_enode ty (InstructionImms.Ternary (Opcode.Bitselect)) (id_array_3 c x y))
)

(decl vsplit (Type Id) Id)
(extractor
    (vsplit ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Vsplit)) (id_array_1 x))
)
(rule (vsplit ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Vsplit)) (id_array_1 x))
)

(decl vconcat (Type Id Id) Id)
(extractor
    (vconcat ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Vconcat)) (id_array_2 x y))
)
(rule (vconcat ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Vconcat)) (id_array_2 x y))
)

(decl vselect (Type Id Id Id) Id)
(extractor
    (vselect ty c x y)
    (enodes ty (InstructionImms.Ternary (Opcode.Vselect)) (id_array_3 c x y))
)
(rule (vselect ty c x y)
    (pure_enode ty (InstructionImms.Ternary (Opcode.Vselect)) (id_array_3 c x y))
)

(decl vany_true (Type Id) Id)
(extractor
    (vany_true ty a)
    (enodes ty (InstructionImms.Unary (Opcode.VanyTrue)) (id_array_1 a))
)
(rule (vany_true ty a)
    (pure_enode ty (InstructionImms.Unary (Opcode.VanyTrue)) (id_array_1 a))
)

(decl vall_true (Type Id) Id)
(extractor
    (vall_true ty a)
    (enodes ty (InstructionImms.Unary (Opcode.VallTrue)) (id_array_1 a))
)
(rule (vall_true ty a)
    (pure_enode ty (InstructionImms.Unary (Opcode.VallTrue)) (id_array_1 a))
)

(decl vhigh_bits (Type Id) Id)
(extractor
    (vhigh_bits ty a)
    (enodes ty (InstructionImms.Unary (Opcode.VhighBits)) (id_array_1 a))
)
(rule (vhigh_bits ty a)
    (pure_enode ty (InstructionImms.Unary (Opcode.VhighBits)) (id_array_1 a))
)

(decl icmp (Type IntCC Id Id) Id)
(extractor
    (icmp ty Cond x y)
    (enodes ty (InstructionImms.IntCompare (Opcode.Icmp) Cond) (id_array_2 x y))
)
(rule (icmp ty Cond x y)
    (pure_enode ty (InstructionImms.IntCompare (Opcode.Icmp) Cond) (id_array_2 x y))
)

(decl icmp_imm (Type IntCC Id Imm64) Id)
(extractor
    (icmp_imm ty Cond x Y)
    (enodes ty (InstructionImms.IntCompareImm (Opcode.IcmpImm) Cond Y) (id_array_1 x))
)
(rule (icmp_imm ty Cond x Y)
    (pure_enode ty (InstructionImms.IntCompareImm (Opcode.IcmpImm) Cond Y) (id_array_1 x))
)

(decl ifcmp (Type Id Id) Id)
(extractor
    (ifcmp ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Ifcmp)) (id_array_2 x y))
)
(rule (ifcmp ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Ifcmp)) (id_array_2 x y))
)

(decl ifcmp_imm (Type Id Imm64) Id)
(extractor
    (ifcmp_imm ty x Y)
    (enodes ty (InstructionImms.BinaryImm64 (Opcode.IfcmpImm) Y) (id_array_1 x))
)
(rule (ifcmp_imm ty x Y)
    (pure_enode ty (InstructionImms.BinaryImm64 (Opcode.IfcmpImm) Y) (id_array_1 x))
)

(decl iadd (Type Id Id) Id)
(extractor
    (iadd ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Iadd)) (id_array_2 x y))
)
(rule (iadd ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Iadd)) (id_array_2 x y))
)

(decl isub (Type Id Id) Id)
(extractor
    (isub ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Isub)) (id_array_2 x y))
)
(rule (isub ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Isub)) (id_array_2 x y))
)

(decl ineg (Type Id) Id)
(extractor
    (ineg ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Ineg)) (id_array_1 x))
)
(rule (ineg ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Ineg)) (id_array_1 x))
)

(decl iabs (Type Id) Id)
(extractor
    (iabs ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Iabs)) (id_array_1 x))
)
(rule (iabs ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Iabs)) (id_array_1 x))
)

(decl imul (Type Id Id) Id)
(extractor
    (imul ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Imul)) (id_array_2 x y))
)
(rule (imul ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Imul)) (id_array_2 x y))
)

(decl umulhi (Type Id Id) Id)
(extractor
    (umulhi ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Umulhi)) (id_array_2 x y))
)
(rule (umulhi ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Umulhi)) (id_array_2 x y))
)

(decl smulhi (Type Id Id) Id)
(extractor
    (smulhi ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Smulhi)) (id_array_2 x y))
)
(rule (smulhi ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Smulhi)) (id_array_2 x y))
)

(decl sqmul_round_sat (Type Id Id) Id)
(extractor
    (sqmul_round_sat ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.SqmulRoundSat)) (id_array_2 x y))
)
(rule (sqmul_round_sat ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.SqmulRoundSat)) (id_array_2 x y))
)

(decl udiv (Type Id Id) Id)
(extractor
    (udiv ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Udiv)) (id_array_2 x y))
)
(rule (udiv ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Udiv)) (id_array_2 x y))
)

(decl sdiv (Type Id Id) Id)
(extractor
    (sdiv ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Sdiv)) (id_array_2 x y))
)
(rule (sdiv ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Sdiv)) (id_array_2 x y))
)

(decl urem (Type Id Id) Id)
(extractor
    (urem ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Urem)) (id_array_2 x y))
)
(rule (urem ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Urem)) (id_array_2 x y))
)

(decl srem (Type Id Id) Id)
(extractor
    (srem ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Srem)) (id_array_2 x y))
)
(rule (srem ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Srem)) (id_array_2 x y))
)

(decl iadd_imm (Type Id Imm64) Id)
(extractor
    (iadd_imm ty x Y)
    (enodes ty (InstructionImms.BinaryImm64 (Opcode.IaddImm) Y) (id_array_1 x))
)
(rule (iadd_imm ty x Y)
    (pure_enode ty (InstructionImms.BinaryImm64 (Opcode.IaddImm) Y) (id_array_1 x))
)

(decl imul_imm (Type Id Imm64) Id)
(extractor
    (imul_imm ty x Y)
    (enodes ty (InstructionImms.BinaryImm64 (Opcode.ImulImm) Y) (id_array_1 x))
)
(rule (imul_imm ty x Y)
    (pure_enode ty (InstructionImms.BinaryImm64 (Opcode.ImulImm) Y) (id_array_1 x))
)

(decl udiv_imm (Type Id Imm64) Id)
(extractor
    (udiv_imm ty x Y)
    (enodes ty (InstructionImms.BinaryImm64 (Opcode.UdivImm) Y) (id_array_1 x))
)
(rule (udiv_imm ty x Y)
    (pure_enode ty (InstructionImms.BinaryImm64 (Opcode.UdivImm) Y) (id_array_1 x))
)

(decl sdiv_imm (Type Id Imm64) Id)
(extractor
    (sdiv_imm ty x Y)
    (enodes ty (InstructionImms.BinaryImm64 (Opcode.SdivImm) Y) (id_array_1 x))
)
(rule (sdiv_imm ty x Y)
    (pure_enode ty (InstructionImms.BinaryImm64 (Opcode.SdivImm) Y) (id_array_1 x))
)

(decl urem_imm (Type Id Imm64) Id)
(extractor
    (urem_imm ty x Y)
    (enodes ty (InstructionImms.BinaryImm64 (Opcode.UremImm) Y) (id_array_1 x))
)
(rule (urem_imm ty x Y)
    (pure_enode ty (InstructionImms.BinaryImm64 (Opcode.UremImm) Y) (id_array_1 x))
)

(decl srem_imm (Type Id Imm64) Id)
(extractor
    (srem_imm ty x Y)
    (enodes ty (InstructionImms.BinaryImm64 (Opcode.SremImm) Y) (id_array_1 x))
)
(rule (srem_imm ty x Y)
    (pure_enode ty (InstructionImms.BinaryImm64 (Opcode.SremImm) Y) (id_array_1 x))
)

(decl irsub_imm (Type Id Imm64) Id)
(extractor
    (irsub_imm ty x Y)
    (enodes ty (InstructionImms.BinaryImm64 (Opcode.IrsubImm) Y) (id_array_1 x))
)
(rule (irsub_imm ty x Y)
    (pure_enode ty (InstructionImms.BinaryImm64 (Opcode.IrsubImm) Y) (id_array_1 x))
)

(decl iadd_cin (Type Id Id Id) Id)
(extractor
    (iadd_cin ty x y c_in)
    (enodes ty (InstructionImms.Ternary (Opcode.IaddCin)) (id_array_3 x y c_in))
)
(rule (iadd_cin ty x y c_in)
    (pure_enode ty (InstructionImms.Ternary (Opcode.IaddCin)) (id_array_3 x y c_in))
)

(decl iadd_ifcin (Type Id Id Id) Id)
(extractor
    (iadd_ifcin ty x y c_in)
    (enodes ty (InstructionImms.Ternary (Opcode.IaddIfcin)) (id_array_3 x y c_in))
)
(rule (iadd_ifcin ty x y c_in)
    (pure_enode ty (InstructionImms.Ternary (Opcode.IaddIfcin)) (id_array_3 x y c_in))
)

(decl iadd_cout (Type Id Id) Id)
(extractor
    (iadd_cout ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.IaddCout)) (id_array_2 x y))
)
(rule (iadd_cout ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.IaddCout)) (id_array_2 x y))
)

(decl iadd_ifcout (Type Id Id) Id)
(extractor
    (iadd_ifcout ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.IaddIfcout)) (id_array_2 x y))
)
(rule (iadd_ifcout ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.IaddIfcout)) (id_array_2 x y))
)

(decl iadd_carry (Type Id Id Id) Id)
(extractor
    (iadd_carry ty x y c_in)
    (enodes ty (InstructionImms.Ternary (Opcode.IaddCarry)) (id_array_3 x y c_in))
)
(rule (iadd_carry ty x y c_in)
    (pure_enode ty (InstructionImms.Ternary (Opcode.IaddCarry)) (id_array_3 x y c_in))
)

(decl iadd_ifcarry (Type Id Id Id) Id)
(extractor
    (iadd_ifcarry ty x y c_in)
    (enodes ty (InstructionImms.Ternary (Opcode.IaddIfcarry)) (id_array_3 x y c_in))
)
(rule (iadd_ifcarry ty x y c_in)
    (pure_enode ty (InstructionImms.Ternary (Opcode.IaddIfcarry)) (id_array_3 x y c_in))
)

(decl uadd_overflow_trap (Type Id Id TrapCode) Id)
(extractor
    (uadd_overflow_trap ty x y code)
    (enodes ty (InstructionImms.IntAddTrap (Opcode.UaddOverflowTrap) code) (id_array_2 x y))
)
(rule (uadd_overflow_trap ty x y code)
    (pure_enode ty (InstructionImms.IntAddTrap (Opcode.UaddOverflowTrap) code) (id_array_2 x y))
)

(decl isub_bin (Type Id Id Id) Id)
(extractor
    (isub_bin ty x y b_in)
    (enodes ty (InstructionImms.Ternary (Opcode.IsubBin)) (id_array_3 x y b_in))
)
(rule (isub_bin ty x y b_in)
    (pure_enode ty (InstructionImms.Ternary (Opcode.IsubBin)) (id_array_3 x y b_in))
)

(decl isub_ifbin (Type Id Id Id) Id)
(extractor
    (isub_ifbin ty x y b_in)
    (enodes ty (InstructionImms.Ternary (Opcode.IsubIfbin)) (id_array_3 x y b_in))
)
(rule (isub_ifbin ty x y b_in)
    (pure_enode ty (InstructionImms.Ternary (Opcode.IsubIfbin)) (id_array_3 x y b_in))
)

(decl isub_bout (Type Id Id) Id)
(extractor
    (isub_bout ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.IsubBout)) (id_array_2 x y))
)
(rule (isub_bout ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.IsubBout)) (id_array_2 x y))
)

(decl isub_ifbout (Type Id Id) Id)
(extractor
    (isub_ifbout ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.IsubIfbout)) (id_array_2 x y))
)
(rule (isub_ifbout ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.IsubIfbout)) (id_array_2 x y))
)

(decl isub_borrow (Type Id Id Id) Id)
(extractor
    (isub_borrow ty x y b_in)
    (enodes ty (InstructionImms.Ternary (Opcode.IsubBorrow)) (id_array_3 x y b_in))
)
(rule (isub_borrow ty x y b_in)
    (pure_enode ty (InstructionImms.Ternary (Opcode.IsubBorrow)) (id_array_3 x y b_in))
)

(decl isub_ifborrow (Type Id Id Id) Id)
(extractor
    (isub_ifborrow ty x y b_in)
    (enodes ty (InstructionImms.Ternary (Opcode.IsubIfborrow)) (id_array_3 x y b_in))
)
(rule (isub_ifborrow ty x y b_in)
    (pure_enode ty (InstructionImms.Ternary (Opcode.IsubIfborrow)) (id_array_3 x y b_in))
)

(decl band (Type Id Id) Id)
(extractor
    (band ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Band)) (id_array_2 x y))
)
(rule (band ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Band)) (id_array_2 x y))
)

(decl bor (Type Id Id) Id)
(extractor
    (bor ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Bor)) (id_array_2 x y))
)
(rule (bor ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Bor)) (id_array_2 x y))
)

(decl bxor (Type Id Id) Id)
(extractor
    (bxor ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Bxor)) (id_array_2 x y))
)
(rule (bxor ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Bxor)) (id_array_2 x y))
)

(decl bnot (Type Id) Id)
(extractor
    (bnot ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Bnot)) (id_array_1 x))
)
(rule (bnot ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Bnot)) (id_array_1 x))
)

(decl band_not (Type Id Id) Id)
(extractor
    (band_not ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.BandNot)) (id_array_2 x y))
)
(rule (band_not ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.BandNot)) (id_array_2 x y))
)

(decl bor_not (Type Id Id) Id)
(extractor
    (bor_not ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.BorNot)) (id_array_2 x y))
)
(rule (bor_not ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.BorNot)) (id_array_2 x y))
)

(decl bxor_not (Type Id Id) Id)
(extractor
    (bxor_not ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.BxorNot)) (id_array_2 x y))
)
(rule (bxor_not ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.BxorNot)) (id_array_2 x y))
)

(decl band_imm (Type Id Imm64) Id)
(extractor
    (band_imm ty x Y)
    (enodes ty (InstructionImms.BinaryImm64 (Opcode.BandImm) Y) (id_array_1 x))
)
(rule (band_imm ty x Y)
    (pure_enode ty (InstructionImms.BinaryImm64 (Opcode.BandImm) Y) (id_array_1 x))
)

(decl bor_imm (Type Id Imm64) Id)
(extractor
    (bor_imm ty x Y)
    (enodes ty (InstructionImms.BinaryImm64 (Opcode.BorImm) Y) (id_array_1 x))
)
(rule (bor_imm ty x Y)
    (pure_enode ty (InstructionImms.BinaryImm64 (Opcode.BorImm) Y) (id_array_1 x))
)

(decl bxor_imm (Type Id Imm64) Id)
(extractor
    (bxor_imm ty x Y)
    (enodes ty (InstructionImms.BinaryImm64 (Opcode.BxorImm) Y) (id_array_1 x))
)
(rule (bxor_imm ty x Y)
    (pure_enode ty (InstructionImms.BinaryImm64 (Opcode.BxorImm) Y) (id_array_1 x))
)

(decl rotl (Type Id Id) Id)
(extractor
    (rotl ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Rotl)) (id_array_2 x y))
)
(rule (rotl ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Rotl)) (id_array_2 x y))
)

(decl rotr (Type Id Id) Id)
(extractor
    (rotr ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Rotr)) (id_array_2 x y))
)
(rule (rotr ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Rotr)) (id_array_2 x y))
)

(decl rotl_imm (Type Id Imm64) Id)
(extractor
    (rotl_imm ty x Y)
    (enodes ty (InstructionImms.BinaryImm64 (Opcode.RotlImm) Y) (id_array_1 x))
)
(rule (rotl_imm ty x Y)
    (pure_enode ty (InstructionImms.BinaryImm64 (Opcode.RotlImm) Y) (id_array_1 x))
)

(decl rotr_imm (Type Id Imm64) Id)
(extractor
    (rotr_imm ty x Y)
    (enodes ty (InstructionImms.BinaryImm64 (Opcode.RotrImm) Y) (id_array_1 x))
)
(rule (rotr_imm ty x Y)
    (pure_enode ty (InstructionImms.BinaryImm64 (Opcode.RotrImm) Y) (id_array_1 x))
)

(decl ishl (Type Id Id) Id)
(extractor
    (ishl ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Ishl)) (id_array_2 x y))
)
(rule (ishl ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Ishl)) (id_array_2 x y))
)

(decl ushr (Type Id Id) Id)
(extractor
    (ushr ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Ushr)) (id_array_2 x y))
)
(rule (ushr ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Ushr)) (id_array_2 x y))
)

(decl sshr (Type Id Id) Id)
(extractor
    (sshr ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Sshr)) (id_array_2 x y))
)
(rule (sshr ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Sshr)) (id_array_2 x y))
)

(decl ishl_imm (Type Id Imm64) Id)
(extractor
    (ishl_imm ty x Y)
    (enodes ty (InstructionImms.BinaryImm64 (Opcode.IshlImm) Y) (id_array_1 x))
)
(rule (ishl_imm ty x Y)
    (pure_enode ty (InstructionImms.BinaryImm64 (Opcode.IshlImm) Y) (id_array_1 x))
)

(decl ushr_imm (Type Id Imm64) Id)
(extractor
    (ushr_imm ty x Y)
    (enodes ty (InstructionImms.BinaryImm64 (Opcode.UshrImm) Y) (id_array_1 x))
)
(rule (ushr_imm ty x Y)
    (pure_enode ty (InstructionImms.BinaryImm64 (Opcode.UshrImm) Y) (id_array_1 x))
)

(decl sshr_imm (Type Id Imm64) Id)
(extractor
    (sshr_imm ty x Y)
    (enodes ty (InstructionImms.BinaryImm64 (Opcode.SshrImm) Y) (id_array_1 x))
)
(rule (sshr_imm ty x Y)
    (pure_enode ty (InstructionImms.BinaryImm64 (Opcode.SshrImm) Y) (id_array_1 x))
)

(decl bitrev (Type Id) Id)
(extractor
    (bitrev ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Bitrev)) (id_array_1 x))
)
(rule (bitrev ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Bitrev)) (id_array_1 x))
)

(decl clz (Type Id) Id)
(extractor
    (clz ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Clz)) (id_array_1 x))
)
(rule (clz ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Clz)) (id_array_1 x))
)

(decl cls (Type Id) Id)
(extractor
    (cls ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Cls)) (id_array_1 x))
)
(rule (cls ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Cls)) (id_array_1 x))
)

(decl ctz (Type Id) Id)
(extractor
    (ctz ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Ctz)) (id_array_1 x))
)
(rule (ctz ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Ctz)) (id_array_1 x))
)

(decl bswap (Type Id) Id)
(extractor
    (bswap ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Bswap)) (id_array_1 x))
)
(rule (bswap ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Bswap)) (id_array_1 x))
)

(decl popcnt (Type Id) Id)
(extractor
    (popcnt ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Popcnt)) (id_array_1 x))
)
(rule (popcnt ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Popcnt)) (id_array_1 x))
)

(decl fcmp (Type FloatCC Id Id) Id)
(extractor
    (fcmp ty Cond x y)
    (enodes ty (InstructionImms.FloatCompare (Opcode.Fcmp) Cond) (id_array_2 x y))
)
(rule (fcmp ty Cond x y)
    (pure_enode ty (InstructionImms.FloatCompare (Opcode.Fcmp) Cond) (id_array_2 x y))
)

(decl ffcmp (Type Id Id) Id)
(extractor
    (ffcmp ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Ffcmp)) (id_array_2 x y))
)
(rule (ffcmp ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Ffcmp)) (id_array_2 x y))
)

(decl fadd (Type Id Id) Id)
(extractor
    (fadd ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Fadd)) (id_array_2 x y))
)
(rule (fadd ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Fadd)) (id_array_2 x y))
)

(decl fsub (Type Id Id) Id)
(extractor
    (fsub ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Fsub)) (id_array_2 x y))
)
(rule (fsub ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Fsub)) (id_array_2 x y))
)

(decl fmul (Type Id Id) Id)
(extractor
    (fmul ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Fmul)) (id_array_2 x y))
)
(rule (fmul ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Fmul)) (id_array_2 x y))
)

(decl fdiv (Type Id Id) Id)
(extractor
    (fdiv ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Fdiv)) (id_array_2 x y))
)
(rule (fdiv ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Fdiv)) (id_array_2 x y))
)

(decl sqrt (Type Id) Id)
(extractor
    (sqrt ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Sqrt)) (id_array_1 x))
)
(rule (sqrt ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Sqrt)) (id_array_1 x))
)

(decl fma (Type Id Id Id) Id)
(extractor
    (fma ty x y z)
    (enodes ty (InstructionImms.Ternary (Opcode.Fma)) (id_array_3 x y z))
)
(rule (fma ty x y z)
    (pure_enode ty (InstructionImms.Ternary (Opcode.Fma)) (id_array_3 x y z))
)

(decl fneg (Type Id) Id)
(extractor
    (fneg ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Fneg)) (id_array_1 x))
)
(rule (fneg ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Fneg)) (id_array_1 x))
)

(decl fabs (Type Id) Id)
(extractor
    (fabs ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Fabs)) (id_array_1 x))
)
(rule (fabs ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Fabs)) (id_array_1 x))
)

(decl fcopysign (Type Id Id) Id)
(extractor
    (fcopysign ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Fcopysign)) (id_array_2 x y))
)
(rule (fcopysign ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Fcopysign)) (id_array_2 x y))
)

(decl fmin (Type Id Id) Id)
(extractor
    (fmin ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Fmin)) (id_array_2 x y))
)
(rule (fmin ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Fmin)) (id_array_2 x y))
)

(decl fmin_pseudo (Type Id Id) Id)
(extractor
    (fmin_pseudo ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.FminPseudo)) (id_array_2 x y))
)
(rule (fmin_pseudo ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.FminPseudo)) (id_array_2 x y))
)

(decl fmax (Type Id Id) Id)
(extractor
    (fmax ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Fmax)) (id_array_2 x y))
)
(rule (fmax ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Fmax)) (id_array_2 x y))
)

(decl fmax_pseudo (Type Id Id) Id)
(extractor
    (fmax_pseudo ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.FmaxPseudo)) (id_array_2 x y))
)
(rule (fmax_pseudo ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.FmaxPseudo)) (id_array_2 x y))
)

(decl ceil (Type Id) Id)
(extractor
    (ceil ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Ceil)) (id_array_1 x))
)
(rule (ceil ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Ceil)) (id_array_1 x))
)

(decl floor (Type Id) Id)
(extractor
    (floor ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Floor)) (id_array_1 x))
)
(rule (floor ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Floor)) (id_array_1 x))
)

(decl trunc (Type Id) Id)
(extractor
    (trunc ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Trunc)) (id_array_1 x))
)
(rule (trunc ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Trunc)) (id_array_1 x))
)

(decl nearest (Type Id) Id)
(extractor
    (nearest ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Nearest)) (id_array_1 x))
)
(rule (nearest ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Nearest)) (id_array_1 x))
)

(decl is_null (Type Id) Id)
(extractor
    (is_null ty x)
    (enodes ty (InstructionImms.Unary (Opcode.IsNull)) (id_array_1 x))
)
(rule (is_null ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.IsNull)) (id_array_1 x))
)

(decl is_invalid (Type Id) Id)
(extractor
    (is_invalid ty x)
    (enodes ty (InstructionImms.Unary (Opcode.IsInvalid)) (id_array_1 x))
)
(rule (is_invalid ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.IsInvalid)) (id_array_1 x))
)

(decl bitcast (Type MemFlags Id) Id)
(extractor
    (bitcast ty MemFlags x)
    (enodes ty (InstructionImms.LoadNoOffset (Opcode.Bitcast) MemFlags) (id_array_1 x))
)
(rule (bitcast ty MemFlags x)
    (pure_enode ty (InstructionImms.LoadNoOffset (Opcode.Bitcast) MemFlags) (id_array_1 x))
)

(decl scalar_to_vector (Type Id) Id)
(extractor
    (scalar_to_vector ty s)
    (enodes ty (InstructionImms.Unary (Opcode.ScalarToVector)) (id_array_1 s))
)
(rule (scalar_to_vector ty s)
    (pure_enode ty (InstructionImms.Unary (Opcode.ScalarToVector)) (id_array_1 s))
)

(decl bmask (Type Id) Id)
(extractor
    (bmask ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Bmask)) (id_array_1 x))
)
(rule (bmask ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Bmask)) (id_array_1 x))
)

(decl ireduce (Type Id) Id)
(extractor
    (ireduce ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Ireduce)) (id_array_1 x))
)
(rule (ireduce ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Ireduce)) (id_array_1 x))
)

(decl snarrow (Type Id Id) Id)
(extractor
    (snarrow ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Snarrow)) (id_array_2 x y))
)
(rule (snarrow ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Snarrow)) (id_array_2 x y))
)

(decl unarrow (Type Id Id) Id)
(extractor
    (unarrow ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Unarrow)) (id_array_2 x y))
)
(rule (unarrow ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Unarrow)) (id_array_2 x y))
)

(decl uunarrow (Type Id Id) Id)
(extractor
    (uunarrow ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.Uunarrow)) (id_array_2 x y))
)
(rule (uunarrow ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.Uunarrow)) (id_array_2 x y))
)

(decl swiden_low (Type Id) Id)
(extractor
    (swiden_low ty x)
    (enodes ty (InstructionImms.Unary (Opcode.SwidenLow)) (id_array_1 x))
)
(rule (swiden_low ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.SwidenLow)) (id_array_1 x))
)

(decl swiden_high (Type Id) Id)
(extractor
    (swiden_high ty x)
    (enodes ty (InstructionImms.Unary (Opcode.SwidenHigh)) (id_array_1 x))
)
(rule (swiden_high ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.SwidenHigh)) (id_array_1 x))
)

(decl uwiden_low (Type Id) Id)
(extractor
    (uwiden_low ty x)
    (enodes ty (InstructionImms.Unary (Opcode.UwidenLow)) (id_array_1 x))
)
(rule (uwiden_low ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.UwidenLow)) (id_array_1 x))
)

(decl uwiden_high (Type Id) Id)
(extractor
    (uwiden_high ty x)
    (enodes ty (InstructionImms.Unary (Opcode.UwidenHigh)) (id_array_1 x))
)
(rule (uwiden_high ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.UwidenHigh)) (id_array_1 x))
)

(decl iadd_pairwise (Type Id Id) Id)
(extractor
    (iadd_pairwise ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.IaddPairwise)) (id_array_2 x y))
)
(rule (iadd_pairwise ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.IaddPairwise)) (id_array_2 x y))
)

(decl widening_pairwise_dot_product_s (Type Id Id) Id)
(extractor
    (widening_pairwise_dot_product_s ty x y)
    (enodes ty (InstructionImms.Binary (Opcode.WideningPairwiseDotProductS)) (id_array_2 x y))
)
(rule (widening_pairwise_dot_product_s ty x y)
    (pure_enode ty (InstructionImms.Binary (Opcode.WideningPairwiseDotProductS)) (id_array_2 x y))
)

(decl uextend (Type Id) Id)
(extractor
    (uextend ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Uextend)) (id_array_1 x))
)
(rule (uextend ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Uextend)) (id_array_1 x))
)

(decl sextend (Type Id) Id)
(extractor
    (sextend ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Sextend)) (id_array_1 x))
)
(rule (sextend ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Sextend)) (id_array_1 x))
)

(decl fpromote (Type Id) Id)
(extractor
    (fpromote ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Fpromote)) (id_array_1 x))
)
(rule (fpromote ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Fpromote)) (id_array_1 x))
)

(decl fdemote (Type Id) Id)
(extractor
    (fdemote ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Fdemote)) (id_array_1 x))
)
(rule (fdemote ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Fdemote)) (id_array_1 x))
)

(decl fvdemote (Type Id) Id)
(extractor
    (fvdemote ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Fvdemote)) (id_array_1 x))
)
(rule (fvdemote ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Fvdemote)) (id_array_1 x))
)

(decl fvpromote_low (Type Id) Id)
(extractor
    (fvpromote_low ty a)
    (enodes ty (InstructionImms.Unary (Opcode.FvpromoteLow)) (id_array_1 a))
)
(rule (fvpromote_low ty a)
    (pure_enode ty (InstructionImms.Unary (Opcode.FvpromoteLow)) (id_array_1 a))
)

(decl fcvt_to_uint (Type Id) Id)
(extractor
    (fcvt_to_uint ty x)
    (enodes ty (InstructionImms.Unary (Opcode.FcvtToUint)) (id_array_1 x))
)
(rule (fcvt_to_uint ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.FcvtToUint)) (id_array_1 x))
)

(decl fcvt_to_sint (Type Id) Id)
(extractor
    (fcvt_to_sint ty x)
    (enodes ty (InstructionImms.Unary (Opcode.FcvtToSint)) (id_array_1 x))
)
(rule (fcvt_to_sint ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.FcvtToSint)) (id_array_1 x))
)

(decl fcvt_to_uint_sat (Type Id) Id)
(extractor
    (fcvt_to_uint_sat ty x)
    (enodes ty (InstructionImms.Unary (Opcode.FcvtToUintSat)) (id_array_1 x))
)
(rule (fcvt_to_uint_sat ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.FcvtToUintSat)) (id_array_1 x))
)

(decl fcvt_to_sint_sat (Type Id) Id)
(extractor
    (fcvt_to_sint_sat ty x)
    (enodes ty (InstructionImms.Unary (Opcode.FcvtToSintSat)) (id_array_1 x))
)
(rule (fcvt_to_sint_sat ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.FcvtToSintSat)) (id_array_1 x))
)

(decl fcvt_from_uint (Type Id) Id)
(extractor
    (fcvt_from_uint ty x)
    (enodes ty (InstructionImms.Unary (Opcode.FcvtFromUint)) (id_array_1 x))
)
(rule (fcvt_from_uint ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.FcvtFromUint)) (id_array_1 x))
)

(decl fcvt_from_sint (Type Id) Id)
(extractor
    (fcvt_from_sint ty x)
    (enodes ty (InstructionImms.Unary (Opcode.FcvtFromSint)) (id_array_1 x))
)
(rule (fcvt_from_sint ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.FcvtFromSint)) (id_array_1 x))
)

(decl fcvt_low_from_sint (Type Id) Id)
(extractor
    (fcvt_low_from_sint ty x)
    (enodes ty (InstructionImms.Unary (Opcode.FcvtLowFromSint)) (id_array_1 x))
)
(rule (fcvt_low_from_sint ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.FcvtLowFromSint)) (id_array_1 x))
)

(decl isplit (Type Id) Id)
(extractor
    (isplit ty x)
    (enodes ty (InstructionImms.Unary (Opcode.Isplit)) (id_array_1 x))
)
(rule (isplit ty x)
    (pure_enode ty (InstructionImms.Unary (Opcode.Isplit)) (id_array_1 x))
)

(decl iconcat (Type Id Id) Id)
(extractor
    (iconcat ty lo hi)
    (enodes ty (InstructionImms.Binary (Opcode.Iconcat)) (id_array_2 lo hi))
)
(rule (iconcat ty lo hi)
    (pure_enode ty (InstructionImms.Binary (Opcode.Iconcat)) (id_array_2 lo hi))
)

(decl atomic_rmw (Type MemFlags AtomicRmwOp Id Id) Id)
(extractor
    (atomic_rmw ty MemFlags AtomicRmwOp p x)
    (enodes ty (InstructionImms.AtomicRmw (Opcode.AtomicRmw) MemFlags AtomicRmwOp) (id_array_2 p x))
)
(rule (atomic_rmw ty MemFlags AtomicRmwOp p x)
    (pure_enode ty (InstructionImms.AtomicRmw (Opcode.AtomicRmw) MemFlags AtomicRmwOp) (id_array_2 p x))
)

(decl atomic_cas (Type MemFlags Id Id Id) Id)
(extractor
    (atomic_cas ty MemFlags p e x)
    (enodes ty (InstructionImms.AtomicCas (Opcode.AtomicCas) MemFlags) (id_array_3 p e x))
)
(rule (atomic_cas ty MemFlags p e x)
    (pure_enode ty (InstructionImms.AtomicCas (Opcode.AtomicCas) MemFlags) (id_array_3 p e x))
)

(decl atomic_load (Type MemFlags Id) Id)
(extractor
    (atomic_load ty MemFlags p)
    (enodes ty (InstructionImms.LoadNoOffset (Opcode.AtomicLoad) MemFlags) (id_array_1 p))
)
(rule (atomic_load ty MemFlags p)
    (pure_enode ty (InstructionImms.LoadNoOffset (Opcode.AtomicLoad) MemFlags) (id_array_1 p))
)

(decl atomic_store (Type MemFlags Id Id) Id)
(extractor
    (atomic_store ty MemFlags x p)
    (enodes ty (InstructionImms.StoreNoOffset (Opcode.AtomicStore) MemFlags) (id_array_2 x p))
)
(rule (atomic_store ty MemFlags x p)
    (pure_enode ty (InstructionImms.StoreNoOffset (Opcode.AtomicStore) MemFlags) (id_array_2 x p))
)

(decl fence (Type ) Id)
(extractor
    (fence ty )
    (enodes ty (InstructionImms.NullAry (Opcode.Fence)) (id_array_0 ))
)
(rule (fence ty )
    (pure_enode ty (InstructionImms.NullAry (Opcode.Fence)) (id_array_0 ))
)

(decl extract_vector (Type Id Uimm8) Id)
(extractor
    (extract_vector ty x y)
    (enodes ty (InstructionImms.BinaryImm8 (Opcode.ExtractVector) y) (id_array_1 x))
)
(rule (extract_vector ty x y)
    (pure_enode ty (InstructionImms.BinaryImm8 (Opcode.ExtractVector) y) (id_array_1 x))
)

